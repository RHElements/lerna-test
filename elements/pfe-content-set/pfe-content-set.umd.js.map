{"version":3,"file":"pfe-content-set.umd.js","sources":["pfe-content-set.umd.js"],"sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../pfelement/pfelement.umd\";\n\nclass PfeContentSet extends PFElement {\n  get html() {\n    return `<style>:host {\n  display: block; }</style>\n${this.isTab ? `\n    <pfe-tabs ${this.settings.variant ? \"pfe-variant=\" + this.settings.variant : \"\"}\n    ${this.orientation ? this.orientation : \"\"}>\n      ${this.groupings.map(group => `\n        <pfe-tab slot=\"tab\">\n          ${group.heading.innerText}\n        </pfe-tab>\n        <pfe-tab-panel slot=\"panel\">\n          ${group.body.map(item => item.outerHTML).join(\"\")}\n        </pfe-tab-panel>\n      `).join('')}\n    </pfe-tabs>\n  ` : `\n    <pfe-accordion ${this.settings.color ? \"color=\" + this.settings.color : \"\"}>\n        ${this.groupings.map(group => `\n        <pfe-accordion-header>\n          ${group.heading.outerHTML}\n        </pfe-accordion-header>\n        <pfe-accordion-panel>\n            ${group.body.map(item => item.outerHTML).join(\"\")}\n        </pfe-accordion-panel>\n      `).join('')}\n    </pfe-accordion>\n  `}`;\n  }\n\n  static get tag() {\n    return \"pfe-content-set\";\n  }\n\n  get styleUrl() {\n    return \"pfe-content-set.css\";\n  }\n\n  get templateUrl() {\n    return \"pfe-content-set.html\";\n  }\n\n  get isTab() {\n    return this.parentNode\n      ? this.parentNode.offsetWidth > 768\n      : window.outerWidth > 768;\n  }\n\n  get settings() {\n    let settings = {};\n    const variant = this.getAttribute(\"pfe-variant\");\n    if (variant === \"primary\") {\n      settings.variant = variant;\n      settings.color = \"striped\";\n    } else if (variant === \"secondary\") {\n      settings.variant = variant;\n      settings.color = \"dark\";\n    } else {\n      settings.color = \"lightest\";\n    }\n    return settings;\n  }\n\n  get orientation() {\n    if (this.hasAttribute(\"vertical\")) {\n      return \" vertical\";\n    }\n  }\n\n  static get observedAttributes() {\n    return [\"pfe-vertical\", \"selected-index\", \"pfe-variant\", \"theme\", \"color\"];\n  }\n\n  static get cascadingAttributes() {\n    return {\n      vertical: \"pfe-tabs\",\n      \"selected-index\": \"pfe-tabs\",\n      \"pfe-variant\": \"pfe-tabs\",\n      theme: \"pfe-accordion\",\n      color: \"pfe-accordion\"\n    };\n  }\n\n  // Declare the type of this component\n  static get pfeType() {\n    return PFElement.pfeType.combo;\n  }\n\n  constructor() {\n    super(PfeContentSet, {\n      delayRender: true\n    });\n\n    this.groupings = [];\n\n    this._observer = new MutationObserver(() => {\n      const tempGrouping = [...this.querySelectorAll(\"pfe-content-set-group\")];\n\n      tempGrouping.forEach(group => {\n        const tempGroup = {\n          heading: group.querySelector(\"[pfe-heading]\"),\n          body: [...group.querySelectorAll(\":not([pfe-heading])\")]\n        };\n\n        this.groupings.push(tempGroup);\n      });\n\n      // this._observer.disconnect();\n      this.render();\n    });\n\n    this._observer.observe(this, {\n      attributes: true,\n      childList: true\n    });\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  disconnectedCallback() {\n    this._observer.disconnect();\n  }\n}\n\nPFElement.create(PfeContentSet);\n\nexport default PfeContentSet;\n"],"names":["PfeContentSet","groupings","_observer","MutationObserver","_this","querySelectorAll","forEach","tempGroup","group","querySelector","push","render","observe","PFElement","this","isTab","settings","variant","orientation","map","heading","innerText","body","item","outerHTML","join","color","parentNode","offsetWidth","window","outerWidth","getAttribute","hasAttribute","pfeType","combo","disconnect","create"],"mappings":"wqBAyBMA,gWAyFIA,EAAe,cACN,cAGVC,UAAY,KAEZC,UAAY,IAAIC,iBAAiB,uBACXC,EAAKC,iBAAiB,2BAElCC,QAAQ,gBACbC,EAAY,SACPC,EAAMC,cAAc,kCACnBD,EAAMH,iBAAiB,4BAG9BJ,UAAUS,KAAKH,OAIjBI,aAGFT,UAAUU,UAAc,aACf,aACD,yUAjHWC,0FAI1BC,KAAKC,0BACSD,KAAKE,SAASC,QAAU,eAAiBH,KAAKE,SAASC,QAAU,cAC3EH,KAAKI,YAAcJ,KAAKI,YAAc,gBACpCJ,KAAKb,UAAUkB,IAAI,+DAEfX,EAAMY,QAAQC,mFAGdb,EAAMc,KAAKH,IAAI,mBAAQI,EAAKC,YAAWC,KAAK,2CAE/CA,KAAK,qDAGOX,KAAKE,SAASU,MAAQ,SAAWZ,KAAKE,SAASU,MAAQ,kBAClEZ,KAAKb,UAAUkB,IAAI,iEAEjBX,EAAMY,QAAQI,2FAGZhB,EAAMc,KAAKH,IAAI,mBAAQI,EAAKC,YAAWC,KAAK,iDAEjDA,KAAK,yEAUH,gEAIA,4DAIAX,KAAKa,WACsB,IAA9Bb,KAAKa,WAAWC,YACI,IAApBC,OAAOC,gDAIPd,EAAW,GACTC,EAAUH,KAAKiB,aAAa,wBAGvBL,MAFK,YAAZT,KACOA,QAAUA,EACF,WACI,cAAZA,KACAA,QAAUA,EACF,QAEA,WAEZD,yCAIHF,KAAKkB,aAAa,kBACb,gDAlCF,mEAuCA,CAAC,eAAgB,iBAAkB,cAAe,QAAS,2DAI3D,UACK,4BACQ,yBACH,iBACR,sBACA,wDAMFnB,EAAUoB,QAAQC,wcAqCpBhC,UAAUiC,6BAInBtB,EAAUuB,OAAOpC"}