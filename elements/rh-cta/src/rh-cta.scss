@import "../../rh-sass/rh-sass";


//////////////////////////////////////////////////////
:host {                                  //  YA BASIC!

  // Define CSS Vars
  @include rh-define-vars("cta--BorderRadius",                "BorderRadius",                5em);
  @include rh-define-vars("cta--link-color",                  "link-color",                  blue);
  @include rh-define-vars("cta--link-color--hover",           "link-color--hover",           darkBlue);
  @include rh-define-vars("cta--link-color--inverted",        "link-color--inverted",        white);
  @include rh-define-vars("cta--link-color--inverted--hover", "link-color--inverted--hover", lightGray);

  // Common styles 
  & ::slotted(a) {
      font-family: $rh-global--FontFamily--sans-serif;
      font-weight: bold;
      color: rh-var("cta--link-color");
  }
  & ::slotted(a:hover),
  & ::slotted(a:focus) {
      color: rh-var("cta--link-color--hover");
  }
}

:host([inverted]) {   
    & ::slotted(a) {
        color: rh-var("cta--link-color--inverted");
    }
    & ::slotted(a:hover),
    & ::slotted(a:focus) {
        color: rh-var("cta--link-color--inverted--hover");
    }
}

//////////////////////////////////////////////////////
:host(.primary) {                      //  PRIMARY CTA

  // @mixin rh-define-vars results in CSS Vars like this:
  // --rhe-local-cta--link: var(--rhe-cta--link, var(--rhe-theme--link, blue));
  //                           cp-themeset has theme vars ^^


  // Define CSS Vars
  @include rh-define-vars("cta--primary-BorderRadius",      "global--border--BorderRadius", 5em);

  @include rh-define-vars("cta--primary-bg-color",          "color--primary",        red);
  @include rh-define-vars("cta--primary-text-color",        "color--white",          white);
  @include rh-define-vars("cta--primary-bg-color--hover",   "color--primary-shade2", darkRed);

  & ::slotted(a) {
    display: inline-block;
    text-decoration: none;
    transition: all 250ms $rh-global--animation-timing;
    padding: $rh-global--spacer--xs $rh-global--spacer--lg;
    border: solid transparent $rh-global--border--BorderWidth;
    border-radius: rh-var("cta--primary-BorderRadius");
    // Colors:
    background: rh-var("cta--primary-bg-color");
    color: rh-var("cta--primary-text-color");
  }

  & ::slotted(a:hover),
  & ::slotted(a:focus) {
    background: rh-var("cta--primary-bg-color--hover");
  }
}



///////////////////////////////////////////////////////////////
:host(.secondary) {             //  SECONDARY CTA (GHOST BUTTON) 

  // Define CSS Vars
  @include rh-define-vars("cta--secondary-BorderRadius",                  "global--border--BorderRadius", 5em);
  
  // Normal
  @include rh-define-vars("cta--secondary-bg-color",                      "color--transparent",    transparent);
  @include rh-define-vars("cta--secondary-text-color",                    "color--black",          black);
  @include rh-define-vars("cta--secondary-border-color",                  "color--black",          black);
  
  // Normal hover
  @include rh-define-vars("cta--secondary-bg-color--hover",               "color--black",          black);
  @include rh-define-vars("cta--secondary-text-color--hover",             "color--white",          white);
  @include rh-define-vars("cta--secondary-border-color--hover",           "color--black",          black);
 
  // Inverted
  @include rh-define-vars("cta--secondary-bg-color--inverted",            "color--transparent",    transparent);
  @include rh-define-vars("cta--secondary-text-color--inverted",          "color--white",          white);
  @include rh-define-vars("cta--secondary-border-color--inverted",        "color--white",          white);
 
  // Inverted hover
  @include rh-define-vars("cta--secondary-bg-color--inverted--hover",     "color--white",          white);
  @include rh-define-vars("cta--secondary-text-color--inverted--hover",   "color--black",          black);
  @include rh-define-vars("cta--secondary-border-color--inverted--hover", "color--white",          white);

  & ::slotted(a) {
    display: inline-block;
    text-decoration: none;
    transition: all 250ms $rh-global--animation-timing;
    padding: $rh-global--spacer--xs $rh-global--spacer--lg;
    border-radius: rh-var("cta--secondary-BorderRadius");
    border: solid $rh-global--border--BorderWidth;
    
    // Colors:
    border-color: rh-var("cta--secondary-border-color");
    background: rh-var("cta--secondary-bg-color");
    color: rh-var("cta--secondary-text-color");
  }

  & ::slotted(a:hover),
  & ::slotted(a:focus) {
    // Colors:
    border: solid $rh-global--border--BorderWidth rh-var("cta--secondary-border-color--hover");
    background: rh-var("cta--secondary-bg-color--hover");
    color: rh-var("cta--secondary-text-color--hover");
  }
}
///////////////////////////////////////////////////////////////
:host([inverted].secondary) {     //  SECONDARY CTA + INVERTED
    & ::slotted(a) {
      border: solid $rh-global--border--BorderWidth rh-var("cta--secondary-border-color--inverted");
      background: rh-var("cta--secondary-bg-color--inverted");
      color: rh-var("cta--secondary-text-color--inverted");
    }

    & ::slotted(a:hover),
    & ::slotted(a:focus) {
      // Colors:
      border-color: rh-var("cta--secondary-border-color--inverted--hover");
      background: rh-var("cta--secondary-bg-color--inverted--hover");
      color: rh-var("cta--secondary-text-color--inverted--hover");
    }
}


///////////////////////////////////////////////////////////////
:host(.tertiary) {                              //  TERIARY CTA
  display: inline-block;

  // Define CSS Vars
  @include rh-define-vars("cta__arrow--spacing", "spacing--xxs", $rh-global__arrow--spacer);

  // normal
  @include rh-define-vars("cta--tertiary-text-color",                  "link-color",         green);
  @include rh-define-vars("cta--tertiary-text-color--hover",           "link-color--hover",  navyBlue);
  
  // inverted
  @include rh-define-vars("cta--tertiary-text-color--inverted",        "link-color--inverted",             white);
  @include rh-define-vars("cta--tertiary-text-color--inverted--hover", "link-color--inverted--hover",      lightGray);

  & ::slotted(a) {
    text-decoration: none;
    color: rh-var("cta--tertiary-text-color");
    &::after {
      margin-left: rh-var("cta__arrow--spacing");
      vertical-align: middle;
      @include rh-arrow(right, $pseudo: true);
    }
  }
  & ::slotted(a:hover),
  & ::slotted(a:focus) {
    color: rh-var("cta--tertiary-text-color--hover");
  }
}
///////////////////////////////////////////////////////////////
:host([inverted].tertiary) {       //  TERTIARY CTA + INVERTED
    & ::slotted(a) {
      color: rh-var("cta--tertiary-text-color--inverted");
    }
    & ::slotted(a:hover),
    & ::slotted(a:focus) {
      color: rh-var("cta--tertiary-text-color--inverted--hover");
    }
}
