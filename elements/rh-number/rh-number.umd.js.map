{"version":3,"file":"rh-number.umd.js","sources":["../rhelement/rhelement.umd.js","../../node_modules/numeral/numeral.js","rh-number.umd.js"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.RHElement=t()}(this,function(){\"use strict\";function e(){console.log(\"[reveal] web components ready\"),console.log(\"[reveal] elements ready, revealing the body\"),window.document.body.removeAttribute(\"unresolved\")}var t=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}(),n=function(e){function r(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,r);var o=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this));return o.tag=e,o._queue=[],o.template=document.createElement(\"template\"),o.attachShadow({mode:\"open\"}),t&&o._queueAction({type:\"setProperty\",data:{name:\"rhType\",value:t}}),n||o.render(),o}return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,HTMLElement),t(r,[{key:\"rhType\",get:function(){return this.getAttribute(\"rh-type\")},set:function(e){this.setAttribute(\"rh-type\",e)}}],[{key:\"create\",value:function(e){window.customElements.define(e.tag,e)}},{key:\"RhTypes\",get:function(){return{Container:\"container\",Content:\"content\",Pattern:\"pattern\"}}}]),t(r,[{key:\"connectedCallback\",value:function(){window.ShadyCSS&&ShadyCSS.styleElement(this),this._queue.length&&this._processQueue()}},{key:\"_queueAction\",value:function(e){this._queue.push(e)}},{key:\"_processQueue\",value:function(){var t=this;this._queue.forEach(function(e){t[\"_\"+e.type](e.data)}),this._queue=[]}},{key:\"_setProperty\",value:function(e){var t=e.name,n=e.value;this[t]=n}},{key:\"render\",value:function(){this.shadowRoot.innerHTML=null,this.template.innerHTML=this.html,window.ShadyCSS&&ShadyCSS.prepareTemplate(this.template,this.tag),this.shadowRoot.appendChild(this.template.content.cloneNode(!0))}}]),r}();return window.WebComponents.ready?e():window.addEventListener(\"WebComponentsReady\",e),n});\n//# sourceMappingURL=rhelement.umd.js.map\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","/*\n * Copyright 2018 Red Hat, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport RHElement from \"../rhelement/rhelement.umd.js\";\nimport numeral from \"numeral\";\n\n// easy aliases for common format strings\nconst types = {\n  abbrev: \"0a\", // or 'approx'?\n  ordinal: \"0o\",\n  percent: \"0%\",\n  bytes: \"0[.][00] ib\",\n  e: \"0[.00]e+0\",\n  thousands: \"0,0[.00]\"\n};\n\n// use thin spaces to separate thousands chunks\n// debugger;\nnumeral.locales.en.delimiters.thousands = \" \";\n\nclass RhNumber extends RHElement {\n  get html() {\n    return `\n<style>\n:host {\n  display: inline;\n  white-space: nowrap; }\n</style>\n<span></span>`;\n  }\n\n  static get tag() {\n    return \"rh-number\";\n  }\n\n  get styleUrl() {\n    return \"rh-number.scss\";\n  }\n\n  get templateUrl() {\n    return \"rh-number.html\";\n  }\n\n  static get observedAttributes() {\n    return [\"number\", \"format\", \"type\"];\n  }\n\n  constructor() {\n    super(RhNumber.tag);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.connected = true;\n\n    this._determineFormat();\n    this._setInitialNumber();\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    switch (attr) {\n      case \"type\":\n        this._determineFormat();\n        break;\n      case \"format\":\n        this._updateNumber(this.getAttribute(\"number\"), newVal);\n        break;\n      case \"number\":\n        this._updateNumber(newVal, this.getAttribute(\"format\"));\n    }\n  }\n\n  _setInitialNumber() {\n    const numberAttrDefined = !Number.isNaN(\n      parseFloat(this.getAttribute(\"number\"))\n    );\n    const numberContentDefined = !Number.isNaN(parseFloat(this.textContent));\n\n    if (numberAttrDefined) {\n      this.setAttribute(\"number\", this.getAttribute(\"number\"));\n    } else if (numberContentDefined) {\n      this.setAttribute(\"number\", this.textContent);\n    }\n  }\n\n  _determineFormat() {\n    let type = this.getAttribute(\"type\");\n\n    if (type && types[type]) {\n      this.setAttribute(\"format\", types[type]);\n    } else {\n      this.setAttribute(\"format\", this.getAttribute(\"format\") || \"0\");\n    }\n  }\n\n  _updateNumber(num, type) {\n    this.shadowRoot.querySelector(\"span\").textContent = this._format(num, type);\n  }\n\n  _format(num, type) {\n    return numeral(num).format(type);\n  }\n}\n\nRHElement.create(RhNumber);\n"],"names":["module","e","log","console","window","document","body","removeAttribute","t","o","n","length","enumerable","configurable","writable","Object","defineProperty","key","prototype","r","arguments","TypeError","this","ReferenceError","__proto__","getPrototypeOf","call","tag","_queue","template","createElement","attachShadow","mode","_queueAction","type","data","name","value","render","create","constructor","setPrototypeOf","HTMLElement","get","getAttribute","set","setAttribute","customElements","define","Container","Content","Pattern","ShadyCSS","styleElement","_processQueue","push","forEach","shadowRoot","innerHTML","html","prepareTemplate","appendChild","content","cloneNode","WebComponents","ready","addEventListener","global","factory","numeral","_","decimal","binary","unformatRegex","formats","locales","defaults","options","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","input","number","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","format","roundingFunction","leadingCount","abbrForce","int","precision","signed","thousands","output","locale","negP","optDec","abbr","neg","Math","abs","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","subString","start","array","callback","len","k","x","parts","Array","reduce","accum","next","mn","multiplier","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","substr","fn","inputString","formatFunction","round","numberToFormat","corrFactor","correctionFactor","curr","currI","O","subtract","b","space","splice","join","suffixes","concat","filter","item","bytes","suffix","base","bytesMultiplier","symbols","before","after","insert","toExponential","ordinal","hours","floor","minutes","seconds","timeArray","exports","types","en","RhNumber","RHElement","connected","_determineFormat","_setInitialNumber","attr","oldVal","newVal","_updateNumber","numberAttrDefined","parseFloat","numberContentDefined","textContent","num","querySelector","_format"],"mappings":"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"}