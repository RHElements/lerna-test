// NOTE: pfe-accordion uses shared styles that can be found in `pfe-sass/mixins/_components.scss`
@import "../../pfe-sass/pfe-sass";

$LOCAL: accordion;

/// ===========================================================================
/// DEFAULT ACCORDION HEADING
/// ===========================================================================
:host {
  transition: transform 0.3s #{pfe-var(animation-timing)};
  display: block;

  // Shadow template styles
  > * {
    margin: 0;
  }
}
 
button {
  @include pfe-trigger;

  // @TODO workaround, can we get the variables working?
  @include browser-query(edge) {
    text-align: left;
  }

  @include browser-query(ie11) {
    padding: 16px 24px;
    &:hover {
      border-left-color: #{pfe-color(ui-base)};
    }
  }
}

:host(:not([pfe-disclosure="true"])) {
  button[aria-expanded="true"]::after {
    @include pfe-chevron($state: open);
  }
  button[aria-expanded="false"]::after {
    @include pfe-chevron($state: closed);
  }
}

// Add border bottom to the last button in an accordion set.
:host(:last-of-type) button:not([aria-expanded="true"]) {
  @include pfe-trigger-last;
}
:host(:last-of-type.animating) button {
  --pfe-accordion--BorderBottomWidth: 0;
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================

// Default styles
button[aria-expanded="true"] {
  @include pfe-accordion-variables($state: expanded);
  @include browser-query(ie11) {
    border-bottom-width: 0;
    border-left-color: #{pfe-color(ui-base)};
    border-right-color: #{pfe-color(surface--border)};
  }
}

// Styles contextual to theme
@each $context in $THEMES {
  :host([on="#{$context}"]) button[aria-expanded="true"] {
    @include pfe-accordion-variables($state: expanded, $theme: #{$context});
  }
}

/// ===========================================================================
/// DISCLOSURE STYLES
/// ===========================================================================

:host([pfe-disclosure="true"]) {
  button {
    --pfe-accordion--Trigger--padding: #{pfe-local(PaddingBase)} calc(#{pfe-local(PaddingBase)} * 1.5) #{pfe-local(PaddingBase)} calc((#{pfe-local(PaddingBase)} * 3) + 2px) !important;
    @include browser-query(ie11) {
      padding: 16px 24px 16px 47px;
      border-right-color: #{pfe-color(surface--border)};
      border-left-color: #{pfe-color(surface--border)};
      border-left-width: #{pfe-var(surface--border-width)};
    }

    &[aria-expanded="true"] {
      padding-left: calc(( #{pfe-var(container-spacer)} * 3 ) - 1px ) !important;
      border-left-width: #{pfe-var(surface--border-width--heavy)};
      border-left-color: #{pfe-color(ui-base)};

      &::before {
        @include pfe-chevron($state: open, $position: before);
        left: calc( #{pfe-var(container-spacer)} * 1.3125 ); // 21px.
      }
    }
    &[aria-expanded="false"]::before {
      @include pfe-chevron($state: closed, $position: before);
    }

    // Adjust contents position on hover.
    &:hover {
      padding-left: calc(( #{pfe-var(container-spacer)} * 3 ) - 1px ) !important;
      --pfe-accordion--BorderLeftWidth: #{pfe-var(surface--border-width--heavy)};

      &::before {
        left: calc( #{pfe-var(container-spacer)} * 1.3125 ); // 21px.
      }
    }
  }
}

// Set the header border while animating. 
:host([pfe-disclosure="true"].animating) {
  --pfe-accordion--BorderLeftWidth: #{pfe-var(surface--border-width--heavy)};
  --pfe-accordion--BorderColor--accent: #{pfe-color(ui-base)}; // set border-left color while animating.

  button {
    padding-left: calc((var(--pfe-theme--container-spacer,16px) * 3) - 1px)!important;

    &::before {
      left: calc( #{pfe-var(container-spacer)} * 1.3125 ); // 21px.
    }
  }
}

// Override border-left color for different themes.
@each $context in $THEMES {
  :host([pfe-disclosure="true"][on="#{$context}"].animating) {
    @include pfe-accordion-variables($state: expanded, $theme: #{$context});
  }
}


