@import "shared-assets";

/// ===========================================================================
/// ACCORDION PANEL
/// Styles sourced from: @patternfly/patternfly/components/Accordion/accordion.scss
/// then updated for pfe theming variables
/// ===========================================================================

:host {
  @include pfe-hidden;

  @include pfe-collapsible(closed);
  @include pfe-box-sizing;

   width:  100%;
   z-index:  0;
 
   margin: 0;
   padding: pfe-local(Padding);
   background-color: pfe-local(BackgroundColor, transparent);
   color:            pfe-local(Color);
   
   // Force IE11 to use white to prevent content from being un-readable
   @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
   }
 
   // Border settings
   border-style: pfe-var(surface--border-style);
   border-width: pfe-local(BorderWidth);

   ::slotted(*) {
      // Ensure the box shadow does not propagate to nested accordions
      --pfe-accordion--BoxShadow: none;
   }

   // Accent bar
   &::after {
     position: absolute;
     content: "";
     top:    0;
     left:   0;
     width:  pfe-local(accent--width);
     height: 100%;
     background-color: pfe-local(accent); // defaults to transparent
     z-index: calc(#{pfe-local(ZIndex)} + 1);
   }
}
   
:host([expanded]),
:host(.animating) {
  background-color: #{pfe-local(BackgroundColor--expanded)};
  color:           #{pfe-local(Color--expanded)};
  &::after {
    background-color: #{pfe-local(accent--expanded)};
  }
}
  
@each $context in (dark, saturated) {
  $overlay: rgba(247, 247, 249, .1);

  @if $context == saturated {
    $overlay: rgba(0, 0, 0, .2);
  }
    
  // Set properties to use their active modifier
  :host([on="#{$context}"][expanded]),
  :host([on="#{$context}"].animating) {
    background-color: #{pfe-local(BackgroundColor--expanded, $overlay)};
    color: #{pfe-local(Color--expanded, pfe-broadcasted(text--on-#{$context}))};
    &::after {
      background-color: #{pfe-local(accent--expanded, pfe-var(ui-accent--on-#{$context}))};
    }
  }
}

:host([disclosure="true"]) {
  padding: pfe-local(Padding, $region: panel-container, $fallback: 0 calc(#{pfe-var(container-padding)} * 3) calc(#{pfe-var(container-padding)}) calc(#{pfe-var(container-padding)} * 1.5));
}

.pf-c-accordion__expanded-content {
  @extend %container;
  @include pfe-clearfix;
  padding: 0;

  // Allow opt-out of panel max-width via attribute or CSS variable
  :host(:not([full-width])) & {
    max-width: pfe-local(MaxWidth--content);
  }
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================
:host([expanded]) {
  @include pfe-collapsible(open);
}
:host([expanded]),
:host(.animating) {  
  box-shadow: pfe-local(BoxShadow);

  border-color: pfe-local(BorderColor);
  border-top-width: 0;

  // Remove the left border to allow the accent sit flush
  border-left-width: 0;
}

:host(:not([on="light"])) {
  box-shadow: none;
}

// @TODO: These styles should exist inside pfe-jump-links-nav rather than inside pfe-accordion
// pfe-jump-links-nav & {
//   padding: pfe-local(Padding, $region: panel-container, $fallback: 0);

//   --pfe-accordion__panel-container--Padding: 0;

//   @media (max-width: pfe-breakpoint(md, $max: true)) {
//     padding: pfe-local(Padding, $region: panel-container, $fallback: 0);
//   }
// }