@import "../../pfe-sass/pfe-sass";

$LOCAL: band;


$LOCAL-VARIABLES: (
  // Default spacing values
  Padding--vertical:    calc( #{pfe-var(container-spacer)} * 4),
  Padding--horizontal:  calc( #{pfe-var(container-spacer)} * 1),

  // Surface colors
  BackgroundColor:    pfe-var(surface--base),
  context: light,
  BackgroundPosition: center center,

  // Border settings
  Border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent,

  // Layouts, grid layouts
  layout: 1fr,
  
  header: ( layout: 1fr ),
  body:   ( layout: 1fr ),
  footer: ( layout: 1fr ),
  aside:  ( layout: 1fr ),

  // Vertical spacing
  gutter--vertical:   pfe-var(container-spacer),
  gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3),

  // Band width logic
  // Initialize at mobile breakpoint
  Width: auto,
  Width__aside--sm: 240px,
  Width__aside--lg: 300px,
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  // Bring them together for ease of use below
  Padding: pfe-local(Padding--vertical) pfe-local(Padding--horizontal)
));

:host {
  // @include pfe-set-broadcast-context(light);
  --context: #{pfe-local(context)};

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      @include pfe-print-local((Width: calc( #{pfe-breakpoint(#{$size})} - calc(#{pfe-local(Padding--horizontal)} * 4) )));
    }
  }

  // Wrapper sets padding and background visuals
  display: block;
  position: relative;

  // Custom padding on mobile
  padding: calc(#{pfe-local(Padding--vertical)} / 2)  pfe-local(Padding--horizontal);

  // Variable padding on desktop
  @media (min-width: #{pfe-breakpoint(sm)}) {
    padding: pfe-local(Padding);
  }

  // Border styles
  border: pfe-local(Border);

  // Base colors
  background-color:      pfe-local(BackgroundColor);
  background-position:   pfe-local(BackgroundPosition);
  color:                 pfe-broadcasted(text);

  // Remove background color for print
  @include pfe-no-print-background;

  @include pfe-print-media {
    // Add the border to the card for print
    border-radius: pfe-fetch(surface--border-radius);
    border: pfe-fetch(surface--border-width) pfe-fetch(surface--border-style) pfe-fetch(surface--border);
    // Reduce padding for print
    padding: (#{pfe-fetch(Padding--vertical)} / 2) pfe-fetch(Padding--horizontal);
  }

  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
    background-image: none !important;
    padding: pfe-fetch(container-spacer);
  }

  // Tag element styles
  *, *::before, *::after {
    box-sizing: border-box;
  }
}

// Use-case for transparent backgrounds
@include pfe-contexts; // imports pfe-g-context="light" etc support

// Pull in pfe-var settings for all supported surface colors
@include pfe-surfaces;

// thinner padding on top & bottom
:host([pfe-c-size="small"]) {
  @include pfe-print-local((
    Padding: calc(#{pfe-local(Padding--vertical)} / 4)  #{pfe-local(Padding--horizontal)}
  ));
}

.pfe-band {
  &__container {
    // Does not need to be wrapped in @supports because it updates variables
    @include pfe-print-local((
      region: (
        width: calc(1fr - #{pfe-local(Width__aside--sm)} - #{pfe-local(gutter--horizontal)})
      )
    ));
    grid-template-areas: "body";
    // Styles for the different combination of regions
    &[has_aside] {
      grid-template-areas:
        "body" "aside";
      @media (min-width: #{pfe-breakpoint(md)}) {
        @include pfe-print-local((layout: 1fr #{pfe-local(Width__aside--sm)}));
      }
      @media (min-width: #{pfe-breakpoint(lg)}) {
        @include pfe-print-local((layout: 1fr #{pfe-local(Width__aside--lg)}));
      }
      &[pfe-c-aside-mobile="top"] {
        grid-template-areas:
          "aside" "body";
      }
      &[pfe-c-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "aside body";
            @include pfe-print-local((layout: #{pfe-local(Width__aside--sm)} 1fr));
        }
        @media (min-width: #{pfe-breakpoint(lg)}) {
          @include pfe-print-local((layout: #{pfe-local(Width__aside--lg)} 1fr));
        }
      }
    }
    &[has_header] {
      grid-template-areas:
        "header" "body";
      &[has_aside] {
        grid-template-areas:
          "header"
          "body" "aside";
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "header header"
              "body aside";
         }
      }
      &[pfe-c-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "header"
          "body";
      }
      &[pfe-c-aside-height="full"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "header aside"
              "body aside";
          }
      }
      &[pfe-c-aside-desktop="left"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "header header"
              "aside body";
          }
          &[pfe-c-aside-height="full"] {
              @media (min-width: #{pfe-breakpoint(md)}) {
                  grid-template-areas:
                  "aside header"
                  "aside body";
              }
            }
        }
    }
    &[has_footer] {
      grid-template-areas:
        "body"
        "footer";
      &[has_aside] {
        grid-template-areas:
          "body"
          "aside"
          "footer";
          @media (min-width: #{pfe-breakpoint(md)}) {
             grid-template-areas:
                "body aside"
                "footer footer";
          }
      }
      &[pfe-c-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "body"
          "footer";
      }
      &[pfe-c-aside-height="full"] {
         @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
               "body aside"
               "footer aside" ;
         }
      }
      &[pfe-c-aside-desktop="left"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
             grid-template-areas:
             "aside body"
             "footer footer";
          }
          &[pfe-c-aside-height="full"] {
              @media (min-width: #{pfe-breakpoint(md)}) {
                 grid-template-areas:
                 "aside body"
                 "aside footer";
              }
          }
      }
    }
    &[has_header][has_footer] {
      grid-template-areas:
        "header"
        "body"
        "footer";
      &[has_aside] {
        grid-template-areas:
          "header"
          "body"
          "footer"
          "aside";
        @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
            "header header"
            "body aside"
            "footer footer";
        }
      }
      &[pfe-c-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "header"
          "body"
          "footer";
      }
      &[pfe-c-aside-height="full"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
             "header aside"
             "body aside"
             "footer aside" ;
          }
      }
      &[pfe-c-aside-desktop="left"] {
         @media (min-width: #{pfe-breakpoint(md)}) {
             grid-template-areas:
               "header header"
               "aside body"
               "footer footer";
         }
         &[pfe-c-aside-height="full"] {
            @media (min-width: #{pfe-breakpoint(md)}) {
                grid-template-areas:
                "aside header"
                "aside body"
                "aside footer";
            }
         }
      }
    }

    position:  relative;
    margin:    0 auto;
    width: 100%;
    max-width: pfe-local(Width);

    // Grid support styles
    @supports (display: grid) {
      display: grid;
      grid-row-gap: pfe-local(gutter--vertical);
      grid-column-gap: pfe-local(gutter--horizontal);
      margin-bottom: 0;
      grid-template-columns: pfe-local(layout);
      grid-template-rows:    max-content;
    }
}

  // For each section in the band layout
  @each $section in (header, body, aside, footer) {
    &__#{$section} { // i.e., pfe-band__header
      margin-bottom: pfe-local(gutter--vertical);
      // Apply the standard grid
      @supports (display: grid) {
          display: grid;
          grid-row-gap: pfe-local(gutter--vertical);
          grid-column-gap: pfe-local(gutter--horizontal);
          margin-bottom: 0;
          // Apply the section as a named grid-area
          grid-area: #{$section};
          // Allow users to hook into the layout with custom columns
          grid-template-columns: pfe-local(layout, $region: $section);
      }
    }
  }

  &__aside {
    align-self: flex-start;
  }

  @include browser-query(ie11) {
    &__body {
        width: 60%;
        float: left;
    }
    &__aside {
      float: left;
      width: 35%;
      margin: 0 2.5%;
    }
    &__footer {
       clear: both;
    }
     &__container::after {
       content: " ";
       display: block;
       clear: both;
     }
  }
}
