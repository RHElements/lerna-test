@import "../../pfe-sass/pfe-sass";

$LOCAL: band;


$LOCAL-VARIABLES: (
  // Default spacing values
  Padding--vertical:    calc( #{pfe-var(container-spacer)} * 4),
  Padding--horizontal:  calc( #{pfe-var(container-spacer)} * 1),

  // Surface colors
  BackgroundColor:    pfe-var(surface--base),
  context: light,
  BackgroundPosition: center center,

  // Border settings
  Border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent,

  // Layouts, grid layouts
  layout: 1fr,
  
  header: (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  body:   (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  footer: (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),
  aside:  (
    layout: 1fr,
    gutter--vertical:   pfe-var(container-spacer),
    gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3)
  ),

  // Vertical spacing
  gutter--vertical:   pfe-var(container-spacer),
  gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3),

  // Band width logic
  // Initialize at mobile breakpoint
  Width: auto,
  Width__aside--sm: 240px,
  Width__aside--lg: 300px,
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  // Bring them together for ease of use below
  Padding: pfe-local(Padding--vertical) pfe-local(Padding--horizontal)
));

:host {
  // @include pfe-set-broadcast-context(light);
  --context: #{pfe-local(context)};

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      --pfe-band--Width: calc( #{pfe-breakpoint(#{$size})} - (#{pfe-local(Padding--horizontal)} * 4) );
    }
  }

  // Wrapper sets padding and background visuals
  display: block;
  position: relative;

  // Custom padding on mobile
  padding: calc(#{pfe-local(Padding--vertical)} / 2)  pfe-local(Padding--horizontal);

  // Variable padding on desktop
  @media (min-width: pfe-breakpoint(sm)) {
    padding: pfe-local(Padding);
  }

  // Border styles
  border: pfe-local(Border);

  // Base colors
  background-color:      pfe-local(BackgroundColor);
  background-position:   pfe-local(BackgroundPosition);
  color:                 pfe-broadcasted(text);

  // Apply box-sizing styles
  @include pfe-box-sizing;

  // Remove background color for print
  @include pfe-no-print-background;

  @include pfe-print-media {
    // Add the border to the card for print
    border-radius: pfe-fetch(surface--border-radius);
    border: pfe-fetch(surface--border-width) pfe-fetch(surface--border-style) pfe-fetch(surface--border);
    // Reduce padding for print
    padding: (#{pfe-fetch(Padding--vertical)} / 2) pfe-fetch(Padding--horizontal);
  }

  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
    background-image: none !important;
    padding: pfe-fetch(container-spacer);
  }
}

// Use-case for transparent backgrounds
@include pfe-contexts; // imports on="light" etc support

// Pull in pfe-var settings for all supported surface colors
@include pfe-surfaces;

// thinner padding on top & bottom
:host([size="small"]) {
  --pfe-band--Padding: calc(#{pfe-local(Padding--vertical)} / 4) #{pfe-local(Padding--horizontal)};
}


.pfe-band__container {
  @include pfe-clearfix;

  @supports (display: grid) {
    display: grid;
    
    // Styles for the different combination of regions
    //-- Grid template area styles --//
    grid-template-areas: "body";

    :host([has_header]) & {
      grid-template-areas:
        "header"
        "body";
    }

    :host([has_aside]) & {
      grid-template-areas:
        "body"
        "aside";
    }

    :host([has_footer]) & {
      grid-template-areas:
        "body"
        "footer";
    }

    :host([has_header][has_aside]) & {
      grid-template-areas:
        "header"
        "body"
        "aside";
    }

    :host([has_header][has_footer]) & {
      grid-template-areas:
        "header"
        "body"
        "footer";
    }

    :host([has_footer][has_aside]) & {
      grid-template-areas:
        "body"
        "aside"
        "footer";
    }

    :host([has_header][has_aside][has_footer]) & {
      grid-template-areas:
        "header"
        "body"
        "footer"
        "aside";
    }

    // Mobile-specific attribute
    @media (max-width: pfe-breakpoint(md, $max: true)) {
      :host([has_aside][aside-mobile="top"]) & {
        grid-template-areas:
          "aside"
          "body";
      }

      :host([has_header][has_aside][aside-mobile="top"]) & {
        grid-template-areas:
          "aside"
          "header"
          "body";
      }

      :host([has_footer][has_aside][aside-mobile="top"]) & {
        grid-template-areas:
          "aside"
          "body"
          "footer";
      }
      
      :host([has_header][has_footer][has_aside][aside-mobile="top"]) & {
        grid-template-areas:
          "aside"
          "header"
          "body"
          "footer";
      }
    }

    // Desktop-specific styles
    @media (min-width: pfe-breakpoint(md)) {
      :host([has_aside]) & {
        grid-template-areas: "body aside";
      }

      :host([has_header][has_aside]) & {
        grid-template-areas:
          "header header"
          "body aside";
      }

      :host([has_footer][has_aside]) & {
        grid-template-areas:
          "body aside"
          "footer footer";
      }

      :host([has_header][has_footer][has_aside]) & {
        grid-template-areas:
          "header header"
          "body aside"
          "footer footer";
      }

      :host([has_aside][aside-desktop="left"]) & {
        grid-template-areas: "aside body";
      }

      :host([has_header][has_aside][aside-desktop="left"]) & {
        grid-template-areas:
          "header header"
          "aside body";
      }

      :host([has_footer][has_aside][aside-desktop="left"]) & {
        grid-template-areas:
          "aside body"
          "footer footer";
      }
      :host([has_header][has_footer][has_aside][aside-desktop="left"]) & {
        grid-template-areas:
          "header header"
          "aside body"
          "footer footer";
      }
      
      :host([has_header][has_footer][has_aside][aside-desktop="left"]) & {
        grid-template-areas:
          "header header"
          "aside body"
          "footer footer";
      }

      :host([has_header][has_aside][aside-height="full"]) & {
        grid-template-areas:
          "header aside"
          "body aside";
      }

      :host([has_footer][has_aside][aside-height="full"]) & {
        grid-template-areas:
          "body aside"
          "footer aside" ;
      }
      
      :host([has_header][has_footer][has_aside][aside-height="full"]) & {
        grid-template-areas:
          "header aside"
          "body aside"
          "footer aside" ;
      }

      :host([has_header][has_aside][aside-height="full"][aside-desktop="left"]) & {
        grid-template-areas:
          "aside header"
          "aside body";
      }

      :host([has_footer][has_aside][aside-desktop="left"][aside-height="full"]) & {
        grid-template-areas:
          "aside body"
          "aside footer";
      }

      :host([has_header][has_footer][has_aside][aside-desktop="left"][aside-height="full"]) & {
        grid-template-areas:
          "aside header"
          "aside body"
          "aside footer";
      }
    }
    //-- END grid template area styles --//

    @media (min-width: pfe-breakpoint(md)) {
      grid-template-rows: auto;
      grid-template-columns: 1fr;

      row-gap: pfe-local(gutter--vertical);
      column-gap: pfe-local(gutter--horizontal);

      :host([has_aside]) & {
        grid-template-rows: auto;
        grid-template-columns: 1fr pfe-local(Width__aside--sm);
      }

      :host([has_aside][aside-desktop="left"]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(Width__aside--sm) 1fr;
      }
    }

    @media (min-width: pfe-breakpoint(lg)) {    
      :host([has_aside]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(layout, $fallback: 1fr pfe-local(Width__aside--lg));
      }
      :host([has_aside][aside-desktop="left"]) & {
        grid-template-rows: auto;
        grid-template-columns: pfe-local(layout, $fallback: pfe-local(Width__aside--lg) 1fr);
      }
    }
  }
}


// For each section in the band layout
@each $section in (header, body, aside, footer) {
  .pfe-band__#{$section} { // i.e., .pfe-band__header
    &:not(:last-child) {
      margin-bottom: pfe-local(gutter--vertical);
    }

    // Apply the grid layout
    @supports (display: grid) {
      // Apply the section as a named grid-area
      grid-area: $section;

      display: grid;
      grid-template-rows: auto;
      grid-template-columns: pfe-local(layout, $region: #{$section});

      row-gap: pfe-local(gutter--vertical, $region: #{$section});
      column-gap: pfe-local(gutter--horizontal, $region: #{$section});
    }
  }
}

.pfe-band__aside {
  align-self: flex-start;
}

@include browser-query(ie11) {
  .pfe-band__body {
    width: 60%;
    float: left;
  }
  .pfe-band__aside {
    float: left;
    width: 35%;
    margin: 0 2.5%;
  }
  .pfe-band__footer {
    clear: both;
  }
}
