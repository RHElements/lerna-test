@import "../../pfe-sass/pfe-sass";

$LOCAL: band;


$variables: (

  // Default spacing values
  Padding--vertical:    calc( #{pfe-var(container-spacer)} * 4),
  Padding--horizontal:  #{pfe-var(container-spacer)},

  // Bring them together for ease of use below
  Padding: #{pfe-local(Padding--vertical)}  #{pfe-local(Padding--horizontal)},

  // Surface colors
  BackgroundColor:    #{pfe-color(surface--base)},
  BackgroundPosition: center center,

  // Border settings
  Border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent,

  // Layouts, grid layouts
  layout: 1fr,
  
  header: ( layout: 1fr ),
  body:   ( layout: 1fr ),
  footer: ( layout: 1fr ),
  aside:  ( layout: 1fr ),

  // Vertical spacing
  gutter--vertical:   #{pfe-var(container-spacer)},
  gutter--horizontal: calc(#{pfe-var(container-spacer)} * 3),

  // Band width logic
  // Initialize at mobile breakpoint
  Width: auto,
  Width__aside--sm: 240px,
  Width__aside--lg: 300px,

);

:host {
  @include pfe-print-variables($variables);
  @include pfe-set-broadcast-theme(light);
  --theme: light;

  // Default gutter if a grid-layout is not required
  --pfe-band__body--gutter--vertical:   0;
  --pfe-band__body--gutter--horizontal: 0;

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @at-root #{&}([pfe-grid-layout="true"]) {
      @media screen and (min-width: pfe-breakpoint(#{$size})) {
        --pfe-band__body--gutter--vertical:   #{ pfe-var(grid-gutter--#{$size} ) };
        --pfe-band__body--gutter--horizontal: #{ pfe-var(grid-gutter--#{$size} ) };
      }
    }

    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      --pfe-band--Width: calc( #{pfe-breakpoint(#{$size})} - calc(#{pfe-local(Padding--horizontal)} * 4) );
    }
  }

  // Wrapper sets padding and background visuals
  display: block;
  position: relative;

  // Custom padding on mobile
  padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};

  // Variable padding on desktop
  @media (min-width: #{pfe-breakpoint(sm)}) {
    padding: #{pfe-local(Padding)};
  }

  // Border styles
  border: #{pfe-local(Border)};

  // Base colors
  background-color:      #{pfe-local(BackgroundColor)};
  background-position:   #{pfe-local(BackgroundPosition)};
  color:                 #{pfe-apply-broadcast(text)};

  // Default typography
  font-family: pfe-var(font-family);
  font-size:   pfe-var(font-size);
  font-weight: pfe-var(font-size);
  line-height: pfe-var(line-height);

  // Remove background color for print
  @include pfe-no-print-background;

  @include pfe-print-media {
    // Add the border to the card for print
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
    // Reduce padding for print
    padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};
  }

  @include browser-query(ie11) {
    background-color: #{pfe-color(surface--lightest)} !important;
    color: #{pfe-color(text)} !important;
    background-image: none !important;
    padding: calc(#{pfe-var(container-spacer)});
  }

  // Tag element styles
  *, *::before, *::after {
    box-sizing: border-box;
  }
}

@include pfe-slotted-typography();

::slotted(*:last-child) {
  margin-bottom: 0;
}

// Use-case for transparent backgrounds
@include pfe-theme-contexts; // imports on="light" etc support

// Pull in pfe-color settings for all supported surface colors
@include pfe-surfaces;

// thinner padding on top & bottom
:host([pfe-size="small"]) {
  --pfe-band--Padding: calc(#{pfe-local(Padding--vertical)} / 4)  #{pfe-local(Padding--horizontal)};
}

.pfe-band {
  &__container {
    position:  relative;
    margin:    0 auto;
    width: 100%;
    max-width: #{pfe-local(Width)};

    // Grid support styles
    @supports (display: grid) {
      display: grid;
      grid-template-areas:
        "body";
      grid-row-gap: #{pfe-local(gutter--vertical)};
      grid-column-gap: #{pfe-local(gutter--horizontal)};
      margin-bottom: 0;
      grid-template-columns: #{pfe-local(layout)};
      grid-template-rows:    max-content;
    }
 
    // Styles for the different combination of regions
    &[pfe-has-aside] {
      grid-template-areas:
        "body" "aside";
      @media (min-width: #{pfe-breakpoint(md)}) {
        --pfe-band--layout: 1fr #{pfe-local(Width__aside--sm)};
      }
      @media (min-width: #{pfe-breakpoint(lg)}) {
        --pfe-band--layout: 1fr #{pfe-local(Width__aside--lg)};
      }
      &[pfe-aside-mobile="top"] {
        grid-template-areas:
          "aside" "body";
      }
      &[pfe-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "aside body";
          --pfe-band--layout: #{pfe-local(Width__aside--sm)} 1fr;
        }
        @media (min-width: #{pfe-breakpoint(lg)}) {
          --pfe-band--layout: #{pfe-local(Width__aside--lg)} 1fr;
        }
      }
    }
    &[pfe-has-header] {
      grid-template-areas:
        "header" "body";
      &[pfe-has-aside] {
        grid-template-areas:
          "header"
          "body" "aside";
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "header header"
              "body aside";
         }
      }
      &[pfe-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "header"
          "body";
      }
      &[pfe-aside-height="full"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "header aside"
            "body aside";
        }
      }
      &[pfe-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "header header"
            "aside body";
        }
        &[pfe-aside-height="full"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "aside header"
              "aside body";
          }
        }
      }
    }
    &[pfe-has-footer] {
      grid-template-areas:
        "body"
        "footer";
      &[pfe-has-aside] {
        grid-template-areas:
          "body"
          "aside"
          "footer";
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "body aside"
            "footer footer";
        }
      }
      &[pfe-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "body"
          "footer";
      }
      &[pfe-aside-height="full"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "body aside"
            "footer aside" ;
        }
      }
      &[pfe-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "aside body"
            "footer footer";
        }
        &[pfe-aside-height="full"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "aside body"
              "aside footer";
          }
        }
      }
    }
    &[pfe-has-header][pfe-has-footer] {
      grid-template-areas:
        "header"
        "body"
        "footer";
      &[pfe-has-aside] {
        grid-template-areas:
          "header"
          "body"
          "footer"
          "aside";
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "header header"
            "body aside"
            "footer footer";
        }
      }
      &[pfe-aside-mobile="top"] {
        grid-template-areas:
          "aside"
          "header"
          "body"
          "footer";
      }
      &[pfe-aside-height="full"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "header aside"
            "body aside"
            "footer aside" ;
        }
      }
      &[pfe-aside-desktop="left"] {
        @media (min-width: #{pfe-breakpoint(md)}) {
          grid-template-areas:
            "header header"
            "aside body"
            "footer footer";
        }
        &[pfe-aside-height="full"] {
          @media (min-width: #{pfe-breakpoint(md)}) {
            grid-template-areas:
              "aside header"
              "aside body"
              "aside footer";
          }
        }
      }
    }
  }
  

  // For each section in the band layout
  @each $section in (header, body, aside, footer) {
    &__#{$section} { // i.e., pfe-band__header
      margin-bottom: #{pfe-local(gutter--vertical)};

      // Apply the standard grid
      @supports (display: grid) {
        // Apply the section as a named grid-area
        grid-area: #{$section};

        // Nested grid settings
        display: grid;
        // Allow users to hook into the layout with custom columns
        grid-template-columns: var(--pfe-band__#{$section}--layout);
        grid-row-gap: #{pfe-local($cssvar: gutter--vertical, $region: $section, $fallback: #{map-get($pfe-vars, grid-gutter--sm)})};
        grid-column-gap: #{pfe-local($cssvar: gutter--horizontal, $region: $section)};

        margin-bottom: 0;
      }
    }
  }

  &__aside {
    align-self: stretch;
  }

  @include browser-query(ie11) {
    &__body {
      width: 60%;
      float: left;
    }
    &__aside {
      float: left;
      width: 35%;
      margin: 0 2.5%;
    }
    &__footer {
      clear: both;
    }
    &__container::after {
      content: " ";
      display: block;
      clear: both;
    }
  }
}
