@import "../../pfe-sass/pfe-sass";

$LOCAL: cta;

/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

$pfe-cta__arrow-size:                        0.313em;

/// ===========================================================================
/// DEFAULT CTA
/// ===========================================================================
:host {
  // Property variables
  --pfe-cta--Padding:      0;
  --pfe-cta--BorderRadius: 0;

  --pfe-cta__arrow--Display:  inline-block;

  // Color settings
  --pfe-cta--main: #{pfe-color(ui-link)};
  --pfe-cta--aux:  transparent;

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-link--#{$state})};
    --pfe-cta--aux--#{$state}:  transparent;
  }

  --pfe-cta--BorderColor:     transparent;
  --pfe-cta--BackgroundColor: transparent;
  --pfe-cta--Color:           #{pfe-local(main)};

  // Update the broadcasted variables, map to main color
  --pfe-broadcasted--color--ui-link: #{pfe-local(Color)};

  display: inline-block;
  font-family: #{pfe-var(font-family)};
  font-size:   #{pfe-var(font-size)};
  font-weight: #{pfe-var(font-weight--bold)};
  line-height: #{pfe-var(line-height)};

  // Style the slotted link element
  ::slotted(a) {
    transition: all #{pfe-var(animation-timing)};

    display:      flex;
    flex-flow:    row nowrap;
    align-items:  center;
    justify-content: center;

    line-height: inherit;
    text-decoration: none;
    vertical-align:  middle;

    color:            #{pfe-local(Color)};
    background-color: #{pfe-local(BackgroundColor)};

    padding:       #{pfe-local(Padding)};
    border-radius: #{pfe-local(BorderRadius)};
    border:        #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};
    // border-color:  #{pfe-local(BorderColor)};

    &::after {
      margin-left: calc(#{pfe-var(content-spacer)} * 0.25); // 1/4 of the base `content-spacer`

      // Bring in the styles for the CSS arrow
      @include pfe-arrow(
        $type: right,
        $color: #{pfe-local(Color)},
        $width: $pfe-cta__arrow-size,
        $height: $pfe-cta__arrow-size,
        $pseudo: true
      );

      display:     #{pfe-local($cssvar: Display, $region: arrow)};
    }
  }

  // Loop through states and apply update to color
  @each $state in (hover, focus) {
    ::slotted(a:#{$state}) {
      --pfe-cta--Color: #{pfe-local(main--#{$state})};
      --pfe-broadcasted--color--ui-link--#{$state}: #{pfe-local(main--#{$state})};
    }
  }
}


/// ===========================================================================
/// Styles for "Button" CTAs
/// ===========================================================================
:host([priority="primary"],[priority="secondary"]) {
  // Button padding and border radius settings
  --pfe-cta--Padding:      calc(#{pfe-var(container-padding)} * 0.5) calc(#{pfe-var(container-padding)} * 2);
  --pfe-cta--BorderRadius: #{pfe-var(ui--border-radius)};
  // Arrow styles
  --pfe-cta__arrow--Display:  none;

  // Loop through states and apply update to color
  @each $state in (hover, focus) {
    ::slotted(a:#{$state}) {
      --pfe-cta--BorderColor:     #{pfe-local(main--#{$state})};
      --pfe-cta--BackgroundColor: #{pfe-local(main--#{$state})};
      --pfe-cta--Color:           #{pfe-local(aux--#{$state})};
      --pfe-broadcasted--color--ui-link--#{$state}: #{pfe-local(aux--#{$state})};
    }
  }
}

:host([priority="primary"]) {
  --pfe-cta--main:          #{pfe-color(ui-accent)};
  --pfe-cta--aux:           #{pfe-color(ui-accent--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}:  #{pfe-color(ui-accent--#{$state})};
    --pfe-cta--aux--#{$state}:   #{pfe-color(ui-accent--text--#{$state})};
  }

  --pfe-cta--BorderColor:     #{pfe-local(main)};
  --pfe-cta--BackgroundColor: #{pfe-local(main)};
  --pfe-cta--Color:           #{pfe-local(aux)};
}

:host([priority="secondary"]) {
  --pfe-cta--main:          #{pfe-color(ui-base)};
  --pfe-cta--aux:           transparent;

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}:  #{pfe-color(ui-base--#{$state})};
    --pfe-cta--aux--#{$state}:   #{pfe-color(ui-base--text--#{$state})};
  }

  --pfe-cta--BorderColor:     #{pfe-local(main)};
  --pfe-cta--BackgroundColor: #{pfe-local(aux)};
  --pfe-cta--Color:           #{pfe-local(main)};
}


/// ===========================================================================
/// ON DARK
/// ===========================================================================
:host([on="dark"]) {
  --pfe-cta--main:        #{pfe-color(text--on-dark)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-link--on-dark--#{$state})};
  }
}

:host([on="dark"][priority="primary"]) {
  --pfe-cta--main:        #{pfe-color(ui-accent--text)};
  --pfe-cta--aux:         #{pfe-color(ui-accent)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-accent)};
    --pfe-cta--aux--#{$state}:  #{pfe-color(ui-accent--text)};
  }
}

:host([on="dark"][priority="secondary"]) {
  --pfe-cta--main:        #{pfe-color(ui-base--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-base)};
  }
}


/// ===========================================================================
/// COLOR OVERRIDE: BASE
/// ===========================================================================

:host([color="base"]),
:host([color="base"][on="dark"]) {
  --pfe-cta--main:        #{pfe-color(ui-base)};
  --pfe-cta--aux:         #{pfe-color(ui-base--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-base--#{$state})};
    --pfe-cta--aux--#{$state}:  #{pfe-color(ui-base--text--#{$state})};
  }
}

:host([color="base"][priority="secondary"]),
:host([color="base"][priority="secondary"][on="dark"]) {
  --pfe-cta--aux: transparent;
}


/// ===========================================================================
/// COLOR OVERRIDE: COMPLEMENT
/// ===========================================================================

:host([color="complement"]),
:host([color="complement"][on="dark"]) {
  --pfe-cta--main:        #{pfe-color(ui-complement)};
  --pfe-cta--aux:         #{pfe-color(ui-complement--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-complement--#{$state})};
    --pfe-cta--aux--#{$state}:  #{pfe-color(ui-complement--text--#{$state})};
  }
}

:host([color="complement"][priority="secondary"]),
:host([color="complement"][priority="secondary"][on="dark"]) {
  --pfe-cta--aux: transparent;
}


/// ===========================================================================
/// COLOR OVERRIDE: ACCENT
/// ===========================================================================
:host([color="accent"]),
:host([color="accent"][on="dark"]) {
  --pfe-cta--main:        #{pfe-color(ui-accent)};
  --pfe-cta--aux:         #{pfe-color(ui-accent--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-accent--#{$state})};
    --pfe-cta--aux--#{$state}:  #{pfe-color(ui-accent--text--#{$state})};
  }
}

:host([color="accent"][priority="secondary"]),
:host([color="accent"][priority="secondary"][on="dark"]) {
  --pfe-cta--aux: transparent;
}
