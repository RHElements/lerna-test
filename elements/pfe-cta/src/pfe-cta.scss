@import "../../pfe-sass/pfe-sass";

$USE-FALLBACK: true;
$LOCAL: cta;

$pfe-cta__arrow-size: 0.313em;
$pfe-cta--BackgroundColor--focus: rgba(40,151,240, .2);
$pfe-cta--Color--fallback: #003366;

:host {
  --pfe-cta--main:        #{pfe-radio(color, ui-link)};
  --pfe-cta--main--hover: #{pfe-radio(color, ui-link, hover)};
  --pfe-cta--main--focus: #{pfe-radio(color, ui-link, focus)};

  --pfe-cta--Padding:      .6rem 0;
  --pfe-cta--BorderRadius: 0;

  --pfe-cta__arrow--Display:     inline;
  --pfe-cta__arrow--Padding:     0 2px 0 6px;
  --pfe-cta__arrow--MarginLeft:  calc(#{pfe-var(content-spacer)} * 0.25);
  
  --pfe-cta--BackgroundColor:         transparent;
  --pfe-cta--BackgroundColor--hover:  transparent;
  --pfe-cta--BackgroundColor--focus:  #{$pfe-cta--BackgroundColor--focus};

  --pfe-cta--BorderColor:           transparent;
  --pfe-cta--BorderColor--hover:    transparent;
  --pfe-cta--BorderColor--focus:    transparent;

  --pfe-cta__inner--BorderColor--focus: transparent;

  --pfe-cta--Color:          #{pfe-local(main)};
  --pfe-cta--Color--hover:   #{pfe-local(main--hover)};
  --pfe-cta--Color--focus:   #{pfe-local(main--focus)};

  --pfe-cta--TextDecoration:          none;
  --pfe-cta--TextDecoration--hover:   none;
  --pfe-cta--TextDecoration--focus:   none;

  --pfe-cta--FontWeight:              #{pfe-var(font-weight--bold)};

  // properties
  display:         inline-block;
  position:        relative;
  vertical-align:  middle;
  max-width:       #{pfe-local($cssvar: MaxWidth, $fallback: max-content)};

  background-color: #{pfe-local(BackgroundColor)};
  color:            #{pfe-local(Color)};
  border-color:     #{pfe-local(BorderColor)};

  border-radius:    #{pfe-local(BorderRadius)};
  border:           #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};
  padding:          #{pfe-local($cssvar: Padding)};

  transition:       all #{pfe-var(animation-speed)} #{pfe-var(animation-timing)};

  .pfe-cta {
    &--wrapper {
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
      justify-content: center;

      &::after {
        margin-left: #{pfe-local($cssvar: MarginLeft, $region: arrow)};
      }
    
      &::before {  // inner border on priority CTAs
        content: "";
  
        display:    block;
        box-sizing: border-box;
        position:   absolute;
        top:    2px;
        left:   2px;
        bottom: 2px;
        right:  2px;
  
        border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-local($cssvar: BorderColor, $region: inner, $fallback: transparent)};
        border-radius: calc(#{pfe-var(surface--border-radius)} - 1px);
      }
    }
    // Only visible on default link style
    &--arrow {
      display: #{pfe-local($cssvar: arrow--Display, $region: arrow)};
      padding: #{pfe-local($cssvar: Padding, $region: arrow)};
      fill:    #{pfe-local(Color)};
      position: relative;
      top:    .1rem;
      width:  13px;
      height: 13px;
    }
  }

  ::slotted(button),
  ::slotted(input) {
    @include pfe-reset-button;
  }

  ::slotted(*) {
    display: inline;
    outline: none !important;

    color:           #{pfe-local(Color, $pfe-cta--Color--fallback)} !important;
    font-family:     #{pfe-local($cssvar: FontFamily, $fallback: #{pfe-var(font-family--heading)})};
    font-size:       #{pfe-local($cssvar: FontSize, $fallback: #{pfe-var(font-size)})};
    font-weight:     #{pfe-local(FontWeight)};
    line-height:     #{pfe-local($cssvar: LineHeight, $fallback: #{pfe-var(line-height)})};
    text-decoration: #{pfe-local(TextDecoration)} !important;
  }
}

:host(:hover) {
  --pfe-cta__arrow--Padding: 0 8px 0 0;
  background-color: #{pfe-local(BackgroundColor--hover)};
  border-color:     #{pfe-local(BorderColor--hover)};

  ::slotted(*) {
    color:              #{pfe-local(Color--hover)} !important;
    text-decoration:    #{pfe-local(TextDecoration--hover)} !important;
  }

  .pfe-cta--arrow {
    fill: #{pfe-local(Color--hover)};
  }
}

:host(:focus),
:host(.focus-within) {
  background-color: #{pfe-local(BackgroundColor--focus)};
  border-color:     #{pfe-local(BorderColor--focus)};

  ::slotted(*) {
    color:           #{pfe-local(Color--focus)} !important;
    text-decoration: #{pfe-local(TextDecoration--focus)} !important;
  }

  // Inner border only for the focus state
  .pfe-cta {
    &--wrapper::before {
      border-color:  #{pfe-local($cssvar: BorderColor--focus, $region: inner)};
    }
    &--arrow {
      fill: #{pfe-local(Color--focus)};
    }
  }
}

:host(:not(:disabled)) {
  cursor: pointer;
}

/// ===========================================================================
/// BELOW THIS POINT, LOCAL VARIABLE OVERRIDES ONLY

// Broadcast colors: The CTA is tuning into whatever colors the containers are offering up, per priority level

// - The location of these styles in the doc is important for clarity (readable code FTW!)
// - pfe-priority="primary" sets its own background colors, so it ignores broadcast
// - if there is no broadcast variable available, these are still seen by the browser, so we also set fallbacks here!
// - Fallback values should match whats above


/// ===========================================================================
/// PRIMARY CTAs
/// ===========================================================================
:host([pfe-priority="primary"]) {
  --pfe-cta--main:        #{pfe-color(ui-accent)};
  --pfe-cta--main--hover: #{pfe-color(ui-accent--hover)};

  --pfe-cta--aux: #{pfe-color(ui-accent--text)};

  --pfe-cta__arrow--Display: none;

  --pfe-cta--BackgroundColor:        #{pfe-local(main)};
  --pfe-cta--BackgroundColor--hover: #{pfe-local(main--hover)};
  --pfe-cta--BackgroundColor--focus: #{pfe-local(main)};
  
  --pfe-cta--Padding:      #{pfe-var(container-padding)} calc(#{pfe-var(container-padding)} * 2);
  --pfe-cta--BorderRadius: #{pfe-var(ui--border-radius)};

  --pfe-cta--BorderColor:        #{pfe-local(main)};
  --pfe-cta--BorderColor--hover: #{pfe-local(main--hover)};
  --pfe-cta--BorderColor--focus: #{pfe-local(main)};

  --pfe-cta__inner--BorderColor--focus: #{pfe-local(aux)};

  --pfe-cta--Color:        #{pfe-local(aux)};
  --pfe-cta--Color--hover: #{pfe-local(aux)};
  --pfe-cta--Color--focus: #{pfe-local(aux)};
}

/// ===========================================================================
/// SECONDARY CTAs
/// ===========================================================================
:host([pfe-priority="secondary"]) {
  --pfe-cta--main: #{pfe-radio(ui-complement)};
  --pfe-cta--aux:  #{pfe-color(ui-complement--text)};
  
  --pfe-cta__arrow--Display: none;

  --pfe-cta--BackgroundColor:         transparent;
  --pfe-cta--BackgroundColor--hover:  #{pfe-local(main)};
  --pfe-cta--BackgroundColor--focus:  #{pfe-color(surface--lighter)};

  --pfe-cta--Padding:      #{pfe-var(container-padding)} calc(#{pfe-var(container-padding)} * 2);
  --pfe-cta--BorderRadius: #{pfe-var(ui--border-radius)};

  --pfe-cta--BorderColor:         #{pfe-local(main)};
  --pfe-cta--BorderColor--hover:  #{pfe-local(main)};
  --pfe-cta--BorderColor--focus:  #{pfe-local(main)};

  --pfe-cta__inner--BorderColor--focus: #{pfe-local(main)};

  --pfe-cta--Color:        #{pfe-local(main)};
  --pfe-cta--Color--hover: #{pfe-local(aux)};
  --pfe-cta--Color--focus: #{pfe-local(main)}
}

/// ===========================================================================
// COLOR ATTRIBUTE OVERRIDES
//
// Set values of local vars because more
// colors are needed than whats available in broadcast
/// ===========================================================================

@each $color in (base, accent, complement) {
  :host([pfe-color="#{$color}"]) {
    --pfe-cta--main:        #{pfe-color(ui-#{$color})};
    --pfe-cta--main--hover: #{pfe-color(ui-#{$color}--hover)};
    --pfe-cta--main--focus: #{pfe-color(ui-#{$color})};

    --pfe-cta--aux: #{pfe-color(ui-#{$color}--text)};
  }
}

:host([pfe-color="lightest"]) {
  --pfe-cta--main:        #{pfe-color(surface--lightest)};
  --pfe-cta--main--hover: #{pfe-color(surface--lighter)};
  --pfe-cta--main--focus: #{pfe-color(surface--lightest)};

  --pfe-cta--aux: #{pfe-color(surface--lightest--text)};
}

/// ===========================================================================
/// WIND CTA VARIANTS
/// ===========================================================================

:host([pfe-priority="secondary"][pfe-variant="wind"]) {
  --pfe-cta--MaxWidth:                  auto;
  --pfe-cta--BackgroundColor:           transparent;
  --pfe-cta--BackgroundColor--hover:    #{pfe-color(surface--border--lightest)};

  --pfe-cta--BorderColor:               #{pfe-color(surface--border)};
  --pfe-cta--BorderColor--hover:        #{pfe-color(surface--border)};
  --pfe-cta--BorderColor--focus:        #{pfe-color(surface--border)};

  --pfe-cta--Color:         #{pfe-radio(color, ui-link)};
  --pfe-cta--Color--hover:  #{pfe-radio(color, ui-link, hover)};
  --pfe-cta--Color--focus:  #{pfe-radio(color, ui-link, hover)};

  --pfe-cta--FontWeight:                #{pfe-var(font-weight--normal)};
  --pfe-cta--TextDecoration--hover:     #{pfe-var(link--text-decoration--hover)};

  --pfe-cta__inner--BorderColor--focus:  #{pfe-local(BorderColor--focus)};
}