@import "../../pfe-sass/pfe-sass";
@import "../node_modules/rh-iconfont/dist/files/web-iconfont.scss";
@import "../node_modules/rh-iconfont/dist/files/rh-iconfont.scss";

@mixin pfe-cta-focus($border-color) {
  &::before {
    content: "";
    border: 1px solid $border-color;
    outline: none;
    left: 2px;
    top: 2px;
    right: 2px;
    bottom: 2px;
    display: block;
    box-sizing: border-box;
    position: absolute;
    border-radius: 2px;
  }
}

$LOCAL: cta;
$pfe-cta__arrow-size:                        0.313em;

:host {
  // Property variables
  --pfe-cta--Padding:      0;
  --pfe-cta--BorderRadius: 0;

  --pfe-cta__arrow--Display:  inline-block;

  // Color settings
  --pfe-cta--main: #{pfe-color(ui-link)};
  --pfe-cta--aux:  transparent;

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-link--#{$state})};
    --pfe-cta--aux--#{$state}:  transparent;
  }

  --pfe-cta--BorderColor:     transparent;
  --pfe-cta--BackgroundColor: transparent;
  --pfe-cta--Color:           #{pfe-local(main)};

  // Update the broadcasted variables, map to main color
  --pfe-broadcasted--color--ui-link: #{pfe-local(Color)};

  display: inline-block;
  font-family: #{pfe-var(font-family)};
  font-size:   #{pfe-var(font-size)};
  font-weight: #{pfe-var(font-weight--bold)};
  line-height: #{pfe-var(line-height)};
}

// Style the slotted link element
::slotted(a) {
  position: relative;
  transition: all #{pfe-var(animation-timing)};

  display:      flex;
  flex-flow:    row nowrap;
  align-items:  center;
  justify-content: center;

  line-height: inherit;
  text-decoration: none;
  vertical-align:  middle;

  color:            #{pfe-local(Color)};
  background-color: #{pfe-local(BackgroundColor)};

  padding:       #{pfe-local(Padding)};
  border-radius: #{pfe-local(BorderRadius)};
  border:        #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};

  // @include get-web-icon(web-icon-caret-left) {
  //   color: green;
  // }

  &::after {
    margin-left: calc(#{pfe-var(content-spacer)} * 0.25); // 1/4 of the base `content-spacer`

    // Bring in  thestyles for the CSS ar    
    // @include pfe-arrow(
    //   $type: right,
    //   $color: #{pfe-local(Color)},
    //   $width: $pfe-cta__arrow-size,
    //   $height: $pfe-cta__arrow-size,
    //   $pseudo: true
    // );row
    


    // This overrides a display style from the pfe-arrow mixin
    // display:     #{pfe-local($cssvar: Display, $region: arrow)};
    // content: "\f101";
  }
}

:host(:not([priority])) {

  ::slotted(a) {
    @include get-web-icon( arrow-right, $position: after ) {
        position: relative;
        margin-right: 2px;
        margin-left: 6px;
        transition: .3s ease all;
    }
  }
  ::slotted(a:focus) {
    // background-color: rgba(#{pfe-color(ui-link)}, 0.1);
    background-color: rgba(0, 102, 204, .1);
  }
}

// Loop through states and apply update to color
@each $state in (hover, focus) {
  ::slotted(a:#{$state}) {
    --pfe-cta--Color: #{pfe-local(main--#{$state})};
    --pfe-broadcasted--color--ui-link--#{$state}: #{pfe-local(main--#{$state})};
  }
}

/// ===========================================================================
/// Styles for "Button" CTAs
/// ===========================================================================
:host([priority="primary"],[priority="secondary"]),
:host([pfe-priority="primary"],[pfe-priority="secondary"]) {
  // Button padding and border radius settings
  --pfe-cta--Padding:      #{pfe-var(container-padding)} calc(#{pfe-var(container-padding)} * 2);
  --pfe-cta--BorderRadius: #{pfe-var(ui--border-radius)};
  // Arrow styles
  --pfe-cta__arrow--Display:  none;

  // Loop through states and apply update to color
  @each $state in (hover, focus) {
    ::slotted(a:#{$state}) {
      --pfe-cta--BorderColor:     #{pfe-local(main--#{$state})};
      --pfe-cta--BackgroundColor: #{pfe-local(main--#{$state})};
      --pfe-cta--Color:           #{pfe-local(aux--#{$state})};
      --pfe-broadcasted--color--ui-link--#{$state}: #{pfe-local(aux--#{$state})};
    }
  }
}

/// ===========================================================================
/// PRIMARY CTAs
/// ===========================================================================
:host([priority="primary"]),
:host([pfe-priority="primary"]) {
  --pfe-cta--main:          #{pfe-color(ui-accent)};
  --pfe-cta--aux:           #{pfe-color(ui-accent--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}:  #{pfe-color(ui-accent--#{$state})};
    --pfe-cta--aux--#{$state}:   #{pfe-color(ui-accent--text--#{$state})};
  }

  --pfe-cta--BorderColor:     #{pfe-local(main)};
  --pfe-cta--BackgroundColor: #{pfe-local(main)};
  --pfe-cta--Color:           #{pfe-local(aux)};

  ::slotted(a:focus) {
    @include pfe-cta-focus(#{pfe-local(aux--focus)});
    // @include pfe-cta-focus(#fff);
  }
}

/// ===========================================================================
/// SECONDARY CTAs
/// ===========================================================================
:host([priority="secondary"]),
:host([pfe-priority="secondary"]) {
  --pfe-cta--main:          #{pfe-color(ui-complement)};
  --pfe-cta--aux:           transparent;

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}:  #{pfe-color(ui-complement--#{$state})};
    --pfe-cta--aux--#{$state}:   #{pfe-color(ui-complement--text--#{$state})};
  }

  --pfe-cta--BorderColor:     #{pfe-local(main)};
  --pfe-cta--BackgroundColor: #{pfe-local(aux)};
  --pfe-cta--Color:           #{pfe-local(main)};

  ::slotted(a:focus) {
    --pfe-cta--BorderColor:     #{pfe-local(aux--focus)};
    @include pfe-cta-focus(#{pfe-local(aux--focus)});
  }
}

/// ===========================================================================
/// ON DARK
/// ===========================================================================
:host([on="dark"]) {
  --pfe-cta--main:        #{pfe-color(text--on-dark)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-link--on-dark--#{$state})};
  }
}

// Primary variation
:host([on="dark"][priority="primary"]),
:host([on="dark"][pfe-priority="primary"]) {
  --pfe-cta--main:        #{pfe-color(ui-accent--text)};
  --pfe-cta--aux:         #{pfe-color(ui-accent)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-accent)};
    --pfe-cta--aux--#{$state}:  #{pfe-color(ui-accent--text)};
  }
}

// Secondary variation
:host([on="dark"][priority="secondary"]),
:host([on="dark"][pfe-priority="secondary"]) {
  --pfe-cta--main:        #{pfe-color(ui-base--text)};

  @each $state in (hover, focus) {
    --pfe-cta--main--#{$state}: #{pfe-color(ui-base)};
  }
}

/// ===========================================================================
/// COLOR OVERRIDES
/// ===========================================================================
@each $color in (base, complement, accent) {
  :host([color="#{$color}"]),
  :host([color="#{$color}"][on="dark"]),
  :host([pfe-color="#{$color}"]),
  :host([pfe-color="#{$color}"][on="dark"]) {
    --pfe-cta--main:        #{pfe-color(ui-#{$color})};
    --pfe-cta--aux:         #{pfe-color(ui-#{$color}--text)};
  
    @each $state in (hover, focus) {
      --pfe-cta--main--#{$state}: #{pfe-color(ui-#{$color}--#{$state})};
      --pfe-cta--aux--#{$state}:  #{pfe-color(ui-#{$color}--text--#{$state})};
    }
  }
}

/// ===========================================================================
/// COLOR OVERRIDE: SECONDARY AUX
/// ===========================================================================
:host([color="base"][priority="secondary"]),
:host([color="base"][priority="secondary"][on="dark"]),
:host([color="complement"][priority="secondary"]),
:host([color="complement"][priority="secondary"][on="dark"]),
:host([color="accent"][priority="secondary"]),
:host([color="accent"][priority="secondary"][on="dark"])
:host([pfe-color="base"][pfe-priority="secondary"]),
:host([pfe-color="base"][pfe-priority="secondary"][on="dark"]),
:host([pfe-color="complement"][pfe-priority="secondary"]),
:host([pfe-color="complement"][pfe-priority="secondary"][on="dark"]),
:host([pfe-color="accent"][pfe-priority="secondary"]),
:host([pfe-color="accent"][pfe-priority="secondary"][on="dark"]) {
  --pfe-cta--aux: transparent;
}
