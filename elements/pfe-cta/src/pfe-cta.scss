@import "../../pfe-sass/pfe-sass";

$LOCAL: cta;

$pfe-cta__arrow-size: 0.313em;
$pfe-cta--BackgroundColor--focus: rgba(40, 151, 240, .2);
$pfe-cta--Color--fallback: #003366;

$variables: (
  Padding:      .6rem 0,
  BorderRadius: 0,
  
  BackgroundColor:        transparent,
  BackgroundColor--hover: transparent,
  BackgroundColor--focus: transparent,

  BorderColor:        transparent,
  BorderColor--hover: transparent,
  BorderColor--focus: transparent,

  Color:        #{pfe-apply-broadcast(link)},
  Color--hover: #{pfe-apply-broadcast(link--hover)},
  Color--focus: #{pfe-apply-broadcast(link--focus)},

  TextDecoration:        none,
  TextDecoration--hover: none,
  TextDecoration--focus: none,
  FontWeight:            #{pfe-var(font-weight--bold)},

  arrow: (
    Display:    inline,
    Padding:    0 .125rem 0 .375rem,
    MarginLeft: calc(#{pfe-var(content-spacer)} * 0.25)
  ),

  inner: (
    BorderColor:        transparent,
    BorderColor--focus: transparent
  )
);

:host {
  @include pfe-print-variables($variables);

  // properties
  display:         inline-block;
  position:        relative;
  max-width:       max-content;
  vertical-align:  middle;
  transition:      padding #{pfe-var(animation-speed)} #{pfe-var(animation-timing)};
  max-width:       #{pfe-local($cssvar: MaxWidth, $fallback: max-content)};

  background-color: #{pfe-local(BackgroundColor)};
  color:            #{pfe-local(Color)};
  border-color:     #{pfe-local(BorderColor)};

  border-radius:    #{pfe-local(BorderRadius)};
  border:           #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};
  padding:          #{pfe-local($cssvar: Padding)} !important;
}

::slotted(button),
::slotted(input) {
  @extend %reset-button;
}

::slotted(*) {
  display: inline;

  color:           #{pfe-local(Color, $pfe-cta--Color--fallback)} !important;
  font-family:     #{pfe-local($cssvar: FontFamily, $fallback: #{pfe-var(font-family--heading)})};
  font-size:       #{pfe-local($cssvar: FontSize, $fallback: #{pfe-var(font-size)})};
  font-weight:     #{pfe-local(FontWeight)};
  line-height:     #{pfe-local($cssvar: LineHeight, $fallback: #{pfe-var(line-height)})};
  text-decoration: #{pfe-local(TextDecoration)} !important;
  
  &::before {  // inner border on priority CTAs
    content: "";

    display:    block;
    box-sizing: border-box;
    position:   absolute;
    top:    2px;
    left:   2px;
    bottom: 2px;
    right:  2px;

    border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-local($cssvar: BorderColor, $region: inner)};
    border-radius: 2px;
    
    outline: none;
  }
}

::slotted(*:not(:disabled)) {
  cursor: pointer;
}

.pfe-cta--arrow {
  display: #{pfe-local($cssvar: arrow--Display, $region: arrow)};
  padding: #{pfe-local($cssvar: Padding, $region: arrow)};
  fill:    #{pfe-local(Color)};
  position: relative;
  top:    .1rem;
  width:  13px;
  height: 13px;
  transition: padding #{pfe-var(animation-speed)} #{pfe-var(animation-timing)};
}

  ::slotted(:hover) {
    --pfe-cta__arrow--Padding:     0 0 0 .5rem;
    
    color: #{pfe-local(Color--hover)} !important;
    text-decoration: #{pfe-local(TextDecoration--hover)} !important;
  }

::slotted(:focus) {
  outline: none !important;
  color:   #{pfe-local(Color--focus)} !important;
  text-decoration: #{pfe-local(TextDecoration--focus)} !important;

  &::before {
    border: 1px solid #{pfe-local($cssvar: BorderColor--focus, $region: inner)};
  }

  .pfe-cta--arrow {
    fill: #{pfe-local(Color--focus)};
  }
}

:host(::after) {
  margin-left: #{pfe-local($cssvar: MarginLeft, $region: arrow)};
}

:host(:hover) {
  --pfe-cta__arrow--Padding:     0 0 0 .5rem;
  
  background-color: #{pfe-local(BackgroundColor--hover)};
  border-color:     #{pfe-local(BorderColor--hover)};

  ::slotted(*) {
    color:              #{pfe-local(Color--hover)} !important;
    text-decoration:    #{pfe-local(TextDecoration--hover)} !important;
  }

  .pfe-cta--arrow {
    fill: #{pfe-local(Color--hover)};
  }
}

:host(:focus),
:host(.focus-within) {
  background-color: #{pfe-local(BackgroundColor--focus)};
  border-color:     #{pfe-local(BorderColor--focus)};

  ::slotted(*) {
    color:           #{pfe-local(Color--focus)} !important;
    text-decoration: #{pfe-local(TextDecoration--focus)} !important;
  }

  // Inner border only for the focus state
  .pfe-cta {
    &--wrapper::before {
      border-color:  #{pfe-local($cssvar: BorderColor--focus, $region: inner)};
    }
    &--arrow {
      fill: #{pfe-local(Color--focus)};
    }
  }
}

:host(:not(:disabled)) {
  cursor: pointer;
}

@each $theme in $THEMES {
  :host([on="#{$theme}"]:not([pfe-priority])) {
      @include pfe-set-broadcast-theme($theme);
  }
  @include browser-query(ie11) {
      :host([on]:not([pfe-priority])) {
          color: #{pfe-broadcasted(link)} !important;
      }
  }
}

/// ===========================================================================
/// BELOW THIS POINT, LOCAL VARIABLE OVERRIDES ONLY

// Broadcast colors: The CTA is tuning into whatever colors the containers are offering up, per priority level

// - The location of these styles in the doc is important for clarity (readable code FTW!)
// - pfe-priority="primary" sets its own background colors, so it ignores broadcast
// - if there is no broadcast variable available, these are still seen by the browser, so we also set fallbacks here!
// - Fallback values should match whats above

// default link background focus color
:host(:not([pfe-priority])) {
  --pfe-cta--Color: var(--pfe-broadcasted--link, #{pfe-color(link)});

  --pfe-cta--inner--BorderColor--hover: var(--pfe-broadcasted--link--hover, #{pfe-color(link--hover)});
  --pfe-cta--Color--hover: var(--pfe-broadcasted--link--hover, #{pfe-color(link--hover)});

  --pfe-cta--BackgroundColor--focus: #{$pfe-cta--BackgroundColor--focus}; // @NOTE Definition at top of file
  --pfe-cta--Color--focus: var(--pfe-broadcasted--link--focus, #{pfe-color(link--focus)});
}

:host([pfe-priority="secondary"]) {
  --pfe-cta--BorderRadius:              #{pfe-var(ui--border-radius)};
  --pfe-cta__arrow--Display:            none;
  --pfe-cta--BackgroundColor:           transparent;
  --pfe-cta--BorderColor:               var(--pfe-broadcasted--text, #{pfe-color(ui-complement)});
  --pfe-cta__inner--BorderColor:        transparent;
  --pfe-cta--Color:                     var(--pfe-broadcasted--text, #{pfe-color(ui-complement)});

  --pfe-cta--BackgroundColor--hover:    #{pfe-color(ui-complement)};
  --pfe-cta--BorderColor--hover:        var(--pfe-broadcasted--text, #{pfe-color(ui-complement)}); //white, then black
  --pfe-cta--Color--hover:              #{pfe-color(ui-complement--text)};

  --pfe-cta--BackgroundColor--focus:    #{pfe-color(surface--lighter)};
  --pfe-cta--BorderColor--focus:        #{pfe-color(ui-complement)};
  --pfe-cta__inner--BorderColor--focus: var(--pfe-broadcasted--text, #{pfe-color(ui-complement)});
  --pfe-cta--Color--focus:              #{pfe-color(ui-complement)};
}

/// ===========================================================================
/// PRIMARY CTAs
/// ===========================================================================
:host([pfe-priority="primary"]) {
  --pfe-cta--main:        #{pfe-color(ui-accent)};
  --pfe-cta--main--hover: #{pfe-color(ui-accent--hover)};

  --pfe-cta--aux: #{pfe-color(ui-accent--text)};

  --pfe-cta__arrow--Display: none;

  --pfe-cta--BackgroundColor:        #{pfe-local(main)};
  --pfe-cta--BackgroundColor--hover: #{pfe-local(main--hover)};
  --pfe-cta--BackgroundColor--focus: #{pfe-local(main)};
  
  --pfe-cta--Padding:      #{pfe-var(container-padding)} calc(#{pfe-var(container-padding)} * 2);
  --pfe-cta--BorderRadius: #{pfe-var(ui--border-radius)};
}

:host([pfe-priority="primary"][pfe-color="lightest"]) {
  --pfe-cta--BackgroundColor:           #{pfe-color(surface--lightest)};
  --pfe-cta--BorderColor:               #{pfe-color(surface--lightest)};
  --pfe-cta__inner--BorderColor:        transparent;
  --pfe-cta--Color:                     #{pfe-color(text)};

  --pfe-cta--BackgroundColor--hover:    #{pfe-color(surface--lighter)};
  --pfe-cta--BorderColor--hover:        #{pfe-color(surface--lighter)};
  --pfe-cta--Color--hover:              #{pfe-color(text)};

  --pfe-cta--BackgroundColor--focus:    #{pfe-color(surface--lightest)};
  --pfe-cta--BorderColor--focus:        #{pfe-color(surface--lightest)};
  --pfe-cta__inner--BorderColor--focus: #{pfe-color(surface--darkest)};
  --pfe-cta--Color--focus:              #{pfe-color(text)};
}

/// ===========================================================================
/// SECONDARY CTAs
/// ===========================================================================
:host([pfe-priority="secondary"]) {
  --pfe-cta--main: #{pfe-radio(ui-complement)};
  --pfe-cta--aux:  #{pfe-color(ui-complement--text)};
  
  --pfe-cta__arrow--Display: none;

  --pfe-cta--BackgroundColor:           transparent;
  --pfe-cta--BorderColor:               #{pfe-color(surface--lightest)};
  --pfe-cta__inner--BorderColor:        transparent;
  --pfe-cta--Color:                     #{pfe-color(text--on-dark)};

  --pfe-cta--BackgroundColor--hover:    #{pfe-color(surface--lighter)};
  --pfe-cta--BorderColor--hover:        #{pfe-color(surface--lighter)};
  --pfe-cta--Color--hover:              #{pfe-color(text)};

  --pfe-cta--BackgroundColor--focus:    #{pfe-color(surface--lightest)};
  --pfe-cta--BorderColor--focus:        #{pfe-color(surface--lightest)};
  --pfe-cta__inner--BorderColor--focus: #{pfe-color(surface--darkest)};
  --pfe-cta--Color--focus:              #{pfe-color(text)};

  --pfe-cta__inner--BorderColor--focus: #{pfe-local(main)};

  --pfe-cta--Color:        #{pfe-local(main)};
  --pfe-cta--Color--hover: #{pfe-local(aux)};
  --pfe-cta--Color--focus: #{pfe-local(main)}
}

/// ===========================================================================
// COLOR ATTRIBUTE OVERRIDES
//
// Set values of local vars because more
// colors are needed than whats available in broadcast
/// ===========================================================================

@each $color in (base, accent, complement) {
  :host([pfe-color="#{$color}"]) {
    --pfe-cta--main:        #{pfe-color(ui-#{$color})};
    --pfe-cta--main--hover: #{pfe-color(ui-#{$color}--hover)};
    --pfe-cta--main--focus: #{pfe-color(ui-#{$color})};

    --pfe-cta--aux: #{pfe-color(ui-#{$color}--text)};
  }
}

:host([pfe-color="lightest"]) {
  --pfe-cta--main:        #{pfe-color(surface--lightest)};
  --pfe-cta--main--hover: #{pfe-color(surface--lighter)};
  --pfe-cta--main--focus: #{pfe-color(surface--lightest)};

  --pfe-cta--aux: #{pfe-color(surface--lightest--text)};
}

/// ===========================================================================
/// WIND CTA VARIANTS
/// ===========================================================================

:host([pfe-priority="secondary"][pfe-variant="wind"]) {
  --pfe-cta--MaxWidth:                  auto;
  --pfe-cta--BackgroundColor:           transparent;
  --pfe-cta--BorderColor:               #{pfe-color(surface--border)};
  --pfe-cta--Color:                     var(--pfe-broadcasted--link, #{pfe-color(link)});
  --pfe-cta--FontWeight:                #{pfe-var(font-weight--normal)};

  --pfe-cta--BackgroundColor--hover:    #{pfe-color(surface--border--lightest)};

  --pfe-cta--BorderColor:               #{pfe-color(surface--border)};
  --pfe-cta--BorderColor--hover:        #{pfe-color(surface--border)};

  --pfe-cta--Color--hover:              #{pfe-color(link--hover)};

  --pfe-cta--Color--focus:               #{pfe-color(link--hover)};
  --pfe-cta--BorderColor--focus:         #{pfe-color(surface--border)};
  --pfe-cta__inner--BorderColor--focus:  #{pfe-local(BorderColor--focus)};
  --pfe-cta--TextDecoration--hover:      #{pfe-broadcasted(link-decoration--hover)};
}
