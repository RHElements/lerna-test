@import "../../pfe-sass/pfe-sass";

$LOCAL: card;

:host {
  // Individual padding overrides available
  --pfe-card--PaddingTop: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingRight: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingBottom: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingLeft: calc(#{pfe-var(container-spacer)} * 2);

  // Combine above variables or allow single override point via variable
  --pfe-card--Padding: #{pfe-local(PaddingTop)} #{pfe-local(PaddingRight)} #{pfe-local(PaddingBottom)} #{pfe-local(PaddingLeft)};


  --pfe-card--spacing: #{pfe-var(container-spacer)};

  // Internal spacing; elements inside the card (header, body, footer regions)
  --pfe-card--spacing--vertical: #{pfe-local(spacing)};
  --pfe-card__footer--spacing--horizontal: calc(#{pfe-var(container-spacer)} / 2);

  //-- Border settings
  --pfe-card--BorderRadius: #{pfe-var(surface--border-radius)};

  //-- Border variable encompasses width, style, and color
  --pfe-card--Border: #{pfe-local(BorderWeight, 0)} #{pfe-local(BorderStyle, solid)} #{pfe-local(BorderColor, transparent)};

  //-- Color properties
  --pfe-card--BackgroundColor: #{pfe-color(surface--base)};
  --pfe-card--BackgroundPosition: center center;

  // Broadcasted values set to match background color
  --pfe-broadcasted--color--text:               #{pfe-color(surface--base--text)};
  --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--base--link)};
  --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--base--link--visited)};
  --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--base--link--hover)};
  --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--base--link--focus)};

  --pfe-card__header--BackgroundColor: rgba(45, 45, 45, #{pfe-var(opacity)});
  --pfe-card__header--Color:           var(--pfe-broadcasted--color--text);

  // Add backward support for previous variable naming
  // @TODO deprecate padding and bg in favor of BEM naming
  --pfe-card--padding:      #{pfe-local(Padding)};
  --pfe-card--bg:           #{pfe-local(BackgroundColor)};

  // Start of style declarations for host element
  display: flex;
  flex-direction: column;
  justify-items: flex-start;
  // This allows the card to fill it's container if necessary
  align-self: stretch;

  padding:       #{pfe-local(Padding)};
  border:        #{pfe-local(Border)};
  border-radius: #{pfe-local(BorderRadius)};

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;

  // Base colors
  background-color:    #{pfe-local(BackgroundColor)};
  background-position: #{pfe-local(BackgroundPosition)};
  color:               #{pfe-radio(color, text)} !important;
}

// @TODO Deprecate "dark" and "light" in favor of "darker" and "lighter"
@each $color in (darker, darkest, lighter, lightest, complement, accent) {
  $label: $color;
  // Update variable values to match provided attribute
  :host([pfe-color="#{$label}"]) {
    --pfe-card--BackgroundColor:                  #{pfe-color(surface--#{$color})};
    --pfe-broadcasted--color--text:               #{pfe-color(surface--#{$color}--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--#{$color}--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--#{$color}--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--#{$color}--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--#{$color}--link--focus)};
  }
}

:host([pfe-size="small"]) {
  --pfe-card--PaddingTop:     #{pfe-var(container-spacer)};
  --pfe-card--PaddingRight:   #{pfe-var(container-spacer)};
  --pfe-card--PaddingBottom:  #{pfe-var(container-spacer)};
  --pfe-card--PaddingLeft:    #{pfe-var(container-spacer)};
}

// Targets the wrappers in the shadow DOM
.pfe-card {
  &__header,
  &__body,
  &__footer {
    //-- Slotted styles specifically for img element
    ::slotted(img) {
      width: #{pfe-local($cssvar: MinWidth, $region: img, $fallback: auto)};
    }

    //-- Slotted styles for overflow attribute
    ::slotted(img[pfe-overflow]) {
      object-fit: cover; // Fix distortion
    }

    ::slotted([pfe-overflow]) {
      margin-top:    #{pfe-local($cssvar: MarginTop, $region: overflow, $fallback: 0)};
      margin-right:  #{pfe-local($cssvar: MarginRight, $region: overflow, $fallback: 0)};
      margin-bottom: #{pfe-local($cssvar: MarginBottom, $region: overflow, $fallback: 0)};
      margin-left:   #{pfe-local($cssvar: MarginLeft, $region: overflow, $fallback: 0)};
    }

    ::slotted([pfe-overflow~="right"]) {
      --pfe-card__overflow--MarginRight: calc(#{pfe-local(PaddingRight)} * -1);
    }

    ::slotted([pfe-overflow~="left"]) {
      --pfe-card__overflow--MarginLeft: calc(#{pfe-local(PaddingLeft)} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      align-self: flex-end;
    }

    //-- Slotted styles for overflow attribute + img tag
    ::slotted(img[pfe-overflow~="right"]) {
      --pfe-card__img--MinWidth: calc(100% + #{pfe-local(PaddingRight)});
    }

    ::slotted(img[pfe-overflow~="left"]) {
      --pfe-card__img--MinWidth: calc(100% + #{pfe-local(PaddingLeft)});
    }

    ::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]) {
      --pfe-card__img--MinWidth: calc(100% + #{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)});
    }
  }
  &__header {
    z-index: 2;
    // Declare the header background color
    background-color: #{pfe-local($cssvar: BackgroundColor, $region: header)};
    color:            #{pfe-local($cssvar: Color, $region: header)};

    // Margin styles on header region
    margin-top:    calc(#{pfe-local(PaddingTop)} * -1) !important;
    margin-right:  calc(#{pfe-local(PaddingRight)} * -1);
    margin-bottom: #{pfe-local(spacing--vertical)};
    margin-left:   calc(#{pfe-local(PaddingLeft)} * -1);

    // Padding for the header region
    padding-top:    #{pfe-local(spacing--vertical)};
    padding-right:  #{pfe-local(PaddingRight)};
    padding-left:   #{pfe-local(PaddingLeft)};
    padding-bottom: #{pfe-local(spacing--vertical)};

    :host(:not([has_body],[has_footer])) & {
      margin-bottom: #{pfe-local(PaddingBottom)};
    }

    ::slotted([pfe-overflow~="top"]) {
      --pfe-card__overflow--MarginTop: calc(#{pfe-local(PaddingTop)} * -1);
    }

    :host([has_body],[has_footer]) & ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(spacing--vertical)} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }

    @each $tag in (h1, h2, h3, h4, h5, h6) {
      ::slotted(#{$tag}) {
        margin-bottom: 0;
      }
    }
  }
  &__body {
    :host(:not([has_header])) & ::slotted([pfe-overflow~="top"]) {
      --pfe-card__overflow--MarginTop: calc(#{pfe-local(PaddingTop)} * -1);
    }

    ::slotted([pfe-overflow~="top"]) {
      z-index: 1;
      --pfe-card__overflow--MarginTop: calc(#{pfe-local(spacing--vertical)} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }

    :host([has_footer]) & ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(spacing--vertical)} * -1);
    }
  }
  &__footer {
    margin-top: auto; // This allows the footer to move to the very bottom

    display: flex;
    flex-direction: #{pfe-local($cssvar: Row, $region: footer, $fallback: row)};
    flex-wrap: #{pfe-local($cssvar: Wrap, $region: footer, $fallback: wrap)};
    // Aligns buttons and CTAs
    align-items: #{pfe-local($cssvar: AlignItems, $region: footer, $fallback: baseline)};

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }
  }
  &__header,
  &__body {
    &:not(:last-child) {
      margin-bottom: #{pfe-local(spacing--vertical)};
    }

    //-- Slotted styles for typography
    // Remove margins from typography inside the slots
    @each $tag in (p, h1, h2, h3, h4, h5, h6) {
      ::slotted(#{$tag}:first-child) {
        // Remove top margins
        margin-top: 0;
      }
    }
  }
}
