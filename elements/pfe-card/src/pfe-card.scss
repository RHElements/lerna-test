@import "../../pfe-sass/pfe-sass";

$LOCAL: card;

:host {
  // Individual padding overrides available
  --pfe-card--PaddingTop: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingRight: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingBottom: calc(#{pfe-var(container-spacer)} * 2);
  --pfe-card--PaddingLeft: calc(#{pfe-var(container-spacer)} * 2);

  // Combine above variables or allow single override point via variable
  --pfe-card--Padding: #{pfe-local(PaddingTop)} #{pfe-local(PaddingRight)} #{pfe-local(PaddingBottom)} #{pfe-local(PaddingLeft)};

  // Internal spacing; elements inside the card (header, body, footer regions)
  --pfe-card--spacing: #{pfe-var(container-spacer)};

  //-- Border settings
  --pfe-card--BorderRadius: #{pfe-var(surface--border-radius)};

  //-- Border variable encompasses width, style, and color
  --pfe-card--Border: #{pfe-local(BorderWeight, 0)} #{pfe-local(BorderStyle, solid)} #{pfe-local(BorderColor, transparent)};

  //-- Color properties
  --pfe-card--BackgroundColor: #{pfe-color(surface--base)};
  --pfe-card--BackgroundPosition: center center;

  // Broadcasted values set to match background color
  @include pfe-set-broadcast(light);

  --pfe-card__header--BackgroundColor: rgba(45, 45, 45, #{pfe-var(opacity)});
  --pfe-card__header--Color:           #{pfe-apply-broadcast(text)};

  // Add backward support for previous variable naming
  // @TODO deprecate padding and bg in favor of BEM naming
  --pfe-card--padding:      #{pfe-local(Padding)};
  --pfe-card--bg:           #{pfe-local(BackgroundColor)};
}

:host([pfelement]) {
  // Start of style declarations for host element
  display: flex;
  flex-direction: column;
  justify-items: flex-start;
  // This allows the card to fill it's container if necessary
  align-self: stretch;

  padding:       #{pfe-local(Padding)};
  border:        #{pfe-local(Border)};
  border-radius: #{pfe-local(BorderRadius)};

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;

  // Base colors
  background-color: #{pfe-local(BackgroundColor)};
  background-position: #{pfe-local(BackgroundPosition)};
  color: #{pfe-apply-broadcast(text)};
}

// @TODO Deprecate "dark" and "light" in favor of "darker" and "lighter"
@each $color in (dark, darker, darkest, light, lighter, lightest, complement, accent) {
  $label: $color;
  // Add backward support for dark and light
  @if $color == "dark" or $color == "light" {
    $color: "#{$color}er";
  }
  // Update variable values to match provided attribute
  // @TODO deprecate [color] in favor of [pfe-color]
  :host([color="#{$label}"]),
  :host([pfe-color="#{$label}"]) {
    --pfe-card--BackgroundColor:                  #{pfe-color(surface--#{$color})};
    @include pfe-set-broadcast(#{map-get($pfe-colors, "surface--#{$color}--theme")});
  }
}

// @TODO deprecate [size] in favor of [pfe-size]
:host([size="small"]),
:host([pfe-size="small"]) {
  --pfe-card--PaddingTop:     #{pfe-var(container-spacer)};
  --pfe-card--PaddingRight:   #{pfe-var(container-spacer)};
  --pfe-card--PaddingBottom:  #{pfe-var(container-spacer)};
  --pfe-card--PaddingLeft:    #{pfe-var(container-spacer)};
}

::slotted([pfe-overflow~="top"]) {
  z-index: 1;
  margin-top: -2rem; //IE11 fallback
  margin-top: calc(-1 * #{pfe-local(PaddingTop)}) !important;
  :host([has_header]) & {
    padding-top: #{pfe-local(spacing)};
  }
}

::slotted([pfe-overflow~="right"]) {
  margin-right: -2rem; //IE11 fallback
  margin-right: calc(-1 * #{pfe-local(PaddingRight)});
}

::slotted([pfe-overflow~="bottom"]) {
  margin-bottom: -2rem; //IE11 fallback
  margin-bottom: calc(-1 * calc(#{pfe-local(PaddingBottom)} + #{pfe-local(BorderRadius)}));
  align-self: flex-end;
}

::slotted([pfe-overflow~="left"]) {
  margin-left: -2rem; //IE11 fallback
  margin-left: calc(-1 * #{pfe-local(PaddingLeft)});
}

::slotted(img) {
  max-width: 100%;
  align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
}

::slotted(img[pfe-overflow]) {
  object-fit: cover;
  align-self: auto; //If overflow, let it stretch 100% (Undoing above ::slotted(img) rule)
}

::slotted(img[pfe-overflow~="right"]) {
  max-width: calc(100% + 2rem); //IE11 fallback
  max-width: calc(100% + #{pfe-local(PaddingRight)});
}

::slotted(img[pfe-overflow~="left"]) {
  max-width: calc(100% + 2rem); //IE11 fallback
  max-width: calc(100% + #{pfe-local(PaddingLeft)});
}

::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]) {
  max-width: calc(100% + 4rem); //IE11 fallback
  max-width: calc(100% + calc(#{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)}));
}

// Remove margins from typography inside the slots
@each $tag in (p, h1, h2, h3, h4, h5, h6) {
  ::slotted(#{$tag}) {
    // Remove top margins
    margin-top: 0;
  }
}

::slotted([slot="pfe-card--header"]) {
  display: block;
  z-index: 2;
  // Declare the header background color
  background-color: #{pfe-local($cssvar: BackgroundColor, $region: header)};
  color: #{pfe-local($cssvar: Color, $region: header)};

  // Margin style only on top and sides
  margin-top:    -2rem; //IE11 fallback
  margin-top:    calc(-1 * #{pfe-local(PaddingTop)}) !important;
  margin-right:  -2rem; //IE11 fallback
  margin-right:  calc(-1 * #{pfe-local(PaddingRight)});
  margin-bottom: #{pfe-local(spacing)};
  margin-left:   -2rem; //IE11 fallback
  margin-left:   calc(-1 * #{pfe-local(PaddingLeft)});

  // Padding for the header region
  padding-top:    #{pfe-local(spacing)}; // Top padding differs if background color applied
  padding-right:  #{pfe-local(PaddingRight)};
  padding-left:   #{pfe-local(PaddingLeft)};
  padding-bottom: #{pfe-local(spacing)};
}

::slotted(:not([slot])) {
  display: block;
  margin-bottom: #{pfe-local(spacing)};
}

::slotted([slot="pfe-card--footer"]) {
  display: flex;
  flex-flow: column wrap;
  margin-top: auto; // This allows the footer to move to the very bottom
  justify-self: flex-end;
}

.pfe-card {
  &__header,
  &__body {
    &:last-child {
      margin-bottom: 0;
    }
  }
}
