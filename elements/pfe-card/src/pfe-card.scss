@import "../../pfe-sass/pfe-sass";

$LOCAL: card;

$LOCAL-VARIABLES: (
  // These get applied to each region
  TextAlign: left,
  
  // This only applies when the card is inside a flex layout
  AlignSelf: stretch,
  
  // Individual padding overrides available
  PaddingTop: calc(#{pfe-var(container-spacer)} * 2),
  PaddingRight: calc(#{pfe-var(container-spacer)} * 2),
  PaddingBottom: calc(#{pfe-var(container-spacer)} * 2),
  PaddingLeft: calc(#{pfe-var(container-spacer)} * 2),

  // Space between header, body, footer regions
  region--spacing: pfe-var(container-spacer),

  // Spacing internal to regions
  spacing--horizontal: calc(#{pfe-var(content-spacer)} / 2),
  spacing--vertical:   pfe-var(content-spacer),
  
  //-- Border settings
  BorderWidth: 0,
  BorderStyle: solid,
  BorderColor: pfe-var(surface--border),
  BorderRadius: pfe-var(surface--border-radius),

  //-- Color properties
  BackgroundColor: pfe-var(surface--base),
  // BackgroundImage: null,
  // BackgroundAttachment: null,
  context: pfe-var(surface--base--context),
  BackgroundPosition: center center,
  // BackgroundRepeat: null,
  // BackgroundSize: null,
  
  header: (
    Display: flex,
    JustifyContent: null,
    Color: pfe-broadcasted(text),
    BackgroundColor: rgba(0, 0, 0, pfe-var(opacity)),
    BackgroundColor--dark: rgba(255, 255, 255, pfe-var(opacity))
  ),

  body: (
    FlexDirection: column,
    FlexWrap: nowrap,
    JustifyContent: null,
    AlignItems: null
  ),

  footer: (
    FlexDirection: row,
    FlexWrap: wrap,
    JustifyContent: null,
    AlignItems: null,
    spacing--horizontal: pfe-var(content-spacer)
  ),

  overlay: (
    BackgroundColor: rgba(0, 0, 0, #{pfe-var(opacity)})
  )
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  // Combine above variables or allow single override point via variable
  Padding: pfe-local(PaddingTop) pfe-local(PaddingRight) pfe-local(PaddingBottom) pfe-local(PaddingLeft),

  //-- Border variable encompasses width, style, and color
  Border: pfe-local(BorderWidth) pfe-local(BorderStyle) pfe-local(BorderColor)
));
  
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  BorderTop: pfe-local(Border)
));

$size-small: (
  PaddingTop:     pfe-var(container-spacer),
  PaddingRight:   pfe-var(container-spacer),
  PaddingBottom:  pfe-var(container-spacer),
  PaddingLeft:    pfe-var(container-spacer)
);

:host {
  --context: #{pfe-local(context)};

  display: flex;
  flex-direction: column;
  justify-items: flex-start;
  flex-wrap: nowrap;

  // This allows the card to fill it's container if necessary
  align-self:       pfe-local(AlignSelf);
  position:         relative;

  padding:       pfe-local(Padding);

  border:        pfe-local(Border); // @TODO add automatic border when lightest card is on lightest background?
  border-top:    pfe-local(BorderTop);
  border-radius: pfe-local(BorderRadius);

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;
  position: relative;

  // Base colors
  background-image:    pfe-local(BackgroundImage);
  background-color:    pfe-local(BackgroundColor);
  background-position: pfe-local(BackgroundPosition);
  background-repeat:   pfe-local(BackgroundRepeat);
  background-size:     pfe-local(BackgroundSize);
  background-attachment:  pfe-local(BackgroundAttachment);
  color: pfe-broadcasted(text);

  // Add the border to the card for print
  @include pfe-print-media {
    border-radius: pfe-fetch(surface--border-radius);
    border: pfe-fetch(surface--border-width) pfe-fetch(surface--border-style) pfe-fetch(surface--border);
  }

  // Remove background color for print
  @include pfe-no-print-background;

  @include browser-query(ie11) {
    background-color: pfe-var(surface--lightest) !important;
    color: pfe-var(text) !important;
    background-image: none !important;
    border-radius: pfe-fetch(surface--border-radius);
    border: pfe-fetch(surface--border-width) pfe-fetch(surface--border-style) pfe-fetch(surface--border);
    padding: pfe-fetch(container-spacer);
  }
}

// Pull in pfe-var settings for all supported surface colors
@include pfe-surfaces;

@include pfe-contexts; // imports on="light" etc support

:host([size="small"]) {
  @include pfe-print-local($size-small);
}

:host([border]:not([border="false"])) {
  border-width:   pfe-var(surface--border-width);
}

:host([overlay]) .pfe-card__overlay {
  @extend %overlay;
  background-color: pfe-local(BackgroundColor, $region: overlay);
  z-index: 0;

  @include pfe-print-media {
    display: none;
  }
}

// Targets the wrappers in the shadow DOM
.pfe-card {
  &__header,
  &__body,
  &__footer {
    z-index: 1;
    text-align: pfe-local(TextAlign);

    ::slotted([pfe-overflow~="top"]),
    ::slotted([overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(PaddingTop)}) !important;
      :host([has_header]) & {
        padding-top: pfe-local(spacing);
      }
    }

    ::slotted([pfe-overflow~="right"]),
    ::slotted([overflow~="right"]) {
      margin-right: -2rem; //IE11 fallback
      margin-right: calc(-1 * #{pfe-local(PaddingRight)});

      max-width: calc(100% + 2rem); //IE11 fallback
      max-width: calc(100% + #{pfe-local(PaddingRight)});
    }

    ::slotted([pfe-overflow~="bottom"]),
    ::slotted([overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * calc(#{pfe-local(PaddingBottom)} + #{pfe-local(BorderRadius)}));
      align-self: flex-end;
    }

    ::slotted([pfe-overflow~="left"]),
    ::slotted([overflow~="left"]) {
      margin-left: -2rem; //IE11 fallback
      margin-left: calc(-1 * #{pfe-local(PaddingLeft)});

      max-width: calc(100% + 2rem); //IE11 fallback
      max-width: calc(100% + #{pfe-local(PaddingLeft)});
    }

    ::slotted(img:not[pfe-overflow]),
    ::slotted(img:not[overflow]) {
      align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
    }

    ::slotted(img[pfe-overflow]),
    ::slotted(img[overflow]) {
      max-width: unset !important;
      object-fit: cover; // Fix distortion
    }

    ::slotted(img[pfe-overflow~="right"]),
    ::slotted(img[overflow~="right"]) {
      width: calc(100% + 2rem) !important; //IE11 fallback
      width: calc(100% + #{pfe-local(PaddingRight)}) !important;
    }

    ::slotted(img[pfe-overflow~="left"]),
    ::slotted(img[overflow~="left"]) {
      width: calc(100% + 2rem) !important; //IE11 fallback
      width: calc(100% + #{pfe-local(PaddingLeft)}) !important;
    }

    ::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]),
    ::slotted(img[overflow~="right"][overflow~="left"]) {
      width: calc(100% + 4rem) !important; //IE11 fallback
      width: calc(100% + #{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)}) !important;
    }
    
    // Target the last item in the slot, injected using JS on upgrade
    ::slotted([last]:not(img[overflow~="bottom"])) {
      margin-bottom: 0;
    }
  }
  &__header {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true);

    display:     pfe-local(Display, $region: header);
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: pfe-local(JustifyContent, $region: header);
    z-index: 2;
    
    // Declare the header background color
    background-color: pfe-local(BackgroundColor, $region: header);
    color:            pfe-local(Color, $region: header);

    :host([on="dark"]) & {
        // Declare the header background color
      background-color: pfe-local(BackgroundColor--dark, $region: header);
    }

    @include browser-query(ie11) {
      background-color: pfe-fetch(surface--lightest) !important;
      color: pfe-fetch(text) !important;
    }

    // Padding for the header region
    padding-top:    calc(#{pfe-local(spacing--vertical)} / 2);
    padding-right:  pfe-local(PaddingRight);
    padding-bottom: calc(#{pfe-local(spacing--vertical)} / 2);
    padding-left:   pfe-local(PaddingLeft);

    margin-top: calc(-1 * #{pfe-local(PaddingTop)});
    margin-bottom: pfe-local(region--spacing);
    margin-right: calc(#{pfe-local(PaddingRight)} * -1);
    margin-left: calc(#{pfe-local(PaddingLeft)} * -1);

    ::slotted(*:not([last])) {
      margin-right: pfe-local(spacing--horizontal);
    }

    ::slotted([pfe-overflow~="top"]),
    ::slotted([overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(spacing--vertical)});
    }

    :host(:not([has_header])) & {
      display: none;
    }

    :host([has_default],[has_footer]) & ::slotted([pfe-overflow~="bottom"]),
    :host([has_default],[has_footer]) & ::slotted([overflow~="bottom"]) {
      margin-bottom: pfe-local(MarginBottom, $region: overflow, $fallback: calc(#{pfe-local(spacing--vertical)} * -1));
    }

    ::slotted([pfe-overflow~="bottom"]),
    ::slotted([overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(spacing--vertical)});
    }

    :host(:not([has_header])) & {
      display: none;
    }
  }
  &__body {
    flex-grow: 1;

    // Start of style declarations for host element
    display: flex;
    flex-direction: pfe-local(FlexDirection, $region: body);
    flex-wrap:      pfe-local(FlexWrap, $region: body);
  
    // Optional hooks, no default styles
    justify-content:  pfe-local(JustifyContent, $region: body);
    align-items:      pfe-local(AlignItems, $region: body);

    :host([has_footer]) & {
      margin-bottom: pfe-local(region--spacing);
    }

    ::slotted(*:not([last])) {
      margin-bottom: pfe-local(spacing--vertical);
    }

    :host(:not([has_header])) & ::slotted([overflow~="top"]) {
      margin-top: pfe-local(MarginTop, $region: overflow, $fallback: calc(#{pfe-local(PaddingTop)} * -1));
    }

    :host([has_footer]) & ::slotted([pfe-overflow~="bottom"]),
    :host([has_footer]) & ::slotted([overflow~="bottom"]) {
      margin-bottom: pfe-local(MarginBottom, $region: overflow, $fallback: calc(#{pfe-local(spacing--vertical)} * -1));
    }
    
    :host(:not([has_footer])) & {
      margin-bottom: 0;
    }
  }
  &__footer {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true, $selector: last-child);

    z-index: 1;
    // margin-top: auto; // This allows the footer to move to the very bottom

    display: flex;
    flex-direction: pfe-local(Row, row, $region: footer);
    flex-wrap:      pfe-local(Wrap, wrap, $region: footer);
    // Aligns buttons and CTAs
    align-items: pfe-local(AlignItems, baseline, $region: footer);
    gap: pfe-local(spacing--horizontal, $region: footer);

    :host(:not([has_footer])) & {
      display: none;
    }

    ::slotted([overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(region--spacing)});
    }

    ::slotted([pfe-overflow~="bottom"]),
    ::slotted([overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(PaddingBottom)});
    }

    :host(:not([has_footer])) & {
      display: none;
    }
  }
  &__header,
  &__body {
    margin-bottom: pfe-local(spacing--vertical);

    //-- Slotted styles for typography
    // Remove margins from typography inside the slots
    @each $tag in (p, h1, h2, h3, h4, h5, h6) {
      ::slotted(#{$tag}:first-child) {
        // Remove top margins
        margin-top: 0;
      }
    }
  }
}

@include browser-query(ie11) {
  img[overflow] {
      max-width: 100%;
  }
}
