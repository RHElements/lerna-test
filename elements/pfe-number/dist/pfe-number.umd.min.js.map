{"version":3,"file":"pfe-number.umd.min.js","sources":["../../../node_modules/numeral/numeral.js","../_temp/pfe-number.umd.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","/*!\n * PatternFly Elements: PfeNumber 1.0.0-prerelease.55\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\n// Import polyfills: isNaN\nimport \"./polyfills--pfe-number.js\";\n\nimport PFElement from \"../../pfelement/dist/pfelement.umd\";\nimport numeral from \"numeral\";\n\n// easy aliases for common format strings\nconst types = {\n  abbrev: \"0a\", // or 'approx'?\n  ordinal: \"0o\",\n  percent: \"0%\",\n  bytes: \"0[.][00] ib\",\n  e: \"0[.00]e+0\",\n  thousands: \"0,0[.][00]\"\n};\n\n// use thin spaces to separate thousands chunks\n// debugger;\nnumeral.locales.en.delimiters.thousands = \" \";\n\nclass PfeNumber extends PFElement {\n  static get version() {\n    return \"1.0.0-prerelease.55\";\n  }\n\n  get html() {\n    return `<style>:host{display:inline;white-space:nowrap}\n/*# sourceMappingURL=pfe-number.min.css.map */\n</style><span></span>`;\n  }\n  static get tag() {\n    return \"pfe-number\";\n  }\n\n  get styleUrl() {\n    return \"pfe-number.scss\";\n  }\n\n  get templateUrl() {\n    return \"pfe-number.html\";\n  }\n\n  static get observedAttributes() {\n    return [\"number\", \"format\", \"type\"];\n  }\n\n  constructor() {\n    super(PfeNumber);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.connected = true;\n\n    this._determineFormat();\n    this._setInitialNumber();\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(...arguments);\n    switch (attr) {\n      case \"type\":\n        this._determineFormat();\n        break;\n      case \"format\":\n        this._updateNumber(this.getAttribute(\"number\"), newVal);\n        break;\n      case \"number\":\n        this._updateNumber(newVal, this.getAttribute(\"format\"));\n    }\n  }\n\n  _setInitialNumber() {\n    const numberAttrDefined = !isNaN(parseFloat(this.getAttribute(\"number\")));\n    const numberContentDefined = !isNaN(parseFloat(this.textContent));\n\n    if (numberAttrDefined) {\n      this.setAttribute(\"number\", this.getAttribute(\"number\"));\n    } else if (numberContentDefined) {\n      this.setAttribute(\"number\", this.textContent);\n    }\n  }\n\n  _determineFormat() {\n    let type = this.getAttribute(\"type\");\n\n    if (type && types[type]) {\n      this.setAttribute(\"format\", types[type]);\n    } else {\n      this.setAttribute(\"format\", this.getAttribute(\"format\") || \"0\");\n    }\n  }\n\n  _updateNumber(num, type) {\n    if (!num || isNaN(parseFloat(num))) {\n      this.textContent = \"\";\n      this.shadowRoot.querySelector(\"span\").textContent = \"\";\n\n      return;\n    }\n\n    this.textContent = num;\n    this.shadowRoot.querySelector(\"span\").textContent = this._format(num, type);\n  }\n\n  _format(num, type) {\n    return numeral(num).format(type);\n  }\n}\n\nPFElement.create(PfeNumber);\n"],"names":["global","factory","this","numeral","_","decimal","binary","formats","locales","defaults","options","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","format","roundingFunction","leadingCount","abbrForce","int","precision","signed","thousands","output","locale","negP","optDec","abbr","trillion","neg","Math","abs","includes","indexOf","RegExp","abbreviations","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","subString","start","array","callback","TypeError","t","Object","len","k","arguments","x","parts","Array","prototype","call","reduce","accum","next","mn","multiplier","maxDecimals","optionals","optionalsRegExp","splitValue","minDecimals","max","boundedPrecision","power","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","inputString","formatFunction","round","numberToFormat","corrFactor","correctionFactor","curr","currI","O","subtract","b","space","splice","join","unformatRegex","suffixes","concat","filter","item","bytes","suffix","base","bytesMultiplier","symbols","before","after","insert","toExponential","ordinal","hours","floor","minutes","seconds","timeArray","module","exports","types","en","PfeNumber","PFElement","connected","_determineFormat","_setInitialNumber","attr","oldVal","newVal","_updateNumber","getAttribute","numberAttrDefined","parseFloat","numberContentDefined","textContent","setAttribute","num","shadowRoot","querySelector","_format","create"],"mappings":"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"}