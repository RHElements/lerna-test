{"version":3,"file":"pfe-number.min.js","sources":["_temp/pfe-number.js"],"sourcesContent":["/*!\n * PatternFly Elements: PfeNumber 1.0.0-prerelease.24\n * @license\n * Copyright 2019 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../pfelement/pfelement.js\";\nimport numeral from \"numeral\";\n\n// easy aliases for common format strings\nconst types = {\n  abbrev: \"0a\", // or 'approx'?\n  ordinal: \"0o\",\n  percent: \"0%\",\n  bytes: \"0[.][00] ib\",\n  e: \"0[.00]e+0\",\n  thousands: \"0,0[.][00]\"\n};\n\n// use thin spaces to separate thousands chunks\n// debugger;\nnumeral.locales.en.delimiters.thousands = \"â€¯\";\n\nclass PfeNumber extends PFElement {\n  static get version() {\n    return \"1.0.0-prerelease.24\";\n  }\n\n  get html() {\n    return `<style>:host{display:inline;white-space:nowrap}</style><span></span>`;\n  }\n  static get tag() {\n    return \"pfe-number\";\n  }\n\n  get styleUrl() {\n    return \"pfe-number.scss\";\n  }\n\n  get templateUrl() {\n    return \"pfe-number.html\";\n  }\n\n  static get observedAttributes() {\n    return [\"number\", \"format\", \"type\"];\n  }\n\n  constructor() {\n    super(PfeNumber);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.connected = true;\n\n    this._determineFormat();\n    this._setInitialNumber();\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(...arguments);\n    switch (attr) {\n      case \"type\":\n        this._determineFormat();\n        break;\n      case \"format\":\n        this._updateNumber(this.getAttribute(\"number\"), newVal);\n        break;\n      case \"number\":\n        this._updateNumber(newVal, this.getAttribute(\"format\"));\n    }\n  }\n\n  _setInitialNumber() {\n    const numberAttrDefined = !Number.isNaN(\n      parseFloat(this.getAttribute(\"number\"))\n    );\n    const numberContentDefined = !Number.isNaN(parseFloat(this.textContent));\n\n    if (numberAttrDefined) {\n      this.setAttribute(\"number\", this.getAttribute(\"number\"));\n    } else if (numberContentDefined) {\n      this.setAttribute(\"number\", this.textContent);\n    }\n  }\n\n  _determineFormat() {\n    let type = this.getAttribute(\"type\");\n\n    if (type && types[type]) {\n      this.setAttribute(\"format\", types[type]);\n    } else {\n      this.setAttribute(\"format\", this.getAttribute(\"format\") || \"0\");\n    }\n  }\n\n  _updateNumber(num, type) {\n    this.shadowRoot.querySelector(\"span\").textContent = this._format(num, type);\n  }\n\n  _format(num, type) {\n    return numeral(num).format(type);\n  }\n}\n\nPFElement.create(PfeNumber);\n"],"names":["types","abbrev","ordinal","percent","bytes","e","thousands","numeral","locales","en","delimiters","PfeNumber","PFElement","version","html","tag","styleUrl","templateUrl","observedAttributes","[object Object]","super","connectedCallback","this","connected","_determineFormat","_setInitialNumber","attr","oldVal","newVal","attributeChangedCallback","arguments","_updateNumber","getAttribute","numberAttrDefined","Number","isNaN","parseFloat","numberContentDefined","textContent","setAttribute","type","num","shadowRoot","querySelector","_format","format","create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,EAAQ,CACZC,OAAQ,KACRC,QAAS,KACTC,QAAS,KACTC,MAAO,cACPC,EAAG,YACHC,UAAW,cAKbC,EAAQC,QAAQC,GAAGC,WAAWJ,UAAY,IAE1C,MAAMK,UAAkBC,EACtBC,qBACE,MAAO,sBAGTC,WACE,MAAO,uEAETC,iBACE,MAAO,aAGTC,eACE,MAAO,kBAGTC,kBACE,MAAO,kBAGTC,gCACE,MAAO,CAAC,SAAU,SAAU,QAG9BC,cACEC,MAAMT,GAGRQ,oBACEC,MAAMC,oBACNC,KAAKC,WAAY,EAEjBD,KAAKE,mBACLF,KAAKG,oBAGPN,yBAAyBO,EAAMC,EAAQC,GAErC,OADAR,MAAMS,4BAA4BC,WAC1BJ,GACN,IAAK,OACHJ,KAAKE,mBACL,MACF,IAAK,SACHF,KAAKS,cAAcT,KAAKU,aAAa,UAAWJ,GAChD,MACF,IAAK,SACHN,KAAKS,cAAcH,EAAQN,KAAKU,aAAa,YAInDb,oBACE,MAAMc,GAAqBC,OAAOC,MAChCC,WAAWd,KAAKU,aAAa,YAEzBK,GAAwBH,OAAOC,MAAMC,WAAWd,KAAKgB,cAEvDL,EACFX,KAAKiB,aAAa,SAAUjB,KAAKU,aAAa,WACrCK,GACTf,KAAKiB,aAAa,SAAUjB,KAAKgB,aAIrCnB,mBACE,IAAIqB,EAAOlB,KAAKU,aAAa,QAEzBQ,GAAQxC,EAAMwC,GAChBlB,KAAKiB,aAAa,SAAUvC,EAAMwC,IAElClB,KAAKiB,aAAa,SAAUjB,KAAKU,aAAa,WAAa,KAI/Db,cAAcsB,EAAKD,GACjBlB,KAAKoB,WAAWC,cAAc,QAAQL,YAAchB,KAAKsB,QAAQH,EAAKD,GAGxErB,QAAQsB,EAAKD,GACX,OAAOjC,EAAQkC,GAAKI,OAAOL,IAI/B5B,EAAUkC,OAAOnC"}