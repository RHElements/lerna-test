// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";

$LOCAL: jump-links;

$LOCAL-VARIABLES: (
  horizontal-spacer: calc(#{pfe-var(container-padding)} * 2),
  vertical-spacer: calc(#{pfe-var(container-padding)} * 2),
  BackgroundColor: pfe-var(surface--lightest),
  context: light,
  BorderColor: pfe-var(ui-accent),
  FontSize: pfe-var(FontSize--md),

  // Initialize at mobile breakpoint
  Width: auto,

  heading: (
    FontSize: pfe-var(FontSize--sm)
  ),
  nav: (
    offset: 0
  ),
  link: (
    horizontal-spacer: calc(#{pfe-var(content-spacer)} / 3),
    vertical-spacer: calc(#{pfe-var(content-spacer)} / 6),
  )
);

:host {
  box-sizing: border-box;
  font-family: pfe-var(font-family);
  font-weight: pfe-var(font-weight--normal);
  font-weight: 400; // @TODO remove this once font-weight--normal is 400
  display: block;
  position: sticky;
  top: pfe-local(offset, $region: nav);
  padding-left: 0;

  background-color: pfe-local(BackgroundColor, $fallback: transparent);
  --context: #{pfe-local(context)};

  @media(min-width: #{pfe-breakpoint(lg)}) {
    border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;
    padding: pfe-local(vertical-spacer) pfe-local(horizontal-spacer);
  }
}

:host([sticky="false"]) {
  position: relative;
}

:host([horizontal]) {
  @media(min-width: #{pfe-breakpoint(lg)}) {
    width: 100%;
    background-color: pfe-var(surface--lightest);
    z-index: 9;
    border: none;
    padding: 0;
  }
}

// Shadow DOM slot tag
.pfe-jump-links-nav__heading {
  margin: 0 0 pfe-var(content-spacer--body--sm);

  // @media (max-width: #{pfe-breakpoint(lg, $max: true)}) {
  //   display: none;
  // }

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      flex-basis: 100%;
      align-self: center;
      justify-content: center;

      display: block;

      margin: 0;
      padding-bottom: 16px;
      border-bottom: 1px solid #d2d2d2;
    }
  }

}

// Typography styles for default or custom heading
.pfe-jump-links-nav__heading h3,
::slotted([slot="heading"]) {
  color: pfe-broadcasted(text);
  margin: 0;
  font-size: pfe-local(FontSize, $region: heading);
  font-weight: 400;
  text-transform: uppercase;

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      text-align: center;
      font-size: 14px;
      font-weight: pfe-var(font-weight--normal) !important;
    }
  }
}

::slotted([slot="logo"]) {
  display: none;

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      position: absolute;
      left: 0;
      max-height: calc(#{pfe-var(container-spacer)} * 3.5);
      max-width: calc(#{pfe-var(container-spacer)} * 14);
      top: calc(#{pfe-var(container-spacer)} * 1);

      @media (max-width: #{pfe-breakpoint(lg, $max: true)}) {
        left: calc(#{pfe-var(container-spacer)} * 2);
      }

      @media(min-width: #{pfe-breakpoint(lg)}) {
        left: calc(#{pfe-var(container-spacer)} * 4);
      }
    }
  }
}

::slotted([slot="cta"]) {
  display: none;

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      position: absolute;
      top:   calc(#{pfe-var(container-spacer)} * 1);
      right: calc(#{pfe-var(container-spacer)} * 4);
    }
  }
}

nav {
  visibility: visible;
  margin: 0;
  list-style: none;
  padding: 0;

  pfe-accordion-panel & {
    width: 100%;
  }


  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      display: flex;
      flex-flow: row wrap;
      padding-top: 32px;
      padding-bottom: 8px;
      max-width: pfe-local(Width);
    }
  }

  // Loop through the other breakpoints
  @each $size in (lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      :host([horizontal]) & {
        max-width: pfe-local(Width, $fallback: calc(#{pfe-breakpoint(#{$size})} - (#{pfe-local(Padding--horizontal)} * 4) ));
      }
    }
  }
}

#container {
  padding: 32px 0;
  pfe-accordion-panel & {
    padding: 24px 0;
  }
  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      padding: 0;
      flex-grow: 1;
      display: flex;
      justify-items: center;
      flex-direction: column;
    }
  }
}

ul {
  padding: 0;
  margin: 0;
  border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled);
  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      border: none;
      display: block;
      text-align: center;
      flex: 1;
      display: flex;
      padding: 0;
      width: auto;
      margin: 0;
      margin-left: auto;
      margin-right: auto;
    }
  }
}

li {
  display: block;
  position: relative;
  
  // text-decoration: none;
  margin-left: calc(#{pfe-var(surface--border-width)} * -1);

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      padding: 0;
      display: flex;
      align-items: center;
    }
  }

  &.expand {
    ul {
      flex: 1;
    }

    .sub-section {
      display: table;
      height: auto;
    }
  }

  &::before {
    position: absolute;
    content: "";
    top: -1px;
    width: pfe-var(surface--border-width--heavy);
    height: 100%;
    background-color: transparent;

    @media(min-width: #{pfe-breakpoint(lg)}) {
      :host([horizontal]) & {
        height: pfe-var(surface--border-width--heavy);
        width: 100%;
      }
    }
  }

  &:hover::before {
    background-color: pfe-var(ui-disabled);
  }

  &[active]::before {
    background-color: pfe-local(accent, $fallback: pfe-local(BorderColor));
  }
}

a {
  position: relative;
  display: table;

  color: pfe-var(ui-disabled--text);
  font-size: pfe-local(FontSize);
  text-decoration: none;
  line-height: pfe-var(line-height);

  padding: calc(#{pfe-local(vertical-spacer, $region: link)} * 2) calc(#{pfe-local(horizontal-spacer, $region: link)} * 2);

  @media(min-width: #{pfe-breakpoint(lg)}) {
    :host([horizontal]) & {
      padding: 16px;
      text-decoration: none;
      font-size: 16px;
      color: #6a6e73; // pfe-broadcasted(text--muted);
      &[active],
      &:hover {
        color: #151515; // pfe-broadcasted(text);
      }
    }
  }

  &:hover,
  &[active] {
    color: pfe-broadcasted(text);
  }

  .has-sub-section & {
    padding-bottom: pfe-local(vertical-spacer, $region: link);
  }

  .sub-section & {
    margin-left: calc(#{pfe-var(container-spacer)} * 0.75);
    font-size: calc(#{pfe-local(FontSize)} * 0.85);
    padding: pfe-local(vertical-spacer, $region: link) calc(#{pfe-local(horizontal-spacer, $region: link)} * 2);

    @media(min-width: #{pfe-breakpoint(lg)}) {
      display: none;
    }
    
    &:last-child {
      padding-bottom: pfe-local(horizontal-spacer, $region: link);
    }
  }

  // Creating the custom focus state
  &::after {
    content: "";
    position: absolute;
    width: calc(100% - #{pfe-var(surface--border-width--heavy)});
    height: calc(100% - #{pfe-var(surface--border-width--heavy)});
    top: 0;
    left: 0;
  }

  &:focus {
    outline: none;

    &::after {
      border-radius: pfe-var(surface--border-radius);
      border: 2px pfe-var(surface--border-style) pfe-var(link);
    }
  }
}

ul ul {
  display: flex;
  flex-direction: column;
  flex: 0;

  margin: 0;
  padding: 0;

  border-left: none !important;

  overflow-y: hidden;
  transition: flex 1s linear;
  li {
    border-left: none !important;
  }
}

// Set the local variable to use the accordion namespace
$temp: $LOCAL;
$LOCAL: accordion;
$accordion-styles: (
  BackgroundColor: pfe-var(surface--lightest),
  accent: transparent,
  BorderColor: transparent,
  BorderColor--accent: transparent
);

pfe-accordion {
  --theme: light;
  --pfe-accordion--BorderTopWidth: 0;
  --pfe-accordion--BorderBottomWidth: 0;
  @include pfe-print-local($accordion-styles);
  // Custom border
  border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled);
}

pfe-accordion-header {
  position: sticky;
  top: 0;
}

pfe-accordion-panel {
  --pfe-accordion__panel-container--Padding: 0 0 0 calc(var(--pfe-accordion__base--Padding,var(--pfe-theme--container-spacer,1rem)) * 1.5);
  &[expanded],
  &.animating {
    @include pfe-print-local($accordion-styles);
  }
}

$LOCAL: $temp;

:host([color="darkest"]) {
  @include pfe-print-local((
    theme: dark,
    BackgroundColor: pfe-var(surface--darkest)
  ));

  border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled--text);

  pfe-accordion-header,
  pfe-accordion-panel,
  button[aria-expanded="true"] {
    --pfe-accordion--BackgroundColor: #{pfe-var(surface--darkest)};
    --pfe-#{$LOCAL}--BackgroundColor: #{pfe-var(surface--darkest)};
  }

  ::slotted([slot="#{$repo}-#{$LOCAL}-nav--heading"]) {
    color: pfe-var(surface--lighter);
  }

  ul {
    border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) #{pfe-var(ui-disabled--text)};

    li[active] {
      border-left: 3px pfe-var(surface--border-style) pfe-var(ui-accent);
    }

    a {
      color: pfe-var(ui-accent--focus--on-dark);

      &:hover {
        color: pfe-var(ui-accent--hover--on-dark);
      }

      &[active] {
        color: pfe-var(ui-accent--on-dark);
      }

      &:focus::after {
        border-color: #{pfe-var(link--on-dark)};
      }
    }
  }
}

:host([hidden]) {
  display: none;
}
