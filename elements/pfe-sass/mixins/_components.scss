/// ===========================================================================
/// Accordion-specific SASS Vars
/// ===========================================================================

@mixin pfe-accordion-variables($state: default, $theme: light) {
  // Currently supports light or dark theme
  $variables: ();
  @if $theme == dark { // Dark theme
    @if $state != expanded { // Default state
      $variables: (
        accent:              #{pfe-color(ui-base--on-dark)},
        BorderColor--accent: transparent,
        BorderColor:         #{pfe-color(surface--border)},
        BorderTopWidth:      #{pfe-var(surface--border-width)},
        BorderRightWidth:    0,
        BorderBottomWidth:   #{pfe-var(surface--border-width)}
      );
    }
    @else { // Expanded state
      $variables: (
        BackgroundColor:  rgba(255, 255, 255, .1),
        Color:            #{pfe-apply-broadcast(text)},
        BorderColor:      #{pfe-color(surface--border)},
        BorderColor--accent: #{pfe-color(ui-base--on-dark)}
      );
    }
  }
  @else if $theme == saturated {
    @if $state != expanded { // Default state
      $variables: (
        accent:              #{pfe-color(ui-base--on-saturated)},
        BorderColor--accent: transparent,
        BorderColor:         #{pfe-color(surface--border)},
        BorderTopWidth:      #{pfe-var(surface--border-width)},
        BorderRightWidth:    0,
        BorderBottomWidth:   #{pfe-var(surface--border-width)}
      );
    }
    @else { // Expanded state
      $variables: (
        BackgroundColor:  rgba(255, 255, 255, .1),
        Color:            #{pfe-apply-broadcast(text)},
        BorderColor:      #{pfe-color(surface--border)},
        BorderColor--accent: #{pfe-color(ui-base--on-saturated)}
      );
    }
  }
  @else { // Light theme
    @if $state != expanded { // Default state
      $variables: (
        accent:              #{pfe-color(ui-base)},
        BorderColor--accent: transparent,
        BorderColor:         #{pfe-color(surface--border)},
        BorderTopWidth:      #{pfe-var(surface--border-width)},
        BorderRightWidth:    0,
        BorderBottomWidth:   #{pfe-var(surface--border-width)}
      );
    }
    @else { // Expanded state
      $variables: (
        BackgroundColor:     rgba(255, 255, 255, 1),
        Color:               #{pfe-apply-broadcast(text)},
        BorderColor:         #{pfe-color(surface--border)},
        BorderColor--accent: #{pfe-color(ui-base)},
        BorderRightWidth:    #{pfe-var(surface--border-width)}
      );
    }
  }

  @include pfe-set-local($variables);
}

@mixin pfe-accordion-props($align: left) {
  margin: 0;
  width: #{pfe-local($cssvar: Width, $fallback: 100%)};
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: #{pfe-local($cssvar: BackgroundColor, $fallback: transparent)};
  color:            #{pfe-local($cssvar: Color, $fallback: #{pfe-apply-broadcast(text)})};

  // Border settings
  border-top:       #{pfe-local($cssvar: BorderTopWidth, $fallback: #{pfe-var(surface--border-width)}) pfe-var(surface--border-style) pfe-local($cssvar: BorderColor, $fallback: #{pfe-color(surface--border)})};
  border-right:     #{pfe-local($cssvar: BorderRightWidth, $fallback: #{pfe-var(surface--border-width)}) pfe-var(surface--border-style) pfe-local($cssvar: BorderColor, $fallback: transparent)};
  border-bottom:    #{pfe-local($cssvar: BorderBottomWidth, $fallback: #{pfe-var(surface--border-width)}) pfe-var(surface--border-style) pfe-local($cssvar: BorderColor, $fallback: #{pfe-color(surface--border)})};
  border-left:      #{pfe-local($cssvar: BorderLeftWidth, $fallback: #{pfe-var(surface--border-width--heavy)}) pfe-var(surface--border-style) pfe-local($cssvar: (BorderColor, accent), $fallback: transparent)};

  box-shadow: #{pfe-local(BoxShadow)};

  &:hover {
    @include pfe-set-local((
      BorderColor--accent: #{pfe-local(accent)}
    ));
  }
}

//-- Trigger-specific properties
@mixin pfe-trigger($align: left) {
  $chevron--spacing: 50px;

  $variables: (
    BorderBottomWidth: 0
  );

  @include pfe-set-local($variables);
  @include pfe-accordion-props($align: #{$align});

  // -webkit-appearance: button;
  cursor: pointer;
  z-index: 1;

  font-family: inherit;
  font-size:   #{pfe-local($cssvar: FontSize--header, $fallback: calc(#{pfe-var(font-size)} * 1.1))};
  font-weight: #{pfe-var(font-weight--bold)};
  text-align:  #{pfe-local($cssvar: TextAlign, $fallback: left)};
  line-height: #{pfe-var(line-height)};

  @if $align == right {
      padding: #{pfe-var(container-spacer)} calc(#{pfe-var(container-spacer)} * 1.5) #{pfe-var(container-spacer)} #{$chevron--spacing} !important;
  } @else {
      padding: #{pfe-var(container-spacer)} #{$chevron--spacing} #{pfe-var(container-spacer)} calc(#{pfe-var(container-spacer)} * 1.5) !important;
  }

  &:hover {
    outline: none;
    z-index: 2;
  }

  &:focus {
      outline: none;
      z-index: 2;
      text-decoration: underline;
  }

  &::-moz-focus-inner {
      border: 0;
  }
}

@mixin pfe-trigger-last($theme: light) {
  @include pfe-set-local((
    BorderBottomWidth: #{pfe-var(surface--border-width)}
  ));
}

//-- Panel-specific properties
@mixin pfe-panel($theme: light) {
  $variables: ();

  @if $theme == "light" { // Light theme
    $variables: (
      BorderTopWidth: 0,
      BoxShadow: 0 5px #{pfe-var(surface--border-width--heavy)} rgba(140, 140, 140, 0.35)
    );
  }
  @else {
    $variables: (
      BorderTopWidth: 0,
      BoxShadow: none
    );
  }

  @include pfe-set-local($variables);
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron($state: open, $position: after, $size: .4em) {
  content: "";
  position: absolute;
  top: calc((#{pfe-var(container-spacer)} * .75) + #{$size});
  display: block;
  border-style: #{pfe-var(surface--border-style)};
  height: #{$size};
  width:  #{$size};
  text-align: center;
  transition: transform 0.15s;
  @if $state == open {
    border-width: .1em .1em 0 0;
    border-bottom: 0;
    transform: rotate(-45deg);
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.5);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.5);
    }
  }
  @else {
    border-width: 0 .1em .1em 0;
    transform: rotate(45deg);
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.5);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.5);
    }
  }
}