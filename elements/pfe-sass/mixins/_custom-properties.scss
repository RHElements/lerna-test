// New broadcast mixin, for use with content components
//  1st arg:  Look up values from theme contexts, i.e. "light" or "saturated"
//  2nd arg:  Optionally specify only one broadcast variable instead of the whole set, i.e. "text"
//
//  usage:
//    :host {
//      #{pfe-set-broadcast-theme(dark)};
//    }
//  result:
//    :host {
//      --pfe-broadcasted--color--text:            #{pfe-color(text--on-dark)};
//      --pfe-broadcasted--color--link:            #{pfe-color(link--on-dark)};
//      --pfe-broadcasted--color--link--visited:   #{pfe-color(link--visited--on-dark)};
//      --pfe-broadcasted--color--link--hover:     #{pfe-color(link--hover--on-dark)};
//      --pfe-broadcasted--color--link--focus:     #{pfe-color(link--focus--on-dark)};
//    }

@mixin pfe-set-broadcast-theme($theme, $broadcast: $BROADCAST-VARS) {
    @each $type in $broadcast {
        $list: ();
        $string: "";
        $context: "";
        $state: "";

        @if $type == "link" {
            $list: append($list, "#{$type}");

            @each $s in (hover, focus, visited) {
                $state: "--#{$s}";
                $string: "#{$type}#{$state}";

                @if not index($list, $string) {
                    $list: append($list, "#{$type}#{$state}");
                }
            }
        }
        @else {
            @if not index($list, $string) {
                $list: append($list, "#{$type}");
            }
        }

        @if index($THEMES, $theme) != null {
            @if $theme != "light" {
                $context: "--on-#{$theme}";
            }
        }
        
        @each $item in $list {
            @if not index($BROADCAST-VARS, $type) {
                @error "--#{$repo}-broadcasted--color--#{$item} variable is not in the $BROADCAST-VARS list.";
            }
            @else if type-of(map-get($pfe-colors, #{$item})) != "color" {
                @error "#{$item} value does not currently exist.";
            }
            @else {
                @if index($THEMES, $theme) != null {
                    --#{$repo}-broadcasted--color--#{$item}: #{pfe-color(#{$item}#{$context})};
                }
                @else {
                    --#{$repo}-broadcasted--color--#{$item}: #{$theme};
                }
            }
        }
    }
}

/// Define local variable
///
/// Returns CSS Variable for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $value - The value of the css variable being defined
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @use -
///     ```
///     :host {
///         padding-top:      #{pfe-local(paddingTop`)};
///         padding-bottom:   #{pfe-local(paddingBottom)};
///     }
///     ```

@mixin pfe-set-local($variables) {
    @each $property, $value in $variables {
        $name: "--#{$property}";
        $styles: $value;

        @if type-of($value) == "map" {
            @each $prop, $v in $value {
                $name: "__#{$property}--#{$prop}";
                $styles: $v;

                // Print the variable definition
                --#{$repo}-#{$LOCAL}#{$name}: #{$styles};
            }
        }
        @else {
            // Print the variable definition
            --#{$repo}-#{$LOCAL}#{$name}: #{$styles};
        }
    }
}

// Alias for pfe-set-local
@mixin print-variables-map($variables) {
    @include pfe-set-local($variables);
}


/// ===========================================================================
/// Theme Color Vars   - use with on="dark" to affect light DOM
/// ===========================================================================
@mixin pfe-theme($theme) {
    // GENERAL CONTEXT-BASED UPDATES, ON="DARK"
    @if $theme in (dark, darker, darkest) {
        @include pfe-set-broadcast-theme(dark);
    }

    @else if $theme in (accent, complement) {
        @include pfe-set-broadcast-theme(saturated);
    }

    @else if $theme in (light, lighter, lightest) {
        @include pfe-set-broadcast-theme(light);
    }
}

/// ===========================================================================
/// Surface properties   - prints pfe-color attributes + theme context
/// - Optional inputs:
///  * surfaces - defaults to the global $SURFACES list of all supported colors
///  * attr-name - defaults to pfe-color
/// ===========================================================================
@mixin surfaces($surfaces: $SURFACE, $attr-name: pfe-color) {
    @each $color in $surfaces {
        $theme: #{pfe-get-theme(surface--#{$color}--theme)};
        :host([#{$attr-name}="#{$color}"]) {
            @include pfe-set-local(
                ( BackgroundColor: #{pfe-color(surface--#{$color})} )
            );
            --theme: #{$theme};
        }
    }
}

/// ===========================================================================
/// Context properties   - prints the on attributes with IE11 fallbacks
/// - Optional inputs:
///  * themes - defaults to the global $THEMES list of all supported contexts
///  * fallback - defaults to true, prints IE11 fallbacks
/// ===========================================================================
@mixin theme-contexts($themes: $THEMES, $fallback: true) {
    // Helper attributes to aid in theming
    @each $theme in $themes {
        :host([on="#{$theme}"]) {
            @include pfe-set-broadcast-theme($theme);
            @if $fallback {
                @include browser-query(ie11) {
                    @if $theme == "light" {
                        color: #{pfe-color(text)};
                    }
                    @else {
                        color: #{pfe-color(text--on-#{$theme})};
                    }
                }
            }
        }
    }
}
