@mixin browser-query($browser-list) {
  @each $browser in $browser-list {
    @if $browser == ie11 {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */
        @content;
      }
    }
    @if $browser == edge12 {
      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */
        @content;
      }
    }
    @if $browser == edge {
      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */
        @content;
      }
    }
    @if $browser == firefox {
      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */
        @content;
      }
    }
  }
}

@mixin pfe-transition($properties...) {
  $return: null;
  @each $property in $properties {
    @if length($property) == 1 {
      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);
    }
    @else if length($property) == 2 {
      $return: append($return, nth($property, 1) nth($property, 2), comma);
    }
  }
  transition: $return;
}

// Make a CSS arrow
@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {
  $direction: (
    up: 180deg,
    down: 0deg,
    right: -90deg,
    left: 90deg,
  );
  border-style: pfe-var(surface--border-style);
  border-width: $width $height 0;
  border-color: transparent;
  border-top-color: $color;
  transform: rotate(map-get($direction, $type));
  @if $pseudo {
    display: inline-block;
    content: "";
    @content;
  }
}

@mixin pfe-arrow-color($color) {
  border-top-color: $color;
}

@mixin pfe-print-media {
  @media print {
    @content;
  }
}

@mixin pfe-print-background {
  -webkit-print-color-adjust: exact;
  color-adjust: exact;
}

@mixin pfe-no-print-background {
  @include pfe-print-media {
    background-color: white !important;
    background-image: none !important;
    box-shadow: none !important;
  }
}

@mixin pfe-hidden {
  @at-root #{&}([hidden]) {
    display: none;
  }
}

@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {
  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;
  border-#{$position}-color: $color;
  @if $position == right {
    padding-left: $padding;
    margin-right: $margin;
  }
  @else if $position == left {
    padding-right: $padding;
    margin-left: $margin;
  }
}

@mixin pfe-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

@mixin pfe-icon($path, $display: flex, $size: 1em) {
  display: #{$display};
  @if $path {
    background: #{$path} no-repeat;
    background-size: contain;
    background-position: center;
  }
  width: #{$size};
  height: #{$size};
  @content;
}

@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {
  :root {
      @include pfe-print-local($map);
  }
}

/// Print clear styles for slotted tags
/// @author castastrophee
/// Returns slotted tags with clear properties to counteract standard browser, bootstrap, or normalize styles
///
/// @param {List} $properties [(margin, padding)] - Properties to use for the clear styles.
/// @param {List} $tags [(p, h1, h2, h3, h4, h5, h6)]- Tags that should be targeted for clearing.
/// @param {Boolean} $important [false] - Use !important or not.
/// @param {String} $selector [null] - A pseudo-selector such as "last-child" to target.
/// @example scss
/// :host {
///   @include pfe-clear-spacing($properties: margin-bottom, $important: true);
/// }
/// @example css  - Rendered result
/// :host {
///   ::slotted(p) { margin-bottom: 0 !important; }
///   ::slotted(h1) { margin-bottom: 0 !important; }
///   ::slotted(h2) { margin-bottom: 0 !important; }
///   ::slotted(h3) { margin-bottom: 0 !important; }
///   ::slotted(h4) { margin-bottom: 0 !important; }
///   ::slotted(h5) { margin-bottom: 0 !important; }
///   ::slotted(h6) { margin-bottom: 0 !important; }
///   }
/// }
///
@mixin pfe-clear-spacing($properties: (margin, padding), $tags: (p, h1, h2, h3, h4, h5, h6), $important: false, $selector: null) {
  // Iterate over provided html tags, attach selector if provided
  @each $tag in $tags {
      ::slotted(#{$tag}#{if($selector, unquote(":#{$selector}"), null)}) {
          // Iterate over provided properties, default is margin and padding
          @each $prop in $properties {
              #{$prop}: 0#{if($important, unquote(" !important"), null)};
          }
      }
  }
}