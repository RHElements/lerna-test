// $boxSize = any box-sizing property, default is border-box
@mixin pfe-box-sizing($boxSize: border-box) {
  *, *::before, *::after {
    box-sizing: $boxSize;
  }
}

@mixin pfe-clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin pfe-reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin pfe-reset-box() {
  margin: 0;
  padding: 0;
}

@mixin pfe-sr-only() {
  position: absolute;
  overflow: hidden;
  clip: rect(0,0,0,0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/// ===========================================================================
/// Theme Color Vars   - use with on="dark" to affect light DOM
/// ===========================================================================

@mixin pfe-theme($theme) {
  // GENERAL CONTEXT-BASED UPDATES, ON="DARK"
  @if $theme == dark {
    --pfe-broadcasted--color--text:               #{pfe-color(text--on-dark)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(ui-link--on-dark)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(ui-link--on-dark--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(ui-link--on-dark--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(ui-link--on-dark--focus)};
  }
  @else if $theme == light {
    --pfe-broadcasted--color--text:               #{pfe-color(text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(ui-link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(ui-link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(ui-link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(ui-link--focus)};
  }
  // MORE SPECIFIC COLOR BASED UPDATES, COLOR="DARKER"
  @else if $theme == darker {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darker--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darker--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darker--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darker--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darker--link--focus)};
  }
  @else if $theme == darkest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darkest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darkest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darkest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darkest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darkest--link--focus)};
  }
  @else if $theme == accent {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--accent--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--accent--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--accent--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--accent--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--accent--link--focus)};
  }
  @else if $theme == complement {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--complement--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--complement--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--complement--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--complement--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--complement--link--focus)};
  }

  @else if $theme == lighter {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lighter--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lighter--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lighter--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lighter--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lighter--link--focus)};
  }
  @else if $theme == lightest {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--lightest--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lightest--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lightest--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lightest--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lightest--link--focus)};
  }
}

@mixin pfe-transition($properties...) {
  $return: null;
  @each $property in $properties {
    @if length($property) == 1 {
      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);
    }
    @else if length($property) == 2 {
      $return: append($return, nth($property, 1) nth($property, 2), comma);
    }
  }
  transition: $return;
}

// Make a CSS arrow
@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {
  $direction: (
    up: 180deg,
    down: 0deg,
    right: -90deg,
    left: 90deg,
  );
  border-style: #{pfe-var(surface--border-style)};
  border-width: $width $height 0;
  border-color: transparent;
  border-top-color: $color;
  transform: rotate(map-get($direction, $type));
  @if $pseudo {
    display: inline-block;
    content: "";
    @content;
  }
}

@mixin pfe-arrow-color($color) {
  border-top-color: $color;
}

@mixin pfe-print-media {
  @media print {
    @content;
  }
}

@mixin pfe-print-background {
  -webkit-print-color-adjust: exact;
  color-adjust: exact;
}
// scss-lint:disable ImportantRule
@mixin pfe-no-print-background {
  @include pfe-print-media {
    background-color: white !important;
    background-image: none !important;
    box-shadow: none !important;
  }
}
// scss-lint:enable ImportantRule

@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {
  border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;
  border-#{$position}-color: $color;
  @if $position == right {
    padding-left: $padding;
    margin-right: $margin;
  }
  @else if $position == left {
    padding-right: $padding;
    margin-left: $margin;
  }
}

@mixin pfe-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

@mixin browser-query($browser-list) {
  @each $browser in $browser-list {
    @if $browser == ie11 {
      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
        @content;
      }
    }
  }
}

// Mixin for building slot selectors
@mixin pfe-slot($slot-name, $selector: "") {
  // This logic makes it much easier to style default slots in a loop
  // with named slots
  @if $slot-name != default {
    ::slotted([slot="#{$slot-name}"]#{$selector}) {
      @content;
    }
  }
  @else {
    ::slotted(*) {
      @content;
    }
  }
}
