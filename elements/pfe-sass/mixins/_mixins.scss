// $boxSize = any box-sizing property, default is border-box
@mixin pfe-box-sizing($boxSize: border-box) {
  *, *::before, *::after {
    box-sizing: $boxSize;
  }
}

@mixin pfe-clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin pfe-reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin pfe-reset-box() {
  margin: 0;
  padding: 0;
}

@mixin pfe-sr-only() {
  position: absolute;
  overflow: hidden;
  clip: rect(0,0,0,0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/// ===========================================================================
/// Theme Color Vars
/// ===========================================================================

@mixin pfe-theme($theme) {
  @if $theme == dark {
    --pfe-broadcasted--color--text:               #{pfe-color(surface--darker--text)};
    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darker--link)};
    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darker--link--visited)};
    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darker--link--hover)};
    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darker--link--focus)};
  }
}

@mixin pfe-transition($properties...) {
  $return: null;
  @each $property in $properties {
    @if length($property) == 1 {
      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);
    }
    @else if length($property) == 2 {
      $return: append($return, nth($property, 1) nth($property, 2), comma);
    }
  }
  transition: $return;
}

// Make a CSS arrow
@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {
  $direction: (
    up: 180deg,
    down: 0deg,
    right: -90deg,
    left: 90deg,
  );
  border-style: solid;
  border-width: $width $height 0;
  border-color: transparent;
  border-top-color: $color;
  transform: rotate(map-get($direction, $type));
  @if $pseudo {
    display: inline-block;
    content: "";
    @content;
  }
}

@mixin pfe-arrow-color($color) {
  border-top-color: $color;
}

@mixin pfe-print-media {
  @media print {
    @content;
  }
}

@mixin pfe-print-background {
  -webkit-print-color-adjust: exact;
  color-adjust: exact;
}
// scss-lint:disable ImportantRule
@mixin pfe-no-print-background {
  @include pfe-print-media {
    background-color: white !important;
    background-image: none !important;
    box-shadow: none !important;
  }
}
// scss-lint:enable ImportantRule

@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {
  border: 1px solid transparent;
  border-#{$position}-color: $color;
  @if $position == right {
    padding-left: $padding;
    margin-right: $margin;
  }
  @else if $position == left {
    padding-right: $padding;
    margin-left: $margin;
  }
}

@mixin pfe-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}


/// RH Define Vars
/// Helps define the CSS Var madness, making it easier for devs!
/// @param {String} $this-component-var - Component specific variable name
/// @param {String} $this-theme-var - Theme variable name
/// @param {String} $this-fallback - Fallback color
///
/// ---------------------------------------------------------------------------
///
/// SASS fallback based on PFElements style
/// $pfe-global[--context][--state][--PropertyCamelCase]

/// Theme level Var
/// --pfe-theme[--context][--state][--PropertyCamelCase]
/// --pfe-theme--heading--hover--BackgroundColor

/// Component Var for theming specific cases
/// --pfe-[component-block][__element][--context][--state][--PropertyCamelCase]
/// --pfe-teaser__title--link-color--visited
/// --pfe-teaser__subtitle--link-color--visited

/// Defined locally for sanity
/// --pfe-local-[component-block][__element][--context][--state][--PropertyCamelCase]
/// --pfe-local-cta--link-color--inverted
///
/// ---------------------------------------------------------------------------
///
///                     ↓ component,         ↓ theme,         ↓ fallback
@mixin pfe-define-vars($this-component-var, $this-theme-var, $this-fallback) {
  --pfe-local-#{$this-component-var}: var(--pfe-#{$this-component-var}, var(--pfe-theme--#{$this-theme-var}, #{$this-fallback}));
}

// Mixin for building slot selectors
@mixin pfe-slot($slot-name, $selector: "") {
  // This logic makes it much easier to style default slots in a loop
  // with named slots
  @if $slot-name != default {
    ::slotted([slot="#{$slot-name}"]#{$selector}) {
      @content;
    }
  }
  @else {
    ::slotted(*) {
      @content;
    }
  }
}
/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

$pfe-expand_button--LineHeight:      1.5;
$pfe-expand_chevron--size:           0.313em;
$pfe-expand_chevron--weight:         0.15em;
$pfe-expand_chevron--placement:      ($pfe-expand_button--LineHeight / 2) - ($pfe-expand_chevron--size / 2);
$pfe-expand_button--padding-factor:  0.75;
$pfe-expand_button--border-dark:     #979797;
$pfe-expand_button--padding: calc(#{pfe-var(container-spacer)} * #{$pfe-expand_button--padding-factor});

@mixin pfe-trigger-button($theme: light, $align: left) {
    margin: 0;
    width: 100%;
    height: auto;
    border: 1px solid transparent;
    font-family: inherit;
    font-size: #{pfe-var(font-size)};
    font-weight: 700;
    line-height: $pfe-expand_button--LineHeight;
    text-align: left;
    background: none;
    cursor: pointer;
    color: var(--pfe-expanded--aux);
    z-index: 2;
    position: relative;

    @if $theme == dark {
        border-top-color: $pfe-expand_button--border-dark;
    }
    @else {
        border-top-color: #{pfe-color(surface--border--lightest)};
    }

    @if $theme == right {
        padding: $pfe-expand_button--padding $pfe-expand_button--padding $pfe-expand_button--padding 50px;
    }
    @else {
        padding: $pfe-expand_button--padding 50px $pfe-expand_button--padding $pfe-expand_button--padding;
    }

    &:focus {
        outline: 1px solid var(--pfe-expanded--focus);
    }

    &::-moz-focus-inner {
        border: 0;
    }
}

@mixin pfe-trigger-button-last($theme: light) {
    @if $theme == dark {
        border-bottom-color: $pfe-expand_button--border-dark; // use a var here
    }
    @else {
        border-bottom-color: #{pfe-color(surface--border--lightest)}; // use a var here
    }
}

@mixin pfe-trigger-expanded {
    position: relative;
    display: block;
}

@mixin pfe-trigger-color-light {
    --pfe-expanded--main:         transparent;
    --pfe-expanded--aux:          #{pfe-color(surface--lightest--text)};
    --pfe-expanded--focus:        #{pfe-color(surface--lightest--link--focus)};
}

@mixin pfe-trigger-color-light-expanded {
    --pfe-expanded--main:         #{pfe-color(surface--lightest)};
    --pfe-expanded--aux:          #{pfe-color(surface--lightest--text)};
    --pfe-expanded--focus:        #{pfe-color(surface--lightest--link--focus)};
    --pfe-expanded--border-left:  #{pfe-color(ui-link)};
}

@mixin pfe-trigger-color-dark {
    --pfe-expanded--main:         transparent;
    --pfe-expanded--aux:          #{pfe-color(surface--darkest--text)};
    --pfe-expanded--focus:        #{pfe-color(surface--darker--link--focus)};
}

@mixin pfe-trigger-color-dark-expanded {
    --pfe-expanded--main:         #{pfe-color(surface--darker)};
    --pfe-expanded--aux:          #{pfe-color(surface--darkest--text)};
    --pfe-expanded--focus:        #{pfe-color(surface--darker--link--focus)};
    --pfe-expanded--border-left:  #{pfe-color(surface--lightest)};
}

@mixin pfe-trigger-color-light-borders {
    border-top-color: #{pfe-color(surface--border--lightest)};
    border-right-color: #{pfe-color(surface--border--lightest)};
    border-left-color: transparent;
}

@mixin pfe-container {
  position: relative;
  display: block;
  width: 100%;

  // Padding 
  padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};

  @media (min-width: #{pfe-breakpoint(sm)}) {
    padding: #{pfe-local(Padding)};
  }
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron-expanded-false($position: after) {
    content: "";
    position: absolute;
    top: calc((#{pfe-var(container-spacer)} * #{$pfe-expand_button--padding-factor}) + #{$pfe-expand_chevron--placement} );
    display: block;
    border-style: solid;
    border-width: 0 $pfe-expand_chevron--weight $pfe-expand_chevron--weight 0;
    height: $pfe-expand_chevron--size;
    width: $pfe-expand_chevron--size;
    text-align: center;
    transition: transform 0.15s;
    transform: rotate(-135deg);
    @if $position == before {
      left: #{pfe-var(container-spacer)};
    }
    @else {
      right: #{pfe-var(container-spacer)};
    }
}

@mixin pfe-chevron-expanded-true($position: after) {
    content: "";
    position: absolute;
    top: calc((#{pfe-var(container-spacer)} * #{$pfe-expand_button--padding-factor}) + #{$pfe-expand_chevron--placement} );
    display: block;
    width: $pfe-expand_chevron--size;
    height: $pfe-expand_chevron--size;
    border-style: solid;
    border-width: $pfe-expand_chevron--weight $pfe-expand_chevron--weight 0 0;
    text-align: center;
    border-bottom: 0;
    transition: all 0.15s;
    transform: rotate(135deg);
    @if $position == before {
      left: #{pfe-var(container-spacer)};
    }
    @else {
      right: #{pfe-var(container-spacer)};
    }
}

@mixin pfe-accordion-panel {
  display: none;
  overflow: hidden;
  will-change: height;
  border-color: transparent;
}

@mixin pfe-accordion-panel-expanded($theme: light) {
  display: block;
  position: relative;
  border-width: 0;
  border-left-width: 3px;
  border-style: solid;
  @if $theme == dark {
    border-color: $pfe-color--white;
    background: #{pfe-color(surface--darker)};
  }
  @else {
    box-shadow: 0 5px 3px rgba(140, 140, 140, 0.35);
    border-color: $pfe-color--ui-link;
    background: #{pfe-color(surface--lightest)};
  }
}

@mixin pfe-accordion-panel-expanded-last-dark {
    border-bottom: 1px solid $pfe-expand_button--border-dark;
}

@mixin pfe-accordion-panel-container($theme: light) {
  padding: 0 #{pfe-var(container-spacer)} #{pfe-var(container-spacer)} #{pfe-var(container-spacer)};
  overflow: hidden;
  @if $theme == light {
    border-right: 1px solid #{pfe-color(surface--border--lightest)};
    border-bottom: 1px solid #{pfe-color(surface--border--lightest)};
  }
  @else {
    color: white;
  }
}
