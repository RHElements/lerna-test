@import "../maps/_typography";

/// Mixin for creating an accessible focus state
/// @param {Color} $color [$pfe-color--link]
/// @see {variable} $pfe-color--link
/// @example - scss
///   @include pfe-accessibility-focus($pfe-color--link--on-dark);
@mixin pfe-accessibility-focus($color: $pfe-color--link) {
  outline-offset: 1px;
  outline-style: dotted;
  outline-width: 1px;
  text-decoration: none !important;

  @if type-of($color) ==color {
    outline-color: $color;
  }
}

@mixin pfe-underline($color: default-link-hover-line, $opacity: 1) {
  text-decoration: underline;
  text-decoration-skip: ink;
}

/// Mixin for authors outside of PFE to control spacing between content
/// @group typography
/// @param {*} $sizing [lg, md, sm] 
/// @param {*} $type [heading, body] 
/// @example - scss
///   @include pfe-content--text--spacing-block(sm);
@mixin pfe-content--text--spacing-block($sizing: md, $type: body) {
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--#{$type}--#{$sizing}); //16px
    }
} 

/// Mixin for authors outside of PFE to customize block level elements
/// The variable stack includes a hook just for headings when they appear in the 
/// light DOM within components: --pf-c--FontSize
///
/// Components can't control the font size of block level elements like HTML headings 
/// when they are in the light DOM.  A component _could_ redefine the variables for 
/// standard headings by using the variable hooks such as: `--pf-c--content--h4--FontSize` 
/// but it can't know if the light DOM might contain an H1, H2, H3, etc. it shouldn't
/// redefine the variables for all possible headings. Instead, there is one dedicated
/// variable for this purpose. 
/// @group typography
/// @param {*} $sizing [h1, h2, h3, h4, h5, h6, p, small] 
/// @example - scss
///  .project-wrapper h3  {
///      @include pfe-title(xl); 
///  }
/// @example - css
///  .project-wrapper  h3 {
///    font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///    font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///    line-height: 1.3;
///    line-height: var(--pfe-theme--line-height--heading, 1.3);
///    font-weight: 500;
///    font-weight: var(--pfe-theme--font-weight--normal, 500);
///    font-size: 1.25rem;
///    font-size: var(--pf-c--FontSize, var(--pf-c--content--h3--FontSize, var(--pf-global--FontSize--xl, 1.25rem)));
///  }
@mixin pfe-content ($element: "p"){
    // TEXT
    @if $element == "p" or $element == "small" {
        // Extend includes: line height, weight, font family
        @extend %pfe-content-base;

        // Accomodate for irregular variable naming
        @if $element == "p" {
            font-size: var(--pf-c--FontSize, pfe-var(content--FontSize));
        }
        @else {
            font-size: var(--pf-c--FontSize, pfe-var(content--#{$element}--FontSize));
        }
        // spacing
        @include pfe-content--text--spacing-block(sm);
    } 
    @else { // HEADINGS
        font-family: pfe-var(font-family--heading);
        line-height: pfe-var(line-height--heading);
        font-weight: pfe-var(font-weight--normal);

        font-size: var(--pf-c--FontSize, #{pfe-var(content--#{$element}--FontSize)});
        // spacing
        @include pfe-content--text--spacing-block(sm, heading);
    }
}



/// Mixin to generate a typography stack - font-family, font-size, line-height, font-weight
/// and spacing between elements. It accepts a few inputs and determines what variable stack
/// and CSS properties to output.
/// @group typography
/// @param {String} $sizing [xl] - Human-readable description for the font-size of the stack you are building.
/// @param {String} $type [title] - Describes the type of element being created and determines which variable stack to pull from. Also accepts "text".
/// @param {Bool} $base [false] - Do you want to include base typography properties such as font-family, font-weight, and line-height? Currently only used by $type: text.
/// @param {Bool} $important [false] - Boolean value for if properties need to be postfixed with `!important`. Use of `!important` is only recommended for utility classes.
/// @param {Boolean} $use-local [true] - This will print a local variable at the beginning of the variable stacks.
/// @param {String} $region [null] - For use with local variables only. For more about the regional designation, see pfe-var().
/// @param {Boolean} $light-dom-heading: [false] - Print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss.
/// @requires {function} pfe-var
/// @requires {function} pfe-local
/// @requires {variable} $pf-title-set--mega
/// @requires {variable} $pf-title-set--regular
/// @requires {variable} $pf-title-set--tiny
/// @example - scss - Basic example for 4xl title typography set
///  .custom-header  {
///      @include pfe-typography(4xl); 
///  }
/// @example - css - Rendered result
///  .custom-header  {
///      font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///      font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///      font-size: 2.25rem;
///      font-size: var(--pf-c--title--m-4xl--FontSize, var(--pf-global--FontSize--4xl, 2.25rem));
///      line-height: 1.5;
///      line-height: var(--pfe-theme--line-height, 1.5);
///      font-weight: 500;
///      font-weight: var(--pfe-theme--font-weight--normal, 500);
///  }
///  .custom-header:not(:last-child) {
///    margin-bottom: 1rem;
///    margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);
///  }
/// @example - scss - Basic example for xl text typography set
///  .custom-summary-teaser  {
///      @include pfe-typography(xl, text); 
///  }
/// @example - css - Rendered result
/// .custom-summary-teaser {
///   font-family: "Red Hat Text", "RedHatText", "Overpass", Overpass, Arial, sans-serif;
///   font-family: var(--pfe-theme--font-family, "Red Hat Text", "RedHatText", "Overpass", Overpass, Arial, sans-serif);
///   line-height: 1.5;
///   line-height: var(--pfe-theme--line-height, 1.5);
///   font-weight: 400;
///   font-weight: var(--pfe-theme--font-weight--light, 400);
///   font-size: 1.25rem;
///   font-size: var(--pf-c--text--m-xl--FontSize, var(--pf-global--FontSize--xl, 1.25rem));
/// }
/// 
/// .custom-summary-teaser:not(:last-child):not(:empty) {
///   margin-bottom: 1rem;
///   margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);
/// }
/// @example - scss - Custom heading with hook for headings that may be in the light DOM
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     @include pfe-typography(6xl, $light-dom-heading: true);
///   }
/// @example - css - Rendered result
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     --pf-c--FontSize: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));
///     font-size: 3rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.2));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
@mixin pfe-typography (
        $sizing: "xl", 
        $type: "title", 
        $base: false, 
        $important: false,
        $use-local: false,
        $region: null,
        $light-dom-heading: false
    ){

    // Ensure that even numerical entries are treated like strings, "6xl" vs. 6xl
    $sizing: "#{$sizing}";

    // Adds !important to the end of the property; useful for utility classes only. Use with caution.
    $rules: "";
    @if $important {
        $rules: " !important";
    }
    // Text / body copy typography!
    @if $type == "text" {  
        @if $base {  // these styles are ordinarily inherited from the body tag, but some projects may need extra specificity
            font-family: pfe-var(font-family)#{$rules};
            line-height: pfe-var(line-height)#{$rules};
            font-weight: pfe-var(font-weight--light)#{$rules};
        }
        font-size:   pfe-var(text--m-#{$sizing}--FontSize)#{$rules};
        &:not(:last-child):not(:empty) {
            margin-bottom: pfe-var(content-spacer--body--md)#{$rules}; //16px
        }
    }
    // Title typography!
    @else {
        // this CSS custom property is an extra hook for components to override things, like .pfe-card { --pf-c-FontSize: 32px; }
        @if $use-local and $light-dom-heading {
            --pf-c--FontSize: #{pfe-local(FontSize)};
        }

        font-family: pfe-var(font-family--heading);

        // Capture the values of properties to use directly or wrapped in the pfe-local function below
        $font-size: pfe-var(title--m-#{$sizing}--FontSize);

        // Initialize variables at the $pf-title-set--tiny size
        // $sizing == "lg" or "md" or "sm" or "xs" 
        $line-height: pfe-var(line-height);
        $font-weight: pfe-var(font-weight--normal);
        $margin-bottom: pfe-var(content-spacer--heading--sm);

        @if index($pf-title-set--mega, $sizing) != null {
            $line-height: pfe-var(line-height--heading-mega);
            $font-weight: pfe-var(font-weight--light);
            $margin-bottom: pfe-var(content-spacer--heading--md);
        }
        // $sizing == "4xl" or "3xl" or "2xl" 
        @else if index($pf-title-set--regular, $sizing) != null {
            $line-height: pfe-var(line-height--heading);
            $font-weight: pfe-var(font-weight--normal);
            $margin-bottom: pfe-var(content-spacer--heading--sm);
        }
        // If this value was not found in the tiny set, it's likely not supported
        @else if index($pf-title-set--tiny, $sizing) == null {
            @warn "#{$sizing} was not found in $pf-title-set--mega, $pf-title-set--regular, or $pf-title-set--tiny.";
        }
        
        // For component use, this option allows the mixin to use values set in the component level map
        @if $use-local {
            font-size: pfe-local(FontSize, $font-size, $region)#{$rules};
            line-height: pfe-local(LineHeight, $line-height, $region)#{$rules};
            font-weight: pfe-local(FontWeight, $font-weight, $region)#{$rules};
            &:not(:last-child) {
                margin-bottom: pfe-local(MarginBottom, $margin-bottom, $region)#{$rules};
            }
        } @else {
            font-size: $font-size#{$rules};
            line-height: $line-height#{$rules};
            font-weight: $font-weight#{$rules};
            &:not(:last-child) {
                margin-bottom: $margin-bottom#{$rules};
            }
        }
    }
}
