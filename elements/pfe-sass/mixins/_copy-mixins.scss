@import "../maps/_typography";


@mixin pfe-accessibility-focus($color: $link-color) {
  outline-offset: 1px;
  outline-style: dotted;
  outline-width: 1px;
  text-decoration: none !important;

  @if type-of($color) ==color {
    outline-color: $color;
  }
}

@mixin pfe-underline($color: default-link-hover-line, $opacity: 1) {
  text-decoration: underline;
  text-decoration-skip: ink;
}

/// Mixin for authors outside of PFE to control spacing between content
/// @param {*} $sizing [lg, md, sm] 
/// @param {*} $type [heading, body] 
/// @example - scss
/// @include pfe-content--text--spacing-block(sm);
@mixin pfe-content--text--spacing-block ( $sizing: "md", $type: "body" ) {
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--#{$type}--#{$sizing}); //16px
    }
} 

/// Mixin for authors outside of PFE to customize block level elements
/// The variable stack includes a hook just for headings when they appear in the 
/// light DOM within components: --pf-c--FontSize
///
/// Components can't control the font size of block level elements like HTML headings 
/// when they are in the light DOM.  A component _could_ redefine the variables for 
/// standard headings by using the variable hooks such as: `--pf-c--content--h4--FontSize` 
/// but it can't know if the light DOM might contain an H1, H2, H3, etc. it shouldn't
/// redefine the variables for all possible headings. Instead, there is one dedicated
/// variable for this purpose. 
/// @param {*} $sizing [h1, h2, h3, h4, h5, h6, p, small] 
/// @example - scss
///  .project-wrapper h3  {
///      @include pfe-title(xl); 
///  }
/// @example - css
///  .project-wrapper  h3 {
///    font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///    font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///    line-height: 1.3;
///    line-height: var(--pfe-theme--line-height--heading, 1.3);
///    font-weight: 500;
///    font-weight: var(--pfe-theme--font-weight--normal, 500);
///    font-size: 1.25rem;
///    font-size: var(--pf-c--FontSize, var(--pf-c--content--h3--FontSize, var(--pf-global--FontSize--xl, 1.25rem)));
///  }

@mixin pfe-content ( $element: "p" ){
    // TEXT
    @if $element == "p" or $element == "small" {
        // line height, weight, font family
        @extend %pfe-content-base;
        // spacing
        @include pfe-content--text--spacing-block(sm);
        // accomodate for irregular variable naming
        @if $element == "p" {
            font-size: var( --pf-c--FontSize, pfe-var(content--FontSize));
        }
        @else {
            font-size: var( --pf-c--FontSize, pfe-var(content--#{$element}--FontSize));
        }
    } 
    @else { // HEADINGS
        font-family: pfe-var(font-family--heading);
        line-height: pfe-var(line-height--heading);
        font-weight: pfe-var(font-weight--normal);
        font-size: var( --pf-c--FontSize, pfe-var(content--#{$element}--FontSize));
        &:not(:last-child):not(:empty) {
            margin-bottom: pfe-var(content-spacer--heading--sm);  
        }
    } 
}



/// Typography Mixin  
/// @param {*} $sizing ["6xl", "5xl", "4xl", "3xl", "2xl", xl, lg, md, sm, xs] 
/// @param {*} $type [title, text]
/// @param {*} $base [true, false]  
/// @param {*} $important [true, false]  
/// @param {Boolean} $use-local [true] - This will print a local variable at the beginning of the variable stacks 
/// @param {String} $region - For use with local variables only, you may include a nested region within the component variable map
/// @param {Boolean} $light-dom-heading: [false] - print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss
/// @example - scss
///  .custom-header  {
///      @include pfe-title(4xl); 
///  }
/// @example - css
///  .custom-header  {
///      font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///      font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///      font-size: 2.25rem;
///      font-size: var(--pf-c--title--m-4xl--FontSize, var(--pf-global--FontSize--4xl, 2.25rem));
///      line-height: 1.5;
///      line-height: var(--pfe-theme--line-height, 1.5);
///      font-weight: 500;
///      font-weight: var(--pfe-theme--font-weight--normal, 500);
///  }
///  .custom-header:not(:last-child) {
///    margin-bottom: 1rem;
///    margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);
///  }
/// @example - scss
///  .custom-summary-teaser  {
///      @include pfe-text(xl); 
///  }
/// @example - css
/// .custom-summary-teaser {
///   font-family: "Red Hat Text", "RedHatText", "Overpass", Overpass, Arial, sans-serif;
///   font-family: var(--pfe-theme--font-family, "Red Hat Text", "RedHatText", "Overpass", Overpass, Arial, sans-serif);
///   line-height: 1.5;
///   line-height: var(--pfe-theme--line-height, 1.5);
///   font-weight: 400;
///   font-weight: var(--pfe-theme--font-weight--light, 400);
///   font-size: 1.25rem;
///   font-size: var(--pf-c--text--m-xl--FontSize, var(--pf-global--FontSize--xl, 1.25rem));
/// }
/// 
/// .custom-summary-teaser:not(:last-child):not(:empty) {
///   margin-bottom: 1rem;
///   margin-bottom: var(--pfe-theme--content-spacer--body--md, 1rem);
/// }
/// @example - scss - Custom heading with hook for headings that may be in the light DOM
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     @include pfe-typography($size: "6xl", $light-dom-heading: true);
///   }
/// @example - css  - Rendered result
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     --pf-c--FontSize: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));
///     font-size: 3rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.2));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }

@mixin pfe-typography ( 
        $sizing: "xl", 
        $type: "title", 
        $base: false, 
        $important: false,
        $use-local: false,
        $region: null,
        $light-dom-heading: false
    ){
    // Adds !important to the end of the property; useful for utility classes only. Use with caution.
    $bang-important: "";
    @if $important == true {
        $bang-important: "!important";
    }
    // Text / body copy typography!
    @if $type == "text" {  
        @if $base == true {  // these styles are ordinarily inherited from the body tag, but some projects may need extra specificity
            font-family: pfe-var(font-family) #{$bang-important};
            line-height: pfe-var(line-height) #{$bang-important};
            font-weight: pfe-var(font-weight--light) #{$bang-important};
        }
        font-size:   pfe-var(text--m-#{$sizing}--FontSize) #{$bang-important};
        &:not(:last-child):not(:empty) {
            margin-bottom: pfe-var(content-spacer--body--md) #{$bang-important}; //16px
        }
    }
    // Title typography!
    @else { 
        font-family: pfe-var(font-family--heading);
        
        // For component use, this option allows the mixin to use values set in the component level map
        @if $use-local == true {
            // this CSS custom property is an extra hook for components to override things, like .pfe-card { --pf-c-FontSize: 32px; }
            @if $light-dom-heading == true {
                --pf-c--FontSize: #{pfe-local(FontSize)};
            }
            @if $region == true {
                $region: $region;
            }
            @if index($pf-title-set--mega, $sizing) != null {
                font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $sizing ) }) , #{$region});
                line-height: pfe-local( LineHeight, pfe-var(line-height--heading-mega) , #{$region});
                font-weight: pfe-local( FontWeight, pfe-var(font-weight--light) , #{$region});
                &:not(:last-child) {
                    margin-bottom: pfe-local( MarginBottom, pfe-var(content-spacer--heading--md) , #{$region});
                }
            }
            // $sizing == "4xl" or "3xl" or "2xl" 
            @else if index($pf-title-set--regular, $sizing) != null {
                font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $sizing ) }) , #{$region});
                line-height: pfe-local( LineHeight, pfe-var(line-height--heading) , #{$region});
                font-weight: pfe-local( FontWeight, pfe-var(font-weight--normal) , #{$region});
                &:not(:last-child) {
                    margin-bottom: pfe-local( MarginBottom, pfe-var(content-spacer--heading--sm) , #{$region});
                }
            }
            // $sizing == "lg" or "md" or "sm" or "xs" 
            @else if index($pf-title-set--tiny, $sizing) != null {
                font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $sizing ) }) , #{$region});
                line-height: pfe-local( LineHeight, pfe-var(line-height) , #{$region});
                font-weight: pfe-local( FontWeight, pfe-var(font-weight--normal) , #{$region});
                &:not(:last-child) {
                    margin-bottom: pfe-local( MarginBottom, pfe-var(content-spacer--heading--sm) , #{$region});
                }
            }
        } 
        @else {
            font-size:   pfe-var(title--m-#{$sizing}--FontSize);

            @if index($pf-title-set--mega, $sizing) != null {
                line-height: pfe-var(line-height--heading-mega) #{$bang-important};
                font-weight: pfe-var(font-weight--light) #{$bang-important};
                &:not(:last-child) {
                    margin-bottom: pfe-var(content-spacer--heading--md) #{$bang-important};
                }
            }
            // $sizing == "4xl" or "3xl" or "2xl" 
            @else if index($pf-title-set--regular, $sizing) != null {
                line-height: pfe-var(line-height--heading) #{$bang-important};
                font-weight: pfe-var(font-weight--normal) #{$bang-important};
                &:not(:last-child) {
                    margin-bottom: pfe-var(content-spacer--heading--sm) #{$bang-important};
                }
            }
            // $sizing == "lg" or "md" or "sm" or "xs" 
            @else if index($pf-title-set--tiny, $sizing) != null {
                line-height: pfe-var(line-height) #{$bang-important};
                font-weight: pfe-var(font-weight--normal) #{$bang-important};
                &:not(:last-child) {
                    margin-bottom: pfe-var(content-spacer--heading--sm) #{$bang-important};
                }
            }
        }
    }
}
