////
/// Tools for typography
/// @group Typography
/// @author starryeyez024
////

/// Spacing block abstracted for reuse
@mixin pfe-content--text--spacing-block ( $sizing: "md" ) {
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--body--#{$sizing}); //16px
    }
} 

/// Typography mixin for component use. This mixin allows you to request all typography styles with  optional hooks for local and light DOM variable overrides. Please note that the default type is "title", becaus most text won't need typographical styles, it will inherit from the body element. 
/// @param {String} $type [title]- Level of typography: either "text", "title", or "mega-title"
/// @param {String} $size  [2xl] - Enter a t-shirt size of your choosing: 6xl, 5xl, 4xl, 3xl, 2xl, xl, lg, md, sm, xs
/// @param {Boolean} $use-local [true] - This will print a local variable at the beginning of the variable stacks 
/// @param {String} $region - For use with local variables, you may include a nested region within the component variable map
/// @param {Boolean} $light-dom-cascade: [false] - print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss
/// @see $pf-type-sizing
/// @example scss - basic heading
///   .pfe-component--heading {
///     @include pfe-typography(5xl);
///   }
/// @example css - Rendered result
///   .pfe-component--heading {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 2.5rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--5xl, 2.5rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
/// @example scss - 
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     @include pfe-typography(title, 6xl, $use-local: false, $region: heading);
///   }
/// @example css - Rendered result
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 3rem;
///     font-size: var(--pfe-cta__heading--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.2;
///     line-height: var(--pfe-cta__heading--LineHeight, var(--pfe-theme--line-height--heading-mega, 1.2));
///     font-weight: 400;
///     font-weight: var(--pfe-cta__heading--FontWeight, var(--pfe-theme--font-weight--light, 400));
///   }
/// @example scss 
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     @include pfe-typography(title, 6xl, $light-dom-cascade: true);
///   }
/// @example css  - Rendered result
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     --pf-c--FontSize: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));
///     font-size: 3rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
///
@mixin pfe-typography (
    $type: title,
    $size: xl,
    $use-local: false,
    $region: null,
    $light-dom-cascade: false,
    $content-spacer: true,
    $props: (font-size, font-family, font-weight, line-height),
    $exclude-base: false
){
    $sizes: map-get($pf-typography-sets, $type);
    // Check that this type exists in the typography set
    @if type-of($sizes) != "map" or map-has-key($pf-typography-sets, $type) == false {
        // Throw an error if not found
        @error "#{$type} not found in the supported typography sets from $pf-typography-sets."
    } @else {
        $set: map-get($sizes, unquote($size));
        // Check that this size exists in the captured set
        @if type-of($set) != "map" or map-has-key($sizes, $size) == false {
            // Throw an error if not found
            @error "#{$size} not found in the supported #{$type} sizes."
        } @else {
            // Remove the base properties from the list if true
            @if $exclude-base == true {
                @each $prop in (font-family, font-weight, line-height) {
                    $props: remove($props, $prop);
                }
            }

            // Add the light DOM custom property if true and font-size is in the props list
            @if $light-dom-cascade and index($props, font-size) != null {
                $value: get-var-stack(FontSize, $set, $use-local, $region);
                // Result to be printed
                --pf-c--FontSize: #{$value};
            }

            @each $prop in $props {
                $bem: str-to-bem($prop);
                $value: get-var-stack($bem, $set, $use-local, $region);

                // Add the light DOM custom property if true and font-size is in the props list
                @if $light-dom-cascade and $prop == "font-size" {
                    --pf-c--#{$bem}: #{$value};
                }
                #{$prop}: #{$value};
            }

            // If the content-spacer boolean is true, clear the 
            @if $content-spacer {
                $value: get-var-stack(content-spacer, $set, $use-local, $region);
                &:not(:last-child):not(:empty) {
                    margin-bottom: #{$value};
                }
                // Can we use:
                // @include pfe-content--text--spacing-block($size); ?
            }
        }
    }
}

@mixin pfe-accessibility-focus($color: $link-color) {
  outline-offset: 1px;
  outline-style: dotted;
  outline-width: 1px;
  text-decoration: none !important;

  @if type-of($color) ==color {
    outline-color: $color;
  }
}

@mixin pfe-underline($color: default-link-hover-line, $opacity: 1) {
  text-decoration: underline;
  text-decoration-skip: ink;
}
