////
/// Tools for typography
/// @group Typography
/// @author starryeyez024
////

/// Typography mixin for component use. This mixin allows you to request all typography styles with  optional hooks for local and light DOM variable overrides. Please note that the default type is "title", becaus most text won't need typographical styles, it will inherit from the body element. 
/// @param {String} $size  [2xl] - Enter a t-shirt size of your choosing: 6xl, 5xl, 4xl, 3xl, 2xl, xl, lg, md, sm, xs
/// @param {String} $type [title]- Level of typography: either "text", "title", or "mega-title"
/// @param {Boolean} $use-local [true] - This will print a local variable at the beginning of the variable stacks 
/// @param {String} $region - For use with local variables, you may include a nested region within the component variable map
/// @param {Boolean} $light-dom-heading: [false] - print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss
/// @see $pf-type-sizing
/// @example scss - basic heading
///   .pfe-component--heading {
///     @include pfe-typography("5xl");
///   }
/// @example css - Rendered result
///   .pfe-component--heading {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 2.5rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--5xl, 2.5rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
/// @example scss - 
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     @include pfe-typography($size: "6xl", $type: "mega-title", $use-local: false, $region: "heading");
///   }
/// @example css - Rendered result
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 3rem;
///     font-size: var(--pfe-cta__heading--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.2;
///     line-height: var(--pfe-cta__heading--LineHeight, var(--pfe-theme--line-height--heading-mega, 1.2));
///     font-weight: 400;
///     font-weight: var(--pfe-cta__heading--FontWeight, var(--pfe-theme--font-weight--light, 400));
///   }
/// @example scss 
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     @include pfe-typography($size: "6xl", $light-dom-heading: true);
///   }
/// @example css  - Rendered result
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     --pf-c--FontSize: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));
///     font-size: 3rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
///
@mixin pfe-typography(
    $size: "2xl", 
    $type: "title",
    $use-local: true,
    $region: null,
    $light-dom-heading: false,
    ) {
    
    // FONT FAMILY
    // Does not use local variables; only global theme values
    @if $type == "text" {
        font-family: pfe-var(font-family);
    }
    @else {
        font-family: pfe-var(font-family--heading);
    }
    // TEXT
    // Lighter weight, larger line height, base font size
    @if $type == "text" {
        @if $region  {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{pfe-local(FontSize, $region: heading)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }), $region);
            line-height: pfe-local( LineHeight, pfe-var(line-height), $region );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--light), $region ); 
        }
        @else if $use-local {
            @if $light-dom-heading == true {
                --pf-c--FontSize: #{pfe-local(FontSize)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }) );
            line-height: pfe-local( LineHeight, pfe-var(line-height) );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--light) ); 
        } @else {
            @if $light-dom-heading == true {
                --pf-c--FontSize: #{ pfe-var(#{FontSize--}#{to-string( $size ) }) };
            }
            font-size:   pfe-var(#{FontSize--}#{to-string( $size ) });
            line-height: pfe-var(line-height);
            font-weight: pfe-var(font-weight--light);
            
        }
    } 
    // SUPER LARGE TITLE SIZES
    // Smaller line height, bolder weight 
    @else if $type == "mega-title" {
        @if $region  {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{pfe-local(FontSize, $region: heading)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }), $region);
            line-height: pfe-local( LineHeight, pfe-var(line-height--heading-mega), $region );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--light), $region ); 
        }
        @else if $use-local {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{pfe-local(FontSize)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }) );
            line-height: pfe-local( LineHeight, pfe-var(line-height--heading-mega) );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--light) ); 
        } @else {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{ pfe-var(#{FontSize--}#{to-string( $size ) }) };
            }
            font-size:   pfe-var(#{FontSize--}#{to-string( $size ) });
            line-height: pfe-var(line-height--heading-mega);
            font-weight: pfe-var(font-weight--light);
        }
    } 
    // REGULAR TITLE SIZES
    // Mid-range line height, normal weight
    @else {
        @if $region  {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{pfe-local(FontSize, $region: heading)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }), $region);
            line-height: pfe-local( LineHeight, pfe-var(line-height--heading), $region );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--normal), $region ); 
        }
        @else if $use-local {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{pfe-local(FontSize)};
            }
            font-size:   pfe-local( FontSize, pfe-var(#{FontSize--}#{to-string( $size ) }) );
            line-height: pfe-local( LineHeight, pfe-var(line-height--heading) );
            font-weight: pfe-local( FontWeight, pfe-var(font-weight--normal) ); 
        } @else {
            @if $light-dom-heading == true {
              --pf-c--FontSize: #{ pfe-var(#{FontSize--}#{to-string( $size ) }) };
            }
            font-size:   pfe-var(#{FontSize--}#{to-string( $size ) });
            line-height: pfe-var(line-height--heading);
            font-weight: pfe-var(font-weight--normal);
        }
    } 
}

@mixin pfe-accessibility-focus($color: $link-color) {
  outline-offset: 1px;
  outline-style: dotted;
  outline-width: 1px;
  text-decoration: none !important;

  @if type-of($color) ==color {
    outline-color: $color;
  }
}

@mixin pfe-underline($color: default-link-hover-line, $opacity: 1) {
  text-decoration: underline;
  text-decoration-skip: ink;
}


/// HTML TYPOGRAPHY

/// BASE LEVEL TYPOGRAPHY
/// for the body tag
@mixin pfe-text-base {
    font-family: pfe-var(font-family);
    font-weight: pfe-var(font-weight--light);
    line-height: pfe-var(line-height);
}

/// TEXT MODIFIER CLASSES
@mixin pfe-text ( $sizing: "md", $base: true) {
  // these styles are ordinarily inherited from the body tag, but some projects may need extra specificity
  @if $base == true {
      @include pfe-text-base;
  }
  &:not(:last-child):not(:empty) {
      margin-bottom: pfe-var(content-spacer--body--md); //16px
  }
  @if $sizing == "md" {
    font-size:   pfe-var(content--FontSize);
  }
  @else if $sizing == "sm" {
    font-size:   pfe-var(content--small--FontSize);
  }
  @else {
    font-size:   pfe-var(content--#{$sizing}--FontSize);
  }
}


// @TODO Tried using these but they aren't working in the mixin below
// $mega-titles: (6xl, 5xl);
// $regular-titles: (4xl, 3xl, 2xl, xl);
// $tiny-titles: (lg, md, sm, xs);

/// TITLE MODIFIER CLASSES
@mixin pfe-title ( $sizing: "xl" ){
    font-family: pfe-var(font-family--heading);
    font-size:   pfe-var(title--m-#{$sizing}--FontSize);
 
    @if $sizing == "6xl" or $sizing == "5xl" {
        line-height: pfe-var(line-height--heading-mega);
        font-weight: pfe-var(font-weight--light);
        &:not(:last-child) {
            margin-bottom: pfe-var(content-spacer--heading--md);
        }
    }
    @else if $sizing == "4xl" or $sizing == "3xl" or $sizing == "2xl" or $sizing == "xl" {
        line-height: pfe-var(line-height--heading);
        font-weight: pfe-var(font-weight--normal);
        &:not(:last-child) {
            margin-bottom: pfe-var(content-spacer--heading--sm);
        }
    }
    // $sizing == "lg" or "md" or "sm" or "xs" 
    @else { 
        line-height: pfe-var(line-height);
        font-weight: pfe-var(font-weight--normal);
        &:not(:last-child) {
            margin-bottom: pfe-var(content-spacer--heading--sm);
        }
    }
}

/// The variable stack includes a hook just for headings when they appear in the 
/// light DOM within components: --pf-c--FontSize
///
/// Components can't control the font size of block level elements like HTML headings 
/// when they are in the light DOM.  A component _could_ redefine the variables for 
/// standard headings by using the variable hooks such as: `--pf-c--content--h4--FontSize` 
/// but it can't know if the light DOM might contain an H1, H2, H3, etc. it shouldn't
/// redefine the variables for all possible headings. Instead, there is one dedicated
/// variable for this purpose. 
@mixin pfe-content-heading ( $sizing: "h1" ){
    font-family: pfe-var(font-family--heading);
    font-size:   var( --pf-c--FontSize, pfe-var(content--#{$sizing}--FontSize));
    line-height: pfe-var(line-height--heading);
    font-weight: pfe-var(font-weight--normal);
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--heading--sm); //16px
    }
}

@mixin pfe-content--text--spacing-block ( $sizing: "md" ) {
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--body--#{$sizing}); //16px
    }
} 