@import "../maps/_typography";

/// Mixin for authors outside of PFE to control spacing between content
/// @group typography
/// @param {*} $sizing [lg, md, sm] 
/// @param {*} $type [heading, body] 
/// @example - scss
///   @include pfe-content--text--spacing-block(sm);
@mixin pfe-content--text--spacing-block($sizing: md, $type: body) {
    &:not(:last-child):not(:empty) {
        margin-bottom: pfe-var(content-spacer--#{$type}--#{$sizing}); //16px
    }
} 

/// Mixin to generate a typography stack - font-family, font-size, line-height, font-weight
/// and spacing between elements. It accepts a few inputs and determines what variable stack
/// and CSS properties to output.
/// @group typography
/// @param {String} $sizing [xl] - Human-readable description for the font-size of the stack you are building. Options include: 6xl, 5xl, 4xl, 3xl, 2xl, xl, lg, md, sm, xs.
/// @param {String} $type [title] - Describes the type of element being created and determines which variable stack to pull from. Also accepts "text".
/// @param {Bool} $base [false] - Do you want to include base typography properties such as font-family, font-weight, and line-height? Currently only used by $type: text.
/// @param {Bool} $important [false] - Boolean value for if properties need to be postfixed with `!important`. Use of `!important` is only recommended for utility classes.
/// @param {Boolean} $use-local [true] - This will print a local variable at the beginning of the variable stacks.
/// @param {String} $region [null] - For use with local variables only. For more about the regional designation, see pfe-var().
/// @param {Boolean} $light-dom-heading: [false] - Print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss.
/// @requires {function} pfe-var
/// @requires {function} pfe-local
/// @requires {variable} $pf-title-set--mega
/// @requires {variable} $pf-title-set--regular
/// @requires {variable} $pf-title-set--tiny
/// @see $pf-type-sizing
/// @example scss - basic heading
///   .pfe-component--heading {
///     @include pfe-typography(title, 5xl);
///   }
/// @example css - Rendered result
///   .pfe-component--heading {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 2.5rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--5xl, 2.5rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
/// @example scss - 
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     @include pfe-typography(title, 6xl, $use-local: false, $region: heading);
///   }
/// @example css - Rendered result
///   .pfe-component--custom-heading-6xl--without-local-var--with-region {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     font-size: 3rem;
///     font-size: var(--pfe-cta__heading--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.2;
///     line-height: var(--pfe-cta__heading--LineHeight, var(--pfe-theme--line-height--heading-mega, 1.2));
///     font-weight: 400;
///     font-weight: var(--pfe-cta__heading--FontWeight, var(--pfe-theme--font-weight--light, 400));
///   }
/// @example scss 
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     @include pfe-typography(title, 6xl, $light-dom-cascade: true);
///   }
/// @example css  - Rendered result
///   .pfe-component--custom-heading-6xl--with-light-dom-hook {
///     font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///     font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///     --pf-c--FontSize: var(--pfe-cta--FontSize, var(--pf-global--FontSize--md, 1rem));
///     font-size: 3rem;
///     font-size: var(--pfe-cta--FontSize, var(--pf-global--FontSize--6xl, 3rem));
///     line-height: 1.3;
///     line-height: var(--pfe-cta--LineHeight, var(--pfe-theme--line-height--heading, 1.3));
///     font-weight: 500;
///     font-weight: var(--pfe-cta--FontWeight, var(--pfe-theme--font-weight--normal, 500));
///   }
///
@mixin pfe-typography(
    $type: title,
    $size: xl,
    $use-local: false,
    $region: null,
    $light-dom-cascade: false,
    $content-spacer: true,
    $props: (font-size, font-family, font-weight, line-height),
    $exclude-base: false,
    $important: false
){
    // Adds !important to the end of the property; useful for utility classes only. Use with caution.
    $rules: "";
    @if $important {
        $rules: " !important";
    }

    // Force all $size inputs to String type
    $size: "#{$size}";

    $sizes: map-get($pf-typography-sets, $type);

    // Check that this type exists in the typography set
    @if type-of($sizes) != "map" or map-has-key($pf-typography-sets, $type) == false {
        // Throw an error if not found
        @error "#{$type} not found in the supported typography sets from $pf-typography-sets."
    } @else {
        $set: map-get($sizes, $size);
        // Check that this size exists in the captured set
        @if type-of($set) != "map" or map-has-key($sizes, $size) == false {
            // Throw an error if not found
            @error "#{$size} not found in the supported #{$type} sizes."
        } @else {
            // Remove the base properties from the list if true
            @if $exclude-base == true {
                @each $prop in (font-family, font-weight, line-height) {
                    $props: remove($props, $prop);
                }
            }

            // Add the light DOM custom property if true and font-size is in the props list
            @if $light-dom-cascade and index($props, font-size) != null {
                $value: get-var-stack(FontSize, $set, $use-local, $region);
                // Result to be printed
                --pf-c--FontSize: #{$value};
            }

            @each $prop in $props {
                $bem: str-to-bem($prop);
                $value: get-var-stack($bem, $set, $use-local, $region);

                // Add the light DOM custom property if true and font-size is in the props list
                @if $light-dom-cascade and $prop == "font-size" {
                    --pf-c--#{$bem}: #{$value};
                }
                #{$prop}: #{$value}#{$rules};
            }

            // If the content-spacer boolean is true, clear the 
            @if $content-spacer {
                $value: get-var-stack(content-spacer, $set, $use-local, $region);
                &:not(:last-child):not(:empty) {
                    margin-bottom: #{$value};
                }
                // Can we use:
                // @include pfe-content--text--spacing-block($size); ?
            }
        }
    }
}

/// Mixin for creating an accessible focus state
/// @param {Color} $color [$pfe-color--link]
/// @see {variable} $pfe-color--link
/// @example - scss
///   @include pfe-accessibility-focus($pfe-color--link--on-dark);
@mixin pfe-accessibility-focus($color: $pfe-color--link) {
  outline-offset: 1px;
  outline-style: dotted;
  outline-width: 1px;
  text-decoration: none !important;

  @if type-of($color) ==color {
    outline-color: $color;
  }
}

/// Underline text
/// @example - scss
///   @include pfe-underline();
@mixin pfe-underline() {
  text-decoration: underline;
  text-decoration-skip: ink;
}

/// Mixin for authors outside of PFE to customize block level elements
/// The variable stack includes a hook just for headings when they appear in the 
/// light DOM within components: --pf-c--FontSize
///
/// Components can't control the font size of block level elements like HTML headings 
/// when they are in the light DOM.  A component _could_ redefine the variables for 
/// standard headings by using the variable hooks such as: `--pf-c--content--h4--FontSize` 
/// but it can't know if the light DOM might contain an H1, H2, H3, etc. it shouldn't
/// redefine the variables for all possible headings. Instead, there is one dedicated
/// variable for this purpose. 
/// @group typography
/// @param {*} $sizing [h1, h2, h3, h4, h5, h6, p, small] 
/// @example - scss
///  .project-wrapper h3  {
///      @include pfe-title(xl); 
///  }
/// @example - css
///  .project-wrapper  h3 {
///    font-family: "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif;
///    font-family: var(--pfe-theme--font-family--heading, "Red Hat Display", "RedHatDisplay", "Overpass", Overpass, Arial, sans-serif);
///    line-height: 1.3;
///    line-height: var(--pfe-theme--line-height--heading, 1.3);
///    font-weight: 500;
///    font-weight: var(--pfe-theme--font-weight--normal, 500);
///    font-size: 1.25rem;
///    font-size: var(--pf-c--FontSize, var(--pf-c--content--h3--FontSize, var(--pf-global--FontSize--xl, 1.25rem)));
///  }
@mixin pfe-content($element: p){
    // TEXT
    @if $element == "p" or $element == "small" {
        // Extend includes: line height, weight, font family
        @extend %pfe-content-base;

        // Accomodate for irregular variable naming
        @if $element == "p" {
            font-size: var(--pf-c--FontSize, pfe-var(content--FontSize));
        }
        @else {
            font-size: var(--pf-c--FontSize, pfe-var(content--#{$element}--FontSize));
        }
        // spacing
        @include pfe-content--text--spacing-block(sm);
    } 
    @else { // HEADINGS
        font-family: pfe-var(font-family--heading);
        line-height: pfe-var(line-height--heading);
        font-weight: pfe-var(font-weight--normal);

        font-size: var(--pf-c--FontSize, #{pfe-var(content--#{$element}--FontSize)});
        // spacing
        @include pfe-content--text--spacing-block(sm, heading);
    }
}
