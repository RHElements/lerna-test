////
/// Tools for leveraging custom property stacks
/// @group Custom properties
/// @author castastrophe
////

/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex
/// @param {String} $category  - Category name to be appended to variables within the map/system
/// @param {String} $key - Variable name to be used and prepended with --pfe-theme
/// @param {Map} $map  - Sass map of variables
/// @param {String} $fallback [null]  - Optional fallback override
/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value
/// @requires $repo
/// @return {String} theme stack with fallback value from a sass map
@function pfe-get-from-map($category, $key, $map, $fallback: null, $use-fallback: true) {
  // Start building the variable declaration
  $var-declaration: "--#{$repo}-theme--";
  // If the category exists, inject that into the string
  @if $category != "" {
      $var-declaration: "#{$var-declaration}#{$category}--";
  }
  // Append the key to the string
  $var-declaration: "#{$var-declaration}#{$key}";

  // If the fallback is not provided but use-fallback is set to true
  @if $fallback == null and $use-fallback and map-get($map, $key) != null {
      $fallback: map-get($map, $key);
  }

  @if $fallback != null {
      // Create the variable declaration
      $var-declaration: "#{$var-declaration}, #{$fallback}";
  }

  // Return the variable declaration string
  @return var(#{$var-declaration});
}

/// Returns CSS variable stack with exposed theme variable and respective fallback
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $fallback [null] - Optional custom fallback
/// @see $pfe-vars
/// @see $pfe-colors
/// @see $pfe-broadcasted
/// @example - scss In your component styles
///   .my-element {
///     padding:     pfe-var( container-spacer );
///     font-size:   pfe-var( font-size );
///   }
/// @example - css Rendered output
///   .my-element {
///      padding: var(--pfe-theme--container-spacer, 16px);
///      font-size: var(--pfe-theme--font-size, 16px);
///   }
@function pfe-var($cssvar, $fallback: null) {
    $var-name: to-string($cssvar, "--");
    @if map-get($pfe-vars, $var-name) != null {
        @return pfe-get-from-map("", $var-name, $pfe-vars, $fallback);
    }
    @else if map-get($pfe-colors, $var-name) != null {
        @return pfe-get-from-map("color", $var-name, $pfe-colors, $fallback);
    }
    @else if map-get($pfe-broadcasted, $var-name) != null {
        @return pfe-get-from-map("", $var-name, $pfe-broadcasted);
    }
    @else {
        @error "#{$var-name} could not be found.";
    }
}

/// Returns CSS Var for the local component-scoped variable
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @see $repo
/// @see $LOCAL
/// @example
///   :host {
///       padding-top:      #{pfe-local(paddingTop)};
///       padding-bottom:   #{pfe-local(paddingBottom)};
///   }
@function pfe-local($cssvar, $fallback: null, $region: null) {
    // If a fallback is not defined, use the global variables map
    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {
        @if $region == null {
            $fallback: map-get($LOCAL-VARIABLES, $cssvar);
        }
        @else {
            $submap: map-get($LOCAL-VARIABLES, $region);
            @if type-of($submap) == "map" {
                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);
            }
        }
    }

    // If a region value exists, build the region string
    @if $region != null {
        $region: "__#{$region}";
    }

    // Start building the variable declaration
    $var-declaration: "--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}";
    
    @if $fallback != null {
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }

    // Return the variable declaration string
    @return var(#{$var-declaration});
}

/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context
/// to influence the styles of children elements such as p tags or links.
/// @param {String} $broadcast - name of the broadcast variable to apply
/// @requires $repo
/// @example scss - In your component styles
///   color: pfe-broadcasted(link);
/// @example css - Rendered output
///   color: var(--pfe-broadcasted--link);
/// @example - scss In your component styles
///   color: pfe-broadcasted(ui-base--hover);
/// @example - css Console results
///   Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.";

@function pfe-broadcasted($broadcast, $use-fallback: true) {
    $fallback: "";
    @if $use-fallback {
        $fallback: ", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}";
    }
    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {
      @error "--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.";
    }
    @else {
      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});
    }
}

/// Returns CSS variable stack with exposed theme variable and respective fallback
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex
/// @requires {Map} $pfe-zindex - SASS Map of z-index values
/// @see $pfe-zindex
/// @example - scss In your component styles
///   .my-element {
///     z-index: pfe-zindex( content );
///   }
/// @example - css Rendered output
///   .my-element {
///     z-index: var(--pfe-theme--zindex--content, 1);
///   }
@function pfe-zindex($cssvar) {
    $var-name: to-string($cssvar, "--");
    @if map-get($pfe-zindex, $var-name) != null {
        @return pfe-get-from-map("zindex", $var-name, $pfe-zindex);
    }
    @else {
        @error "The key for #{$var-name} could not be found in the $pfe-zindex map.";
    }
}

/// Returns the value (only) of a property from the respective maps
/// Similar to pfe-var, but does not include css variable in the compiled CSS
/// @param {String} $name - Name of the key for the map
/// @see $pfe-vars
/// @see $pfe-colors
/// @see $pfe-broadcasted
/// @example - scss In your component styles
///   .my-element {
///     background-color: pfe-fetch( ui-base );
///   }
/// @example - css Rendered output
///   .my-element {
///     background-color: #06c;
///   }
@function pfe-fetch($name) {
    $var-name: to-string($name, "--");
    @if map-get($LOCAL-VARIABLES, $var-name) != null {
        @return map-get($LOCAL-VARIABLES, $var-name);
    }
    @if map-get($pfe-vars, $var-name) != null {
        @return map-get($pfe-vars, $var-name);
    }
    @else if map-get($pfe-colors, $var-name) != null {
        @return map-get($pfe-colors, $var-name);
    }
    @else if map-get($pfe-broadcasted, $var-name) != null {
        @return map-get($pfe-broadcasted, $var-name);
    }
    @else {
        @error "#{$var-name} could not be found.";
    }
}
