///
/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
/// To use:
///   1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss
/// @example
///   .my-element {
///     color:       #{pfe-color( text )};
///     background:  #{pfe-color( surface--base )};
///   }
/// @param {String} $category - Category name to be appended to variables within the map/system
/// @param {String} $key - Variable name to be used and prepended with --pfe-theme
/// @param {Map} $map - SASS Map of variables
/// @param {String} $fallback [""] - Optional fallback override
/// @see $repo
/// @see $USE-FALLBACK
///
@function pfe-get-from-map($category, $key, $map, $fallback: null) {
  // Start building the variable declaration
  $var-declaration: "--#{$repo}-theme--";
  // If the category exists, inject that into the string
  @if $category != "" {
      $var-declaration: "#{$var-declaration}#{$category}--";
  }
  // Append the key to the string
  $var-declaration: "#{$var-declaration}#{$key}";

  // If the fallback is not provided but use-fallback is set to true
  @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {
      $fallback: map-get($map, $key);
  }

  @if $fallback != null {
      // Create the variable declaration
      $var-declaration: "#{$var-declaration}, #{$fallback}";
  }

  // Return the variable declaration string
  @return var(#{$var-declaration});
}

///
/// Color fetch
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
/// To use:
///   1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss
/// @example
///   .my-element {
///     color:       #{pfe-color( text )};
///     background:  #{pfe-color( surface--base )};
///   }
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $fallback [null] - Optional custom fallback value
/// @see $pfe-colors
///
@function pfe-color($cssvar, $fallback: null) {
    $var-name: to-string($cssvar, "--");
    @if map-get($pfe-colors, $var-name) != null {
        @return pfe-get-from-map("color", $var-name, $pfe-colors, $fallback);
    }
    @else {
        @error "The key for #{$var-name} could not be found in the $pfe-colors map.";
    }
}

///
/// Variable fetch
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
/// To use:
///   1. To look up a value: /elements/pfe-sass/src/maps/_general.scss
/// @example
///   .my-element {
///     padding:     #{pfe-var( container-spacer )};
///     font-size:   #{pfe-var( font-size )};
///   }
///   /* Outputs */
///   .my-element {
///      padding: var(--pfe-theme--container-spacer, 16px);
///      font-size: var(--pfe-theme--font-size, 16px);
///   }
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $fallback [null] - Optional custom fallback
/// @see $pfe-vars
///
@function pfe-var($cssvar, $fallback: null) {
  $var-name: to-string($cssvar, "--");
  @if map-get($pfe-vars, $var-name) != null {
    @return pfe-get-from-map("", $var-name, $pfe-vars, $fallback);
  }
  @else {
    @error "The key for #{$var-name} could not be found in the $pfe-vars map.";
  }
}

///
/// Z-Index fetch
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
/// To use:
///   1. To look up a value: /elements/pfe-sass/src/maps/_broadcasted.scss
/// @example
///   .my-element {
///     z-index: #{pfe-broadcasted( link-decoration )};
///     /* Outputs -----
///     z-index: var(--pfe-theme--link-decoration, none);
///     */
///   }
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @see $pfe-broadcasted
///
@function pfe-broadcasted($cssvar) {
    $var-name: to-string($cssvar, "--");
    @if map-get($pfe-broadcasted, $var-name) != null {
        @return pfe-get-from-map("", $var-name, $pfe-broadcasted);
    }
    @else {
        @error "The key for #{$var-name} could not be found in the $pfe-broadcasted map.";
    }
}

///
/// Variable fetch
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
/// To use:
///   1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss
/// @example
///   .my-element {
///     z-index:     #{pfe-zindex( content )};
///     /* Outputs -----
///     z-index: var(--pfe-theme--zindex--content, 1);
///     */
///   }
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex
/// @see $pfe-zindex
///
///
@function pfe-zindex($cssvar) {
    $var-name: to-string($cssvar, "--");
    @if map-get($pfe-zindex, $var-name) != null {
        @return pfe-get-from-map("zindex", $var-name, $pfe-zindex);
    }
    @else {
        @error "The key for #{$var-name} could not be found in the $pfe-zindex map.";
    }
}

///
/// Local
///
/// Returns CSS Var for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @see $repo
/// @see $LOCAL
/// @example
///   :host {
///       padding-top:      #{pfe-local(paddingTop)};
///       padding-bottom:   #{pfe-local(paddingBottom)};
///   }
///
@function pfe-local($cssvar, $fallback: null, $region: null) {
    // If a region value exists, build the region string
    @if $region != null {
        $region: "__#{$region}";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}";
    // If a fallback is defined, pass that in too
    @if $fallback != null {
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

///
/// Apply broadcast function, for use with text & links.
///
/// It requests that the color property look for a broadcasted variable (from a container component)
/// first if there is one, and if not, use a theme variable, with the hex color fallback.
///
/// @param {String} $broadcast - name of the broadcast variable to apply
/// @see $repo
///
/// @example
///   color: #{pfe-apply-broadcast(ui-base--hover)};
///   /* Outputs: Error: --pfe-broadcasted--ui-base--hover variable is not currently supported."; */
///
/// @example
///   color: #{pfe-apply-broadcast(link)};
///   /* Outputs: color: var(--pfe-broadcasted--link);
///      Was: pfe-radio! */
///
@function pfe-apply-broadcast($broadcast) {
    $fallback: "";
    @if $USE-FALLBACK {
        $fallback: ", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}";
    }
    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {
      @error "--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.";
    }
    @else {
      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});
    }
}
