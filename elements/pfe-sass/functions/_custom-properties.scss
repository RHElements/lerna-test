/// Color
///
/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $category - Category name to be appended to variables within the map/system, default is "color"
/// @param {Map} $map - SASS Map of variables
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @use -
///
///     1.look up a color: /elements/pfe-sass/src/variables/_maps.scss
///         (FYI, maps references: /elements/pfe-sass/src/variables/_colors.scss)
///
///     2. use like this:
///         ```
///         .my-element {
///           color:       #{pfe-color(  surface--base--text  )};
///           background:  #{pfe-color(  surface--base )};
///         }
///         ```

@function pfe-color($cssvar, $category: 'color', $map: $pfe-colors) {
    @if $category !="" {
        $category: "#{$category}--";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-theme--#{$category}#{$cssvar}";
    // If a fallback is defined, pass that in too
    @if map-get($map, $cssvar) != null {
        $var-declaration: "#{$var-declaration}, #{map-get($map, $cssvar)}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

@function pfe-fallback($cssvar, $category: 'color', $map: $pfe-colors) {
    @if $category !="" {
        $category: "#{$category}--";
    }
    // Return the variable declaration string
    @return #{map-get($map, $cssvar)};
}

/// Var
///
/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $category - Category name to be appended to variables within the map/system
/// @param {Map} $map - SASS Map of variables
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @use -
///
///     1.look up a color: /elements/pfe-sass/src/variables/_maps.scss
///         (FYI, maps references: /elements/pfe-sass/src/variables/_colors.scss)
///
///     2. use like this:
///         ```
///         .my-element {
///           padding:     #{pfe-var(  container-spacer  )};
///           font-size:   #{pfe-var(  font-size  )};
///         }
///         ```

@function pfe-var($cssvar, $category: '', $fallback: null, $map: $pfe-vars) {
    $css-var-with-cat: $cssvar;

    @if $category !="" {
        $category: "#{$category}--";
        $css-var-with-cat: "#{$category}#{$cssvar}";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-theme--#{$category}#{$cssvar}";

    // If a fallback is defined, pass that in too
    @if $fallback = null and map-get($map, $cssvar) != null {
        @if $fallback == null {
            $fallback: map-get($map, $css-var-with-cat);
        }
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

/// Local
///
/// Returns CSS Var for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @use -
///     ```
///     :host {
///         padding-top:      #{pfe-local(paddingTop`)};
///         padding-bottom:   #{pfe-local(paddingBottom)};
///     }
///     ```

@function pfe-local($cssvar, $fallback: null, $region: null) {
    // If a region value exists, build the region string
    @if $region != null {
        $region: "__#{$region}";
    }
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}";
    // If a fallback is defined, pass that in too
    @if $fallback != null {
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }
    // Return the variable declaration string
    @return var(#{$var-declaration});
}

// Apply broadcast function, for use with content components
//  1st arg:            lookup broadcast variable  (1 of 6)
//
//  usage:   color: #{pfe-apply-broadcast(ui-base--hover)};
//  result:  Error: --pfe-broadcasted--color--ui-base--hover variable is not currently supported.";
//
//  usage:   color: #{pfe-apply-broadcast(link)};
//  result:  color: var(--pfe-broadcasted--color--link);
//  Was: pfe-radio!

@function pfe-apply-broadcast($broadcast, $fallback: #{pfe-color(#{to-string($broadcast,'--')})}) {
    @if not index($BROADCAST-VARS, $broadcast) {
      @error "--#{$repo}-broadcasted--color--#{$broadcast} variable is not currently supported.";
    }
    @else {
      @return var(--#{$repo}-broadcasted--color--#{to-string($broadcast,'--')}, $fallback);
    }
}
