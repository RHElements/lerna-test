/// Breakpoint
///
/// Returns the SCSS breakpoint value only
///
/// @param {String} $size - Generally named breakpoint size to be called
/// @param {String} $max - Set to true if the provided size is the max-value
/// @example
///   @media screen and (min-width: pfe-breakpoint(sm)) {
///      --pfe-band--Width: #{pfe-breakpoint(sm) - $box-padding * 2};
///   }
///
/// @example
///   @media screen and (max-width: pfe-breakpoint($size: md, $max: true)) {
///      --pfe-band--Width: #{pfe-breakpoint(sm) - $box-padding * 2};
///   }
///
/// @example - Set $map to false if you need supplemental breakpoints in a component
///   $variables: (
///      lg-mobile:         640,
///      sm-desktop:        1024,
///   );
///
/// @example
///   @media screen and (min-width: pfe-breakpoint(lg-mobile, $map: false)) { }
///   // which returns:
///   // @media screen and (min-width: var(--pfe-navigation--breakpoint-lg-mobile, 640)) { }
@function pfe-breakpoint($size, $max: false, $map: true) {
  $bp: 1px;
  @if $map == true {
    $bp: map-get($pfe-vars, grid-breakpoint--#{$size} );
    @if $max {
        $bp: (pfe-strip-unit($bp) - 1) * 1px;
    }
  }
  @else {
      $bp: map-get($variables, #{$size} ) ;
    @if $max {
      $bp: (pfe-strip-unit($bp) - 1) * 1px;
    }
  }
  @return $bp;
}

/// Get Theme
///
/// This utility function will return the correct theme
/// when you pass it a variable from the $pfe-colors map
///
/// @example
///   .my-custom-red-container {
///     --theme: #{ pfe-get-theme(surface--accent--theme) };
///   }
///   // Will return
///   // .my-custom-red-container {
///   //  --theme: saturated;
///   // }
@function pfe-get-theme($context) {
  @return #{map-get($pfe-colors, $context)};
}
