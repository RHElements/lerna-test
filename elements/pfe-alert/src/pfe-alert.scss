// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";


$LOCAL: alert;

// Example local variable, using BEM format
// --pfe-alert__region--Property: value;

// This variable is global so that helper functions can reference it
$LOCAL-VARIABLES: (
  // cyan-50
  BackgroundColor: #F2F9F9,
  BorderWidth: 3px,
  // cyan-300
  BorderColor: #009596,
  BorderStyle: solid,
  // --pf-global--spacer--md
  Padding: 16px,
  // the amount of space between icon and content
  Gap: 4px,
  header: (
    // --pf-global--spacer--xs
    MarginBottom: var(--pfe-alert--Gap, 4px),
  ),
  headerActions: (
    MarginRight: 4px,
  ),
  title: (
    Color: #003737,
    FontSize: 14px,
    FontWeight: 500,
  ),
  icon: (
    // cyan-300
    Color: #009596,
    Width: var(--pfe-alert__icon--Size, 24px),
    Height: var(--pfe-alert__icon--Size, 24px),
  ),
  description: (
    FontSize: 14px,
  ),
  close-button: (
    // Black-600
    Color: #6A6E73,
    BackgroundColor: transparent,
    Border: none,
    Height: var(--pfe-alert__close-button--Size, 24px),
    Width: var(--pfe-alert__close-button--Size, 24px),
  ),
  close-button--hover: (
    Color: #151515,
  ),
  action-group: (
    MarginTop: var(--pfe-alert--Padding, 16px),
    Gap: 24px,
  ),
  action-group-item: (
    MarginRight: var(--pfe-alert__action-group--Gap, 24px),
    Padding: 0,
    border: none,
    BackgroundColor: transparent,
    Color: #0066CC,
    FontSize: 14px,
  ),
  action-group-item--hover: (
    // blue-500
    Color: #004080,
    TextDecoration: underline,
  ),
);

:host {
  // Avoid printing local variables on host, instead use the pfe-local() function to set property values
  // Example: color: pfe-local(Color);
  display: block;
}

:host([hidden]) {
  display: none;
}

.pfe-alert {
  // container? Yeah it's a good question. I originally want to try have the entired
  // BEM markup in the render function (meaning the top level div having a class of .pfe-alert)
  // but that doesn't work with Shadydom. So I just swapped it out for this container div for now.
  // I like the encapsulation and having declaritively having all of the aria states in the render
  // function. But I'm still on the fence. :shrug:
  &__container {
    border-width: pfe-local(BorderWidth);
    border-color: pfe-local(BorderColor);
    border-style: pfe-local(BorderStyle);
    background-color: pfe-local(BackgroundColor);
    // --pf-global--spacer--md
    padding: pfe-local(Padding);
    display: grid;
    grid-template-columns: min-content 1fr;
    gap: pfe-local(Gap);
  }

  // ie11 fallback
  &__left-column {
    display: inline-block;
    vertical-align: top;
  }

  // ie11 fallback
  &__middle-column {
    display: inline-block;
    vertical-align: top;
  }

  &__header {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    margin-bottom: pfe-local(MarginBottom, $region: header);
  }

  &__header-actions {
    margin-right: pfe-local(MarginRight, $region: headerActions);
  }

  &__title {
    font-size: pfe-local(FontSize, $region: title);
    color: pfe-local(Color, $region: title);
    font-size: pfe-local(FontSize, $region: title);
    font-weight: pfe-local(FontWeight, $region: title);
    flex: 1 1 auto;
  }

  &__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: pfe-local(Width, $region: icon);
    height: pfe-local(Height, $region: icon);
    color: pfe-local(Color, $region: icon);
  }

  &__close-button {
    color: pfe-local(Color, $region: close-button);
    background-color: pfe-local(BackgroundColor, $region: close-button);
    border: pfe-local(Border, $region: close-button);
    width: pfe-local(Width, $region: close-button);
    height: pfe-local(Height, $region: close-button);
    cursor: pointer;

    &:hover {
      color: pfe-local(Width, $region: close-button--hover);
    }
    &:focus {
      color: pfe-local(Width, $region: close-button--hover);
    }
  }

  &__description {
    font-size: pfe-local(FontSize, $region: description);
  }

  &__action-group {
    margin-top: pfe-local(MarginTop, $region: action-group);
  }
}

.pfe-alert__action-group-item,
#action-group::slotted(.pfe-alert__action-group-item) {
  margin-right: pfe-local(MarginRight, $region: action-group-item);
  padding: pfe-local(Padding, $region: action-group-item);
  border: pfe-local(Border, $region: action-group-item);
  background-color: pfe-local(BackgroundColor, $region: action-group-item);
  color: pfe-local(Color, $region: action-group-item);
  font-size: pfe-local(FontSize, $region: action-group-item);
}
.pfe-alert__action-group-item:hover,
#action-group::slotted(.pfe-alert__action-group-item:hover) {
  text-decoration: pfe-local(TextDecoration, $region: action-group-item--hover);
  // blue-500
  color: pfe-local(Color, $region: action-group-item--hover);
}
// Turn a button into a regular looking link
// I'm using important because pfe-base takes
// precedence.
button.pfe-alert__action-group-item,
#action-group::slotted(.pfe-alert__action-group-item) {
  margin-right: pfe-local(MarginRight, $region: action-group-item) !important;
}

// @todo these need to be empty variables.
:host([state="info"]) .pfe-alert__container {
  // blue-300
  --pfe-alert--BorderColor: #2B9AF3;
  --pfe-alert__icon--Color: #2B9AF3;
  // blue-600
  --pfe-alert__title--Color: #002952;
  // blue-50
  --pfe-alert--BackgroundColor: #E7F1FA;
}

// @todo these need to be empty variables.
:host([state="success"]) .pfe-alert__container {
  // green-500
  --pfe-alert--BorderColor: #3E8635;
  --pfe-alert__icon--Color: #3E8635;
  // green-600
  --pfe-alert__title--Color: #1E4F18;
  // green-50
  --pfe-alert--BackgroundColor: #F3FAF2;
}

// @todo these need to be empty variables.
:host([state="warning"]) .pfe-alert__container {
  // gold-600
  --pfe-alert__title--Color: #795600;
  // gold-400
  --pfe-alert--BorderColor: #F0AB00;
  --pfe-alert__icon--Color: #F0AB00;
  // gold-50
  --pfe-alert--BackgroundColor: #FDF7E7;
}

// @todo these need to be empty variables.
:host([state="danger"]) .pfe-alert__container {
  // red-100
  --pfe-alert--BorderColor: #C9190B;
  --pfe-alert__icon--Color: #C9190B;
  // red-300
  --pfe-alert__title--Color: #7D1007;
  // gold-50
  --pfe-alert--BackgroundColor: #FAEAE8;
}

:host(:not([variant])) .pfe-alert__container {
  border-left: none;
  border-bottom: none;
  border-right: none;
}