{"version":3,"file":"rh-autocomplete.umd.js","sources":["rh-autocomplete.umd.js"],"sourcesContent":["/*\n * Copyright 2018 Red Hat, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport RHElement from \"../rhelement/rhelement.umd.js\";\n\nconst KEYCODE = {\n  ENTER: 13,\n  DOWN: 40,\n  UP: 38,\n  ESC: 27\n};\n\n// use this variable to debounce api call when user types very fast\nlet throttle = false;\n\nclass RhAutocomplete extends RHElement {\n  get html() {\n    return `\n<style>\n:host {\n  display: block; }\n</style>\n<rh-search-box id=\"input-box\"></rh-search-box>\n<rh-search-droplist id=\"dropdown\"></rh-search-droplist>`;\n  }\n\n  static get tag() {\n    return \"rh-autocomplete\";\n  }\n\n  get templateUrl() {\n    return \"rh-autocomplete.html\";\n  }\n\n  get styleUrl() {\n    return \"rh-autocomplete.scss\";\n  }\n\n  constructor() {\n    super(RhAutocomplete);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._inputBox = this.shadowRoot.querySelector(\"#input-box\");\n    this._inputBox.value = this.initValue;\n\n    this._dropdown = this.shadowRoot.querySelector(\"#dropdown\");\n    this._dropdown.data = [];\n\n    this.addEventListener(\n      \"rh-input-change-event\",\n      this._autocomplete.bind(this)\n    );\n    this.addEventListener(\"rh-input-blur\", this._closeDroplist.bind(this));\n    this.addEventListener(\"keyup\", this._inputKeyUp.bind(this));\n\n    // these two events, fire search\n    this.addEventListener(\"rh-search-event\", this._closeDroplist.bind(this));\n    this.addEventListener(\n      \"rh-option-selected\",\n      this._optionSelected.bind(this)\n    );\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\n      \"rh-input-change-event\",\n      this._autocomplete.bind(this)\n    );\n    this.removeEventListener(\"rh-input-blur\", this._closeDroplist.bind(this));\n    this.removeEventListener(\"keyup\", this._inputKeyUp.bind(this));\n\n    this.removeEventListener(\"rh-search-event\", this._closeDroplist);\n    this.removeEventListener(\n      \"rh-option-selected\",\n      this._optionSelected.bind(this)\n    );\n  }\n\n  static get observedAttributes() {\n    return [\"init-value\"];\n  }\n\n  get initValue() {\n    return this.getAttribute(\"init-value\");\n  }\n\n  set initValue(val) {\n    this.setAttribute(\"init-value\", val);\n  }\n\n  _closeDroplist() {\n    this._dropdown.open = null;\n    this._inputBox.setAttribute(\"aria-open\", \"\");\n  }\n\n  _openDroplist() {\n    this._dropdown.setAttribute(\"open\", true);\n    this._inputBox.setAttribute(\"aria-open\", true);\n  }\n\n  _optionSelected(e) {\n    // update input box with selected value from options list\n    var selectedValue = e.detail.optionValue;\n    this._reset(selectedValue);\n\n    // send search request\n    this._dispatchSearchEvent(selectedValue);\n  }\n\n  _dispatchSearchEvent(searchQuery) {\n    this.dispatchEvent(\n      new CustomEvent(\"rh-search-event\", {\n        detail: { searchValue: searchQuery },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n\n  _autocomplete(event) {\n    let input = event.detail.inputValue;\n    this._sendAutocompleteRequest(input);\n  }\n\n  _sendAutocompleteRequest(input) {\n    this.autocompleteRequest(\n      { query: input },\n      this._autocompleteCallback.bind(this)\n    );\n  }\n\n  _autocompleteCallback(response) {\n    this._dropdown.data = response;\n    this._dropdown.reflow = true;\n    response.length !== 0 ? this._openDroplist() : this._closeDroplist();\n  }\n\n  _reset(selectedValue) {\n    this._inputBox.value = selectedValue;\n    this._dropdown.activeIndex = null;\n    this._dropdown.data = [];\n    this._closeDroplist();\n  }\n\n  _inputKeyUp(e) {\n    let key = e.keyCode;\n\n    if (\n      this._dropdown.data.length === 0 && //????\n      key !== KEYCODE.DOWN &&\n      key !== KEYCODE.UP &&\n      key !== KEYCODE.ENTER &&\n      key !== KEYCODE.ESC\n    )\n      return;\n\n    let activeIndex = parseInt(this._dropdown.activeIndex, 10) || null;\n    let selectedOption = this._dropdown.selectedOption;\n\n    let optionsLength = this._dropdown.data.length;\n\n    if (key == KEYCODE.ESC) {\n      this._closeDroplist();\n    } else if (key === KEYCODE.UP) {\n      activeIndex -= 1;\n\n      if (activeIndex < 0) {\n        activeIndex = optionsLength - 1;\n      }\n    } else if (key === KEYCODE.DOWN) {\n      activeIndex += 1;\n\n      if (activeIndex > optionsLength - 1) {\n        activeIndex = 0;\n      }\n    } else if (key === KEYCODE.ENTER) {\n      let selectedValue;\n      if (activeIndex) {\n        selectedValue = this._dropdown.getAttribute(\"selected-option\");\n        this._reset(selectedValue);\n      } else {\n        selectedValue = this._inputBox.value;\n      }\n\n      // send search request\n      this._dispatchSearchEvent(selectedValue);\n      return;\n    }\n\n    this._dropdown.activeIndex = activeIndex;\n  }\n}\n\n/*\n* - Attributes ------------------------------------\n* value     | input box value\n* aria-open | A list is attached to input box. Use this attribute to set\n              aria-autocomplete=\"list\" and aria-haspopup=\"true\" on input box\n\n* - Events ----------------------------------------\n* rh-input-change-event | Fires when user type in input box\n* rh-input-blur         | Fires when input box blurs\n*/\nclass RhSearchBox extends RHElement {\n  get html() {\n    return `\n<style>\n:host {\n  position: relative;\n  display: flex; }\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0; }\n\ninput {\n  width: 100%;\n  flex: 1;\n  box-shadow: inset 0 1px 0px rgba(0, 0, 0, 0.075) !important;\n  padding-left: 5px;\n  border-radius: 0;\n  background: #fff;\n  border: 1px solid #d1d1d1;\n  border-right: none;\n  font-size: 16px;\n  \n  line-height: 24px;\n  \n  height: 35px;\n  margin: 0px;\n  transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s; }\n\ninput:focus,\ninput:focus ~ button.search-button {\n  border-color: #66afe9;\n  outline: 0; }\n\ninput[type=\"search\"],\nbutton {\n  -webkit-appearance: none; }\n\ninput[type=\"search\"]::-ms-clear {\n  display: none; }\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\nbutton.clear-search {\n  font-size: 27px;\n  color: #cccccc;\n  background-color: #fff;\n  font-weight: 600;\n  border: none;\n  line-height: 20px;\n  position: absolute;\n  right: 50px;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  padding: 0px;\n  margin: 0px; }\n\nbutton.clear-search:hover {\n  opacity: 1;\n  color: #06c; }\n\nbutton.search-button {\n  box-shadow: inset 0 1px 0px rgba(0, 0, 0, 0.075);\n  background-color: #fff;\n  border-color: #0076e0;\n  color: #06c;\n  border: 1px solid #d1d1d1;\n  border-left: none;\n  margin: 0px;\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s; }\n\nbutton[disabled=\"true\"] {\n  color: #ccc; }\n</style>\n<label for=\"keywordInputx\" class=\"sr-only\">Keyword</label>\n  <input placeholder=\"Enter Your Search Term\"\n    role=\"search\"\n    type=\"search\"\n    autocomplete=\"off\"\n    autocorrect=\"off\"\n    autocapitalize=\"off\"\n    spellcheck=\"false\"\n    class=\"form-control\"/>\n  <button type=\"button\" class=\"clear-search\" aria-label=\"clear search query\">\n    &times;\n  </button>\n  <button class=\"search-button\" type=\"button\" aria-label=\"Search\">\n      <span class=\"web-icon-search\" aria-hidden=\"true\" title=\"Search\">Search</span>\n  </button>`;\n  }\n\n  static get tag() {\n    return \"rh-search-box\";\n  }\n\n  get templateUrl() {\n    return \"rh-search-box.html\";\n  }\n\n  get styleUrl() {\n    return \"rh-search-box.scss\";\n  }\n\n  constructor() {\n    super(RhSearchBox);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    // input box\n    this._input = this.shadowRoot.querySelector(\"input\");\n    this._input.addEventListener(\"input\", this._inputChanged.bind(this));\n    this._input.addEventListener(\"blur\", this._inputBlured.bind(this));\n\n    // clear button\n    this._clearBtn = this.shadowRoot.querySelector(\".clear-search\");\n    this._clearBtn.addEventListener(\"click\", this._clear.bind(this));\n\n    // search button\n    this._searchBtn = this.shadowRoot.querySelector(\".search-button\");\n    this._searchBtn.addEventListener(\"click\", this._search.bind(this));\n  }\n\n  disconnectedCallback() {\n    this._input.removeEventListener(\"input\", this._inputChanged);\n    this._input.removeEventListener(\"blur\", this._inputBlured);\n\n    this._clearBtn.removeEventListener(\"click\", this._clear);\n    this._searchBtn.removeEventListener(\"click\", this._search);\n  }\n\n  static get observedAttributes() {\n    return [\"value\", \"aria-open\"];\n  }\n\n  get value() {\n    return this.getAttribute(\"value\");\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n\n  get ariaOpen() {\n    return this.hasAttribute(\"aria-open\");\n  }\n\n  set ariaOpen(val) {\n    val = Boolean(val);\n\n    if (val) {\n      this.setAttribute(\"aria-open\", \"\");\n    } else {\n      this.removeAttribute(\"aria-open\");\n    }\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback();\n\n    if (attr === \"value\") {\n      this._input.value = newVal;\n\n      if (newVal === \"\") {\n        this._searchBtn.setAttribute(\"disabled\", true);\n      } else {\n        this._searchBtn.removeAttribute(\"disabled\");\n        this._clearBtn.removeAttribute(\"hidden\");\n      }\n    }\n\n    if (attr === \"aria-open\") {\n      if (newVal) {\n        this._input.setAttribute(\"aria-autocomplete\", \"list\");\n        this._input.setAttribute(\"aria-haspopup\", true);\n      } else {\n        this._input.removeAttribute(\"aria-autocomplete\", \"\");\n        this._input.removeAttribute(\"aria-haspopup\", \"\");\n      }\n    }\n  }\n\n  _inputBlured() {\n    this.dispatchEvent(\n      new CustomEvent(\"rh-input-blur\", {\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n\n  _inputChanged() {\n    this.value = this._input.value;\n\n    if (throttle === false) {\n      throttle = true;\n      window.setTimeout(() => {\n        this.dispatchEvent(\n          new CustomEvent(\"rh-input-change-event\", {\n            detail: { inputValue: this._input.value },\n            bubbles: true,\n            composed: true\n          })\n        );\n\n        throttle = false;\n      }, 500);\n    }\n  }\n\n  _clear() {\n    this._input.value = \"\";\n    this._clearBtn.setAttribute(\"hidden\", true);\n    this._searchBtn.setAttribute(\"disabled\", true);\n    this._input.focus();\n  }\n\n  _search(event) {\n    this.dispatchEvent(\n      new CustomEvent(\"rh-search-event\", {\n        detail: { searchValue: this._input.value },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n}\n\n/*\n* - Attributes ------------------------------------\n* open               | Set when the combo box dropdown is open\n* active-index       | Set selected option\n* loading            | Set when new items are expected\n* reflow             | Re-renders the dropdown\n\n* - Events ----------------------------------------\n* rh-option-selected | Fires when an option is selected.\n  event.detailes.selectedValue contains the selected value.\n*/\nclass RhSearchDroplist extends RHElement {\n  get html() {\n    return `\n<style>\n:host {\n  position: relative;\n  display: none; }\n\n:host([open]) {\n  display: block; }\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0; }\n\nul {\n  display: block;\n  position: absolute;\n  top: 100%;\n  left: 0px;\n  right: 0px;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-top: none;\n  z-index: 9999;\n  margin: 0px;\n  padding: 0px;\n  list-style: none;\n  cursor: pointer;\n  overflow-y: scroll;\n  overflow-x: hidden; }\n\nul li.active {\n  background-color: #f0f0f0; }\n\nul li {\n  display: list-item;\n  cursor: pointer;\n  padding: 7px 10px;\n  margin: 2px 0px 2px 0px; }\n</style>\n<div class=\"suggestions-aria-help sr-only\" role=\"status\" aria-activedescendant=\"option-0\"></div>\n<ul role=\"listbox\" tabindex=\"-1\">\n</ul>`;\n  }\n\n  static get tag() {\n    return \"rh-search-droplist\";\n  }\n\n  get templateUrl() {\n    return \"rh-search-droplist.html\";\n  }\n\n  get styleUrl() {\n    return \"rh-search-droplist.scss\";\n  }\n\n  constructor() {\n    super(RhSearchDroplist);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._ariaAnnounce = this.shadowRoot.querySelector(\n      \".suggestions-aria-help\"\n    );\n\n    this._ul = this.shadowRoot.querySelector(\"ul\");\n    this._ul.addEventListener(\"mousedown\", this._optionSelected.bind(this));\n  }\n\n  disconnectedCallback() {\n    this._ul.removeEventListener(\"mousedown\", this._optionSelected);\n  }\n\n  _optionSelected(e) {\n    if (e.target.tagName === \"LI\") {\n      this.dispatchEvent(\n        new CustomEvent(\"rh-option-selected\", {\n          detail: { optionValue: e.target.innerText },\n          bubbles: true,\n          composed: true\n        })\n      );\n    }\n  }\n\n  _renderOptions() {\n    this.reflow = \"\";\n\n    let options = this.data;\n\n    this._ariaAnnounce.innerHTML = `There are ${\n      options.length\n    } suggestions. Use the up and down arrows to browse.`;\n    this._ariaAnnounce.setAttribute(\"aria-live\", \"polite\");\n\n    this._ul.innerHTML = `${options\n      .map((item, index) => {\n        return `<li id=\"option-${index}\" class=\"${\n          index === 0 ? \"active\" : \"\"\n        }\" role=\"option\" tabindex=\"-1\" value=\"${item}\">${item}</li>`;\n      })\n      .join(\"\")}`;\n  }\n\n  static get observedAttributes() {\n    return [\"open\", \"reflow\", \"active-index\", \"selected-option\"];\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback();\n\n    if (this[name] !== newVal) {\n      this[name] = newVal;\n    }\n\n    if (attr === \"active-index\" && oldVal !== newVal) {\n      this._activeIndexChanged();\n    }\n\n    if (attr === \"reflow\") {\n      this._renderOptions();\n    }\n  }\n\n  _activeIndexChanged() {\n    if (isNaN(this.activeIndex) || this.data.length === 0) return;\n\n    // add aria-activedescendant\n    this._ul.setAttribute(\n      \"aria-activedescendant\",\n      \"option-\" + this.activeIndex\n    );\n\n    // remove active class\n    this._ul.querySelector(\".active\").classList.remove(\"active\");\n\n    // add active class to selected option\n    let activeOption = this._ul.querySelector(\n      \"li:nth-child(\" + (this.activeIndex + 1) + \")\"\n    );\n    this.selectedOption = activeOption.innerHTML;\n    activeOption.classList.add(\"active\");\n  }\n\n  get open() {\n    return this.shadowRoot.hasAttribute(\"open\");\n  }\n\n  set open(val) {\n    val = Boolean(val);\n\n    if (val) {\n      this.setAttribute(\"open\", \"\");\n    } else {\n      this.removeAttribute(\"open\");\n    }\n  }\n\n  get activeIndex() {\n    return parseInt(this.getAttribute(\"active-index\"), 10);\n  }\n\n  set activeIndex(val) {\n    this.setAttribute(\"active-index\", val);\n  }\n\n  get selectedOption() {\n    this.getAttribute(\"selected-option\");\n  }\n\n  set selectedOption(val) {\n    this.setAttribute(\"selected-option\", val);\n  }\n\n  get reflow() {\n    return this.hasAttribute(\"reflow\");\n  }\n\n  set reflow(val) {\n    val = Boolean(val);\n\n    if (val) {\n      this.setAttribute(\"reflow\", \"\");\n    } else {\n      this.removeAttribute(\"reflow\");\n    }\n  }\n}\n\nRHElement.create(RhSearchBox);\nRHElement.create(RhSearchDroplist);\nRHElement.create(RhAutocomplete);\n\nexport default RhAutocomplete;\n"],"names":["KEYCODE","throttle","RhAutocomplete","RHElement","_inputBox","this","shadowRoot","querySelector","value","initValue","_dropdown","data","addEventListener","_autocomplete","bind","_closeDroplist","_inputKeyUp","_optionSelected","removeEventListener","open","setAttribute","e","selectedValue","detail","optionValue","_reset","_dispatchSearchEvent","searchQuery","dispatchEvent","CustomEvent","searchValue","event","input","inputValue","_sendAutocompleteRequest","autocompleteRequest","query","_autocompleteCallback","response","reflow","length","_openDroplist","activeIndex","key","keyCode","parseInt","optionsLength","selectedOption","getAttribute","val","RhSearchBox","_input","_inputChanged","_inputBlured","_clearBtn","_clear","_searchBtn","_search","attr","oldVal","newVal","removeAttribute","setTimeout","_this3","focus","hasAttribute","Boolean","RhSearchDroplist","_ariaAnnounce","_ul","target","tagName","innerText","options","innerHTML","map","item","index","join","name","_activeIndexChanged","_renderOptions","isNaN","classList","remove","activeOption","add","create"],"mappings":"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"}