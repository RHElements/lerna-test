@import "../../pfe-sass/pfe-sass";

$LOCAL: icon;

@mixin pfe-icon-set-svg-size($size: 1em) {
  &,
  & svg {
    width: $size;
    height: $size;
  }
}

:host {
  --pfe-icon--spacing:                 #{pfe-var(container-spacer)};
  --pfe-icon--size:                    var(--pfe-theme--icon-size, 1em);
  --pfe-icon--BackgroundColor:         transparent;
  --pfe-icon--BorderColor:             transparent;
  --pfe-icon--Padding:                 .05em;

  display: inline-block;
  vertical-align: middle;
  border-radius: 50%;
  background-color: #{pfe-local(BackgroundColor)};
  border: #{pfe-var(ui--border-width)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor)};

  @include pfe-icon-set-svg-size(1em);

  svg {
    fill: #{pfe-apply-broadcast(text)};
  }

  @at-root #{&}([data-block]) {
    display: block;
    margin-bottom: #{pfe-local(spacing)};
    margin-top: #{pfe-local(spacing)};

    &:first-child {
      margin-top: 0;
    }
  }
}

@for $size from 1 through 4 {
  :host([size="#{$size}x"]) {
    @include pfe-icon-set-svg-size(#{$size}em);
  }
}

// TODO: Sort out sizing
$abstract-sizes: (
  xl: 100px,
  lg: 64px,
  md: 32px,
  sm: 18px
);

// TODO: Sort out sizing
@each $label, $size in $abstract-sizes {
  :host([size="#{$label}"]) {
    @include pfe-icon-set-svg-size($size);
  }
}

@each $color in (base, complement, accent) {
  :host([color="#{$color}"]) {
    @include pfe-set-broadcast($color: #{$color}, $broadcast: text, $color-set: ui);
  }
}

@each $color in (critical, important, moderate, success, info, default) {
  :host([color="#{$color}"]) {
    @include pfe-set-broadcast($color: #{$color}, $broadcast: text, $color-set: feedback);
  }
}

// May need Feedback Darkest colors too.

:host([circled]) {
  --pfe-icon--BackgroundColor:       transparent;
  --pfe-icon--BorderColor:           #{pfe-color(surface--border)};

  padding: #{pfe-local(Padding)};
}

@each $color in (base, lightest, lighter, darker, darkest, complement, accent) {
  :host([circled][color="#{$color}"]) {
    --pfe-icon--BackgroundColor:       #{pfe-color(surface--#{$color})};
    --pfe-icon--BorderColor:           transparent;
    @include pfe-set-broadcast($color, $broadcast: text);
  }
}

// Backwards compatibility for light and dark
// @TODO remove light and dark with 1.0 release
@each $color in (light, dark) {
  :host([circled][color="#{$color}"]) {
    --pfe-icon--BackgroundColor:       #{pfe-color(surface--#{$color}er)};
    --pfe-icon--BorderColor:           transparent;
    @include pfe-set-broadcast(#{$color}er, $broadcast: text);
  }
}
