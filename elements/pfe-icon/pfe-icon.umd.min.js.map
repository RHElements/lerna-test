{"version":3,"file":"pfe-icon.umd.min.js","sources":["_temp/icon-set.js","_temp/builtin-icon-sets.js","_temp/pfe-icon.js"],"sourcesContent":["class PfeIconSet {\n  /**\n   * Run the icon set's name resolver to turn an icon name into an icon path, id, etc.\n   */\n  resolveIconName(iconName) {\n    return this._resolveIconName(iconName, this.name, this.path);\n  }\n\n  /**\n   * Create a new icon set.  Icon sets have a name (ie, a namespace).  For\n   * example, an icon with a name of \"rh-logo\" represents a \"logo\" icon from the\n   * \"rh\" set.  Icon set names are always separated from the rest of the icon\n   * name with a hyphen `-`.  This means that set names cannot contain a hyphen.\n   *\n   * @param {String} name the namespace of the icon set\n   * @param {String} path the web-accessible path to the icon set (for instance, a CDN)\n   * @param {Function} resolveIconName an optional function to combine the path and an icon name into a final path.  The function will be passed the namespaced icon name (for example, \"rh-api\" where rh is the namespace and api is the individual icon's name)\n   * @returns {Object} an object with the status of the icon set installation, such as `{ result: true, text: 'icon set installed' }` or `{ result: false, text: 'icon set is already installed' }`\n   */\n  constructor(name, path, resolveIconName) {\n    this.name = name;\n    this.path = path;\n    this._resolveIconName = resolveIconName;\n  }\n}\n\nexport default PfeIconSet;\n","/**\n * An icon name resolver for the PFE built-in icon sets.\n */\nfunction resolveIconName(name, iconSetName, iconSetPath) {\n  const [, , iconName] = /^([^-]+)-(.*)/.exec(name);\n\n  const iconId = `${iconSetName}-icon-${iconName}`;\n  const iconPath = `${iconSetPath}/${iconId}.svg`;\n\n  return iconPath;\n}\n\n/**\n * An 'init' function to add the PFE built-in icon sets to the current page.\n */\nexport function addBuiltIns(PfeIcon) {\n  [\n    {\n      name: \"web\",\n      path: \"https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs\"\n    },\n    {\n      name: \"rh\",\n      path: \"https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs\"\n    }\n  ].forEach(set => PfeIcon.addIconSet(set.name, set.path, resolveIconName));\n}\n","/*!\n * PatternFly Elements: PfeIcon 1.0.0-prerelease.24\n * @license\n * Copyright 2019 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../pfelement/pfelement.js\";\nimport PfeIconSet from \"./icon-set.js\";\nimport { addBuiltIns } from \"./builtin-icon-sets.js\";\n\n/**\n * Sets the id attribute on the <filter> element and points the CSS `filter` at that id.\n */\nfunction _setRandomFilterId(el) {\n  const randomId =\n    \"filter-\" +\n    Math.random()\n      .toString()\n      .slice(2, 10);\n\n  // set the CSS filter property to point at the given id\n  el.shadowRoot.querySelector(\"svg image\").style.filter = `url(#${randomId})`;\n\n  // set the id attribute on the SVG filter element to match\n  el.shadowRoot.querySelector(\"svg filter\").setAttribute(\"id\", randomId);\n}\n\nfunction _createIconSetHandler(el, setName) {\n  return ev => {\n    // if the set we're waiting for was added, run updateIcon again\n    if (setName === ev.detail.set.name) {\n      document.body.removeEventListener(\n        PfeIcon.EVENTS.ADD_ICON_SET,\n        el._handleAddIconSet\n      );\n      el.updateIcon();\n    }\n  };\n}\n\nfunction _iconLoad(el) {\n  el.classList.remove(\"load-failed\");\n}\n\nfunction _iconLoadError(el) {\n  el.classList.add(\"load-failed\");\n  if(el.has_fallback) {\n    el.classList.add(\"has-fallback\");\n  }\n}\n\nclass PfeIcon extends PFElement {\n  static get version() {\n    return \"1.0.0-prerelease.24\";\n  }\n\n  get html() {\n    return `<style>:host{--pfe-icon--Spacing:var(--pfe-theme--container-spacer, 16px);--pfe-icon--Size:var(--pfe-theme--icon-size, 1em);--pfe-icon--Padding:0;--pfe-icon--Color:var(--pfe-broadcasted--color--text, #333);--pfe-icon--BackgroundColor:transparent;--pfe-icon--BorderColor:transparent;position:relative;display:inline-block}:host([data-block]){display:block;margin-bottom:var(--pfe-icon--Spacing);margin-top:var(--pfe-icon--Spacing)}:host([data-block]):first-child{margin-top:0}:host svg{width:var(--pfe-icon--Size);height:var(--pfe-icon--Size)}:host(:not(.load-failed)){vertical-align:middle;border-radius:50%;background-color:transparent;background-color:var(--pfe-icon--BackgroundColor,transparent);border:1px solid transparent;border:var(--pfe-theme--ui--border-width,1px) var(--pfe-theme--ui--border-style,solid) var(--pfe-icon--BorderColor,transparent);padding:0;padding:var(--pfe-icon--Padding,0)}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host(:not(.load-failed)){background-color:#fff!important}:host(:not(.load-failed)) svg filter feFlood{flood-color:#000!important}}@supports (-ms-accelerator:true){:host(:not(.load-failed)){background-color:#fff!important}:host(:not(.load-failed)) svg filter feFlood{flood-color:#000!important}}@supports (-ms-ime-align:auto){:host(:not(.load-failed)){background-color:#fff!important}:host(:not(.load-failed)) svg filter feFlood{flood-color:#000!important}}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host(:not(.load-failed)) svg image{-webkit-filter:none;filter:none}}:host(:not(.load-failed)) filter feFlood{flood-color:var(--pfe-icon--Color)}:host(:not(.load-failed)) .pfe-icon--fallback{display:none}:host([size=\"2x\"]){--pfe-icon--Size:2em}:host([size=\"3x\"]){--pfe-icon--Size:3em}:host([size=\"4x\"]){--pfe-icon--Size:4em}:host([size=xl]){--pfe-icon--Size:100px}:host([size=lg]){--pfe-icon--Size:64px}:host([size=md]){--pfe-icon--Size:32px}:host([size=sm]){--pfe-icon--Size:14px}:host([color=base]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-base, #0477a4)}:host([color=complement]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-complement, #464646)}:host([color=accent]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-accent, #fe460d)}:host([color=critical]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--critical, #bb0000)}:host([color=important]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--important, #d73401)}:host([color=moderate]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--moderate, #ffc024)}:host([color=success]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--success, #2e7d32)}:host([color=info]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--info, #0277bd)}:host([color=default]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--default, #606060)}:host([circled]){--pfe-icon--BackgroundColor:transparent;--pfe-icon--BorderColor:var(--pfe-theme--color--surface--border, #d2d2d2);--pfe-icon--Padding:0.05em}:host([circled=base]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--base, #dfdfdf);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--base--text, #333)}:host([circled=lightest]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--lightest, #fff);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--lightest--text, #333)}:host([circled=light]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--lighter, #ececec);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--lighter--text, #333)}:host([circled=dark]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--darker, #464646);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--darker--text, #fff)}:host([circled=darkest]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--darkest, #131313);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--darkest--text, #fff)}:host([circled=complement]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--complement, #0477a4);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--complement--text, #fff)}:host([circled=accent]){--pfe-icon--BackgroundColor:var(--pfe-theme--color--surface--accent, #fe460d);--pfe-icon--BorderColor:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--accent--text, #fff)}:host(.load-failed){--pfe-icon--BackgroundColor:transparent;--pfe-icon--BorderColor:transparent;--pfe-icon--Padding:0}:host(.load-failed) ::slotted(:first-child){margin-top:0}:host(.load-failed) ::slotted(:last-child){margin-bottom:0}:host(.load-failed) svg image{display:none}:host(.load-failed.has-fallback) svg,:host(.load-failed[on-fail=collapse]) svg{display:none}:host(.load-failed[on-fail=collapse]){--pfe-icon--Size:0}</style><div class=\"pfe-icon--fallback\">\n  <slot></slot>\n</div>\n<svg xmlns=\"http://www.w3.org/2000/svg\">\n  <filter color-interpolation-filters=\"sRGB\" x=\"0\" y=\"0\" height=\"100%\" width=\"100%\">\n    <feFlood result=\"COLOR\" />\n    <feComposite operator=\"in\" in=\"COLOR\" in2=\"SourceAlpha\" />\n  </filter>\n  <image xlink:href=\"\" width=\"100%\" height=\"100%\"></image>\n</svg>`;\n  }\n\n  static get properties() {\n    return {\"icon\":{\"title\":\"Icon\",\"type\":\"string\",\"enum\":[],\"prefixed\":false},\"size\":{\"title\":\"Size\",\"type\":\"string\",\"enum\":[\"default\",\"xl\",\"lg\",\"md\",\"sm\",\"2x\",\"3x\",\"4x\"],\"default\":\"default\",\"prefixed\":false},\"color\":{\"title\":\"Color\",\"type\":\"string\",\"enum\":[\"default\",\"base\",\"compliment\",\"accent\",\"critical\",\"important\",\"moderate\",\"success\",\"info\"],\"default\":\"default\",\"prefixed\":false}};\n  }\n\n  static get slots() {\n    return {};\n  }\n  static get tag() {\n    return \"pfe-icon\";\n  }\n\n  get templateUrl() {\n    return \"pfe-icon.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-icon.scss\";\n  }\n\n  get schemaUrl() {\n    return \"pfe-icon.json\";\n  }\n\n  get has_fallback() {\n    return this.children.length > 0 || this.innerText.length > 0;\n  }\n\n  static get observedAttributes() {\n    return [\"icon\", \"on-fail\"];\n  }\n\n  constructor() {\n    super(PfeIcon);\n\n    this.image = this.shadowRoot.querySelector(\"svg image\");\n    this.image.addEventListener(\"load\", () => _iconLoad(this));\n    this.image.addEventListener(\"error\", () => _iconLoadError(this));\n  }\n\n  attributeChangedCallback(attr, oldValue, newValue) {\n    super.attributeChangedCallback(...arguments);\n    this.updateIcon(newValue);\n  }\n\n  updateIcon(iconName = this.getAttribute(\"icon\")) {\n    const { setName, set } = PfeIcon.getIconSet(iconName);\n\n    if (set) {\n      const iconPath = set.resolveIconName(iconName);\n      this.image.setAttribute(\"xlink:href\", iconPath);\n      _setRandomFilterId(this);\n    } else {\n      // the icon set we want doesn't exist (yet?) so start listening for new icon sets\n      this._handleAddIconSet = _createIconSetHandler(this, setName);\n\n      document.body.addEventListener(\n        PfeIcon.EVENTS.ADD_ICON_SET,\n        this._handleAddIconSet\n      );\n    }\n  }\n\n  /**\n   * Get an icon set by providing the set's name, _or_ the name of an icon from that set.\n   *\n   * @param {String} iconName the name of the set, or the name of an icon from that set.\n   * @return {PfeIconSet} the icon set\n   */\n  static getIconSet(iconName) {\n    const [setName] = iconName.split(\"-\");\n    const set = this._iconSets[setName];\n    return { setName, set };\n  }\n\n  static addIconSet(name, path, resolveIconName) {\n    if (this._iconSets[name]) {\n      throw new Error(\n        `can't add icon set ${name}; a set with that name already exists.`\n      );\n    }\n\n    this._iconSets[name] = new PfeIconSet(name, path, resolveIconName);\n\n    document.body.dispatchEvent(\n      new CustomEvent(this.EVENTS.ADD_ICON_SET, {\n        bubbles: false,\n        detail: {\n          set: this._iconSets[name]\n        }\n      })\n    );\n  }\n\n  static get EVENTS() {\n    return {\n      ADD_ICON_SET: `${this.tag}:add-icon-set`\n    };\n  }\n}\n\nPfeIcon._iconSets = {};\n\naddBuiltIns(PfeIcon);\n\nPFElement.create(PfeIcon);\n\nexport default PfeIcon;\n"],"names":["PfeIconSet","iconName","this","_resolveIconName","name","path","resolveIconName","iconSetName","iconSetPath","exec","PfeIcon","PFElement","children","length","innerText","icon","title","type","enum","prefixed","size","default","color","attr","oldValue","newValue","arguments","updateIcon","getAttribute","getIconSet","setName","set","iconPath","image","setAttribute","el","randomId","Math","random","toString","slice","shadowRoot","querySelector","style","filter","_handleAddIconSet","ev","detail","body","removeEventListener","EVENTS","ADD_ICON_SET","_createIconSetHandler","addEventListener","split","_iconSets","Error","dispatchEvent","CustomEvent","tag","_this","classList","remove","_iconLoad","add","has_fallback","_iconLoadError","forEach","addIconSet","create"],"mappings":"4gCAAMA,8CAIYC,UACPC,KAAKC,iBAAiBF,EAAUC,KAAKE,KAAMF,KAAKG,wBAc7CD,EAAMC,EAAMC,kBACjBF,KAAOA,OACPC,KAAOA,OACPF,iBAAmBG,ECnB5B,SAASA,EAAgBF,EAAMG,EAAaC,SACnB,gBAAgBC,KAAKL,UAGxBI,OADFD,iCASQG,ECuDtBA,+TAAgBC,m6KA8BX,uDAIA,wDAIA,4DAIuB,EAAvBT,KAAKU,SAASC,QAAsC,EAAxBX,KAAKY,UAAUD,+CAxC3C,+DAiBA,CAACE,KAAO,CAACC,MAAQ,OAAOC,KAAO,SAASC,KAAO,GAAGC,UAAW,GAAOC,KAAO,CAACJ,MAAQ,OAAOC,KAAO,SAASC,KAAO,CAAC,UAAU,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAMG,QAAU,UAAUF,UAAW,GAAOG,MAAQ,CAACN,MAAQ,QAAQC,KAAO,SAASC,KAAO,CAAC,UAAU,OAAO,aAAa,SAAS,WAAW,YAAY,WAAW,UAAU,QAAQG,QAAU,UAAUF,UAAW,wCAIlX,qCAGA,4DAoBA,CAAC,OAAQ,mEAWOI,EAAMC,EAAUC,qWACLC,gBAC7BC,WAAWF,6CAGPxB,mCAAWC,KAAK0B,aAAa,UACblB,EAAQmB,WAAW5B,GAApC6B,IAAAA,QAASC,IAAAA,OAEbA,EAAK,KACDC,EAAWD,EAAIzB,gBAAgBL,QAChCgC,MAAMC,aAAa,aAAcF,GAzG5C,SAA4BG,OACpBC,EACJ,UACAC,KAAKC,SACFC,WACAC,MAAM,EAAG,MAGXC,WAAWC,cAAc,aAAaC,MAAMC,eAAiBR,QAG7DK,WAAWC,cAAc,cAAcR,aAAa,KAAME,IA+FtClC,gBAGd2C,kBA/FX,SAA+BV,EAAIL,UAC1B,YAEDA,IAAYgB,EAAGC,OAAOhB,IAAI3B,gBACnB4C,KAAKC,oBACZvC,EAAQwC,OAAOC,aACfhB,EAAGU,qBAEFlB,eAuFsByB,CAAsBlD,KAAM4B,YAE5CkB,KAAKK,iBACZ3C,EAAQwC,OAAOC,aACfjD,KAAK2C,wDAWO5C,SACEA,EAASqD,MAAM,KAA1BxB,kBAEA,CAAEA,UAASC,IADN7B,KAAKqD,UAAUzB,uCAIX1B,EAAMC,EAAMC,MACxBJ,KAAKqD,UAAUnD,SACX,IAAIoD,4BACcpD,iDAIrBmD,UAAUnD,GAAQ,IAAIJ,EAAWI,EAAMC,EAAMC,YAEzC0C,KAAKS,cACZ,IAAIC,YAAYxD,KAAKgD,OAAOC,aAAc,UAC/B,SACD,KACDjD,KAAKqD,UAAUnD,4CAOnB,cACYF,KAAKyD,kRA/DlBjD,aAEDuB,MAAQ2B,EAAKnB,WAAWC,cAAc,eACtCT,MAAMoB,iBAAiB,OAAQ,kBAhExC,SAAmBlB,KACd0B,UAAUC,OAAO,eA+DwBC,QACrC9B,MAAMoB,iBAAiB,QAAS,kBA7DzC,SAAwBlB,KACnB0B,UAAUG,IAAI,eACd7B,EAAG8B,gBACDJ,UAAUG,IAAI,gBA0D0BE,eAgE/CxD,EAAQ6C,UAAY,GD7KQ7C,EC+KhBA,GD7KR,MACQ,WACA,qEAER,MACQ,UACA,sEAERyD,QAAQ,mBAAOzD,EAAQ0D,WAAWrC,EAAI3B,KAAM2B,EAAI1B,KAAMC,KCuK1DK,EAAU0D,OAAO3D"}