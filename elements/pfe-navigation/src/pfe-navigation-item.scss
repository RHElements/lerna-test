@import "../../pfe-sass/pfe-sass";

$LOCAL: navigation;

:host {
  height: 100%;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
}

:host([pfe-icon]) {
  display: flex;
}

// :host(:not([pfe-icon="bento"]))
:host(:not([slot="site-switcher"])) {
  display: none;
  @media screen and (min-width: pfe-breakpoint(sm)) {
    display: flex;
  }
}

:host([hidden]),
::slotted([slot="tray"][hidden]) {
  display: none;
  visibility: hidden;
}

::slotted([slot="trigger"]) {
  margin: 0;
  font-family: #{pfe-var(font-family)};
  font-size: #{pfe-local($cssvar: FontSize, $fallback: 14px, $region: trigger)};
  font-weight: #{pfe-local($cssvar: FontWeight, $fallback: 100, $region: trigger)};
  color: #{pfe-local($cssvar: Color, $fallback: #{map-get($pfe-colors, text--on-dark)})};
}

::slotted([slot="tray"]) {
  :host(:not([context="main"])) & {
    transition: all #{pfe-var(animation-timing)};

    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;

    background-color: #{pfe-color(surface--lightest)};
    color: #{pfe-color(surface--lightest--text)};

    box-sizing: border-box;
    padding: #{pfe-local($cssvar: Padding, $region: tray)};
    max-height: calc(100vh - var(--pfe-navigation--Height, 84px));
    overflow-x: hidden;
    overflow-y: scroll;
  }

  :host([context="main"]) & {
    @include pfe-accordion-panel;
  }

  :host([context="main"].expanded) &,
  :host([context="main"]) &[aria-expanded="true"] {
    @include pfe-accordion-panel-expanded;
    @include pfe-accordion-panel-expanded-style;
  }

  &.animating {
    display: block;
    transition: height 0.3s ease-in-out;
  }
}

.pfe-navigation-item {
  &__trigger {
    @each $prop in (text, ui-link, ui-link--hover, ui-link--visited, ui-link--focus) {
      --pfe-broadcasted--color--#{$prop}: #{pfe-local(Color)};
    }

    // Enforce the font-size for the navigation regardless of h-level settings
    @each $level in (alpha, beta, gamma) {
      --pfe-theme--font-size--#{$level}:   #{pfe-local($cssvar: FontSize, $region: trigger)};
      --pfe-theme--font-weight--#{$level}: #{pfe-local($cssvar: FontWeight, $region: trigger)};
    }

    font-family: #{pfe-var(font-family)};
    font-size:   #{pfe-local($cssvar: FontSize, $region: trigger)};
    font-weight: #{pfe-local($cssvar: FontWeight, $region: trigger)};

    color: #{pfe-local(Color)};
  
    border-top: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderTopColor)};
    border-right: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-bottom: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-left: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};

    &:hover {
      --pfe-navigation--BorderLeft: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderLeftColor--focus)};

      cursor: pointer;
    }

    :host(:not([context="main"])) & {
      position: relative;
      flex-grow: 1;

      @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
        --pfe-theme--link--#{$prop}: none;
      }

      text-align:  center;
      white-space: nowrap;
      margin-bottom: 0;

      display: flex;
      flex-flow: column nowrap;
      align-items: center;
      justify-content: center;
  
      transition: all #{pfe-var(animation-timing)};
    
      margin: 0;
      outline: none;
  
      background-color: #{pfe-local(BackgroundColor)};
      padding: calc(#{pfe-var(container-padding)} / 2) #{pfe-var(container-padding)};
      
      &:hover,
      :host([aria-current="location"]) {
        --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
      }
  
      &:focus {
        --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
        --pfe-navigation--BorderColor: #{pfe-color(surface--lightest)};
      }
  
      &:focus:not(:focus-visible) {
        outline: none;  // removes outline for mouse users, preserves it for keyboard users
      }
  
      &[aria-expanded="true"],
      .expanded & {
        --pfe-navigation--Color: #{pfe-color(text)};
        --pfe-navigation--BackgroundColor: #{pfe-color(surface--lightest)};
        --pfe-navigation--BorderTopColor:  #{pfe-color(surface--accent)};
      }
    }
  
    :host([pfe-icon]) & {
      --pfe-navigation__trigger--FontSize: 14px;
    }

    &--icon {
      :host([has_tray]:not([pfe-icon]):hover) [aria-expanded="false"] & {
        visibility: visible;
        @include pfe-arrow-color(#{pfe-local(Color)});
      }

      :host(:not([pfe-icon],[context="main"])) & {
        @include pfe-arrow(down, #{pfe-color(feedback--default)}, $width: 6px, $height: 6px);
        position: absolute;
        bottom: #{pfe-var(container-spacer)};
      }

      :host([context="main"]) [aria-expanded="false"] & {
        visibility: visible;
        @include pfe-chevron-expanded($state: false);
      }

      :host([context="main"]) [aria-expanded="true"] & {
        visibility: visible;
        @include pfe-chevron-expanded;
      }

      :host([pfe-icon]) & {
        @include icon(
          $path: #{pfe-local($cssvar: icon)},
          $size: 21px
        );
        margin-bottom: calc(#{pfe-var(container-spacer)} / 2);
      }

      :host(:not([pfe-icon],[context="main"])) [aria-expanded="false"] & {
        visibility: hidden;
      }
    }
  }
  &__tray {
    
  }
}

:host(.animating) {
  transition: transform 0.3s #{pfe-var(animation-timing)};
}

// Styles for navigation items appearing inside the mobile menu
:host([context="main"]) {
  --pfe-navigation__trigger--FontSize: 16px;

  @include pfe-trigger-color($component-name: navigation);

  --pfe-navigation--BackgroundColor: #{pfe-var(surface--lightest)};
  --pfe-navigation--Color: #{pfe-var(surface--lightest--text)};

  align-items: flex-start;

  .pfe-navigation-item__trigger {
    @include pfe-trigger-button;

    box-sizing: border-box;

    &[aria-expanded="true"] {
      @include pfe-trigger-color-expanded($component-name: navigation);
      // @include pfe-trigger-expanded;
      // &::after {
      //   @include pfe-chevron-expanded;
      // }
    }

    // &[aria-expanded="false"]::after {
    //     @include pfe-chevron-expanded($state: false);
    // }
  }
}

:host([context="main"][first]) {
  @include pfe-trigger-button-first($theme: light);
}

:host([context="main"][last]) [aria-expanded="false"] {
  @include pfe-trigger-button-last;
}
