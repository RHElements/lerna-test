@import "../../pfe-sass/pfe-sass";

$LOCAL: navigation;
$USE-FALLBACK: true;

:host {
  --pfe-navigation__trigger-icon--Visible: hidden;

  height: 100%;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
}

:host([pfe-icon="web-mobile-menu"][hidden]) {
  flex-grow: 1;
}

// Styles for navigation items appearing inside the mobile menu
:host([is_nested]) {
  @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
    --pfe-navigation__trigger--FontSize: 16px;
    --pfe-navigation--BackgroundColor: #{pfe-var(surface--lightest)};
    --pfe-navigation--Color: #{pfe-var(surface--lightest--text)};

    @include pfe-trigger-color($component-name: navigation);
  }
}


// Styles for navigation items appearing inside the mobile menu
:host([is_nested][first]) {
  @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
    @include pfe-trigger-button-first($theme: light);
  }
}

/* ----------------- */
/*  TRIGGER STYLES   */
/* ----------------- */
$trigger--FontSize--fallback:   #{map-get($pfe-vars, font-size--heading--zeta)};
$trigger--FontWeight--fallback: #{map-get($pfe-vars, font-weight--light)};
$trigger--Color--fallback: #{map-get($pfe-colors, text--on-dark)};

.pfe-navigation-item__trigger {
  --pfe-navigation--Color: #{pfe-color(text--on-dark)};

  @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
    --pfe-theme--link--#{$prop}: none;
  }

  @each $prop in (text, ui-link, ui-link--hover, ui-link--visited, ui-link--focus) {
    --pfe-broadcasted--color--#{$prop}: #{pfe-local($cssvar: Color, $fallback: #{$trigger--Color--fallback})};
  }

  // Enforce the font-size for the navigation regardless of h-level settings
  @each $level in (alpha, beta, gamma) {
    --pfe-theme--font-size--#{$level}:   #{pfe-local($cssvar: FontSize, $fallback: #{$trigger--FontSize--fallback})};
    --pfe-theme--font-weight--#{$level}: #{pfe-local($cssvar: FontWeight, $fallback: #{$trigger--FontWeight--fallback})};
  }

  @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
    --pfe-theme--link--#{$prop}: none;
  }

  border-top: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderTopColor)};
  border-right: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
  border-bottom: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
  border-left: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};

  position: relative;
  flex-grow: 1;
  
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;

  transition: all #{pfe-var(animation-timing)};

  outline: none;

  background-color: #{pfe-local(BackgroundColor)};
  padding: calc(#{pfe-var(container-padding)} / 2) #{pfe-var(container-padding)} !important;

  &:hover {
    --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
    --pfe-navigation__trigger-icon--Visible: visible;

    cursor: pointer;

    :host([has_tray]:not([pfe-icon]):not([is_nested]):not(.expanded)) & {
      --pfe-navigation__trigger-icon--Visible: visible;
      @include pfe-arrow-color(#{pfe-local(Color)});
    }  

    @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
      :host([is_nested]) & {
        border-left: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderLeftColor--focus)};
      }
    }

    @media screen and (min-width: #{pfe-breakpoint(xl)}) {
      :host([has_tray]:not(.expanded)) & {
        --pfe-navigation__trigger-icon--Visible: visible;
      }
    }
  }

  &:focus {
    --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
    --pfe-navigation--BorderColor: #{pfe-color(surface--lightest)};
  }

  // &:focus:not(:focus-visible) {
  //   outline: none;  // removes outline for mouse users, preserves it for keyboard users
  // }

  // After element is the filled-in dropdown caret
  :host(:not([pfe-icon])) &::after {
    display: block;
    content: " ";
    visibility: pfe-local($cssvar: Visible, $region: trigger-icon, $fallback: hidden);

    @include pfe-arrow(down, #{pfe-color(feedback--default)}, $width: 6px, $height: 6px);
    position: absolute;
    bottom: #{pfe-var(container-spacer)};
  }

  // :host([pfe-icon]) &::before {
  //   content: " ";
  //   @include pfe-icon(
  //     $path: #{pfe-local($cssvar: icon)},
  //     $size: 21px
  //   );
  //   margin-bottom: calc(#{pfe-var(container-spacer)} / 2);
  // }

  // Indicates this is the current section the user is visiting
  :host([aria-current="location"]) & {
    --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
  }

  :host(.expanded) & {
    --pfe-navigation__trigger-icon--Visible: visible;
  
    --pfe-navigation--Color: #{pfe-color(text)};
    --pfe-navigation--BackgroundColor: #{pfe-color(surface--lightest)};
    --pfe-navigation--BorderTopColor:  #{pfe-color(surface--accent)};
  }

  :host(:not([has_tray])) & {
    --pfe-navigation__trigger-icon--Visible: hidden;
  }

  :host([pfe-icon]) & {
    --pfe-navigation__trigger--FontSize: 14px;
    --pfe-navigation__trigger-icon--Visible: hidden;
  }

  :host(:not([pfe-icon]):not([is_nested]):not(.expanded)) & {
    --pfe-navigation__trigger-icon--Visible: hidden;
  }

  // At mobile if inside the main context, update the color to a text color
  @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
    :host([is_nested]) & {
      --pfe-navigation--Color: #{pfe-color(text)};

      @include pfe-trigger-button;

      box-sizing: border-box;
      align-items: stretch;
    }
    
    :host([is_nested].expanded) & {
      @include pfe-trigger-expanded;
      @include pfe-trigger-color-expanded($component-name: navigation);
    }
    
    // Chevron styles for the navigation accordion on mobile
    &::after {
      :host([is_nested]:not(.expanded)) & {
        @include pfe-chevron-expanded($state: false);
      }
  
      :host([is_nested].expanded) & {
        @include pfe-chevron-expanded;
      }
  
      :host([is_nested]) & {
        --pfe-navigation__trigger-icon--Visible: visible;
        border-color: #{pfe-local(Color)};
      }
  
      :host([is_nested]:not([has_tray])) & {
        transform: rotate(-45deg);
      }
    }
  }

  :host([hidden]) & {
    display: none;
  }

  pfe-icon {
    --pfe-icon--Color: #{pfe-local(Color)};

    margin-bottom: calc(#{pfe-var(container-spacer)} / 2);
    
    &[icon="web-plus"] {
      transform: rotate(-45deg);
    }
  }
}

::slotted([slot="trigger"]) {
  // Typography styles
  font-family: pfe-var(font-family);
  font-size:   pfe-local($cssvar: FontSize, $fallback: #{$trigger--FontSize--fallback});
  font-weight: pfe-local($cssvar: FontWeight, $fallback: #{$trigger--FontWeight--fallback});
  color:       pfe-local($cssvar: Color, $fallback: #{$trigger--Color--fallback});

  white-space: nowrap;

  margin: 0;
}

/* ----------------- */
/*    TRAY STYLES    */
/* ----------------- */
::slotted([slot="tray"]) {
  --pfe-navigation--Color: #{pfe-color(text)};
  --pfe-navigation--FontWeight: #{pfe-color(text)};

  transition: all #{pfe-var(animation-timing)};
  box-sizing: border-box;

  :host([pfe-icon="web-mobile-menu"][hidden]) & {
    display: flex;
    visibility: visible;
  }

  :host([pfe-icon="web-mobile-menu"]:not([hidden])) &,
  :host(:not([pfe-icon="web-mobile-menu"]):not([is_nested])) &,
  :host([is_nested][parent_hidden]) & {
    position: absolute;
    top: 100%;
    left: 0;

    background-color: #{pfe-color(surface--lightest)};
    color: #{pfe-local(Color)};

    padding: #{pfe-local($cssvar: Padding, $region: tray)};
    width: 100%;
    max-height: calc(100vh - var(--pfe-navigation--Height, 84px));
    overflow-x: hidden;
    overflow-y: scroll;
  }

  //  Styles for the nested elements
  :host([is_nested]:not([parent_hidden])) & {
    @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
      --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};

      @include pfe-container;
    }
  }

  @media screen and (max-width: #{pfe-breakpoint($size: xl, $max: true)}) {
    :host([is_nested]) & {
      @include pfe-accordion-panel;
      box-sizing: border-box;
      width: 100%;
    }

    :host([is_nested].expanded) & {
      @include pfe-accordion-panel-expanded;
      @include pfe-accordion-panel-expanded-style;
    }
  }

  @media screen and (min-width: #{pfe-breakpoint(xl)}) {
    :host([pfe-icon="web-mobile-menu"]) & {
      display: flex;
      flex-grow: 1;
    }
  }
}

// Let the main item or the tray be hidden with the attribute
:host([hidden]:not([pfe-icon="web-mobile-menu"])),
:host(:not([pfe-icon="web-mobile-menu"])) ::slotted([slot="tray"][hidden]) {
  display: none;
  visibility: hidden;
}

// @TODO set up tray opening animation?
// :host(.animating) {
//   transition: transform 0.3s #{pfe-var(animation-timing)};
// }
