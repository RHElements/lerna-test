@import "../../pfe-sass/pfe-sass";

$LOCAL: navigation-item;

:host {
  --pfe-navigation-item--Color: #{pfe-color(text--on-dark)};
  --pfe-navigation-item--BackgroundColor: var(--pfe-navigation--BackgroundColor, #{pfe-color(surface--darkest)});
  --pfe-navigation-item--BorderTopColor: transparent;
  --pfe-navigation-item--BorderColor: transparent;
  --pfe-navigation-item--Padding--vertical: calc(#{pfe-var(container-padding)} / 2);
  --pfe-navigation-item--Padding--horizontal: #{pfe-var(container-padding)};

  --pfe-navigation-item__trigger--FontSize: 14px;
  --pfe-navigation-item__trigger--FontWeight: 100;

  --pfe-navigation-item__tray--Padding: #{pfe-var(container-padding)};

  --pfe-navigation-item__icon--Background: none;
  
  @media screen and (min-width: pfe-breakpoint(lg)) {
    --pfe-navigation-item--Padding--horizontal: calc(#{pfe-var(container-padding)} / 2);
    --pfe-navigation-item__tray--Padding: calc(#{pfe-var(container-padding)} * 2);
  }

  @media screen and (min-width: pfe-breakpoint(xl)) {
    --pfe-navigation-item--Padding--horizontal: #{pfe-var(container-padding)};
  }

  height: 100%;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
}

:host([icon]) {
  display: flex;
}

:host(:not([icon="menu"]):not([icon="bento"])) {
  display: none;
  @media screen and (min-width: pfe-breakpoint(sm)) {
    display: flex;
  }
}

@each $icon in (bento, user, globe, search, menu) {
  :host([icon="#{$icon}"]) {
    --pfe-navigation-item__icon--Background: #{map-get($icons, #{$icon}--on-dark)} no-repeat;
  }
  :host([icon="#{$icon}"].expanded) {
    --pfe-navigation-item__icon--Background: #{map-get($icons, #{$icon})} no-repeat;
  }
}

:host([hidden]),
::slotted([slot="tray"][hidden]) {
  display: none;
  visibility: hidden;
}

::slotted([slot="trigger"]) {
  margin: 0;
  font-family: #{pfe-var(font-family)};
  font-size: #{pfe-local($cssvar: FontSize, $fallback: 14px, $region: trigger)};
  font-weight: #{pfe-local($cssvar: FontWeight, $fallback: 100, $region: trigger)};
  color: #{pfe-local($cssvar: Color, $fallback: #{map-get($pfe-colors, text--on-dark)})};
}

::slotted([slot="tray"]) {
  padding: #{pfe-local($cssvar: Padding, $region: tray)};
  max-height: calc(100vh - var(--pfe-navigation--Height, 84px));
  overflow-x: hidden;
  overflow-y: scroll;
}

.pfe-navigation-item {
  &__trigger {
    --pfe-theme--link--text-decoration: none;
    --pfe-theme--link--text-decoration--hover: none;
    --pfe-theme--link--text-decoration--focus: none;

    --pfe-broadcasted--color--text:             #{pfe-local(Color)};
    --pfe-broadcasted--color--ui-link:          #{pfe-local(Color)};
    --pfe-broadcasted--color--ui-link--hover:   #{pfe-local(Color)};
    --pfe-broadcasted--color--ui-link--visited: #{pfe-local(Color)};
    --pfe-broadcasted--color--ui-link--focus:   #{pfe-local(Color)};

    @each $level in (alpha, beta, gamma) {
      --pfe-theme--font-size--#{$level}: #{pfe-local($cssvar: FontSize, $region: trigger)};
      --pfe-theme--font-weight--#{$level}: #{pfe-local($cssvar: FontWeight, $region: trigger)};
    }

    transition: all #{pfe-var(animation-timing)};

    position: relative;

    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
  
    font-family: #{pfe-var(font-family)};
    text-align: center;
    font-size: #{pfe-local($cssvar: FontSize, $region: trigger)};
    font-weight: #{pfe-local($cssvar: FontWeight, $region: trigger)};
    color: #{pfe-local(Color)};
  
    margin: 0;
    white-space: nowrap;
    outline: none;

    background-color: #{pfe-local(BackgroundColor)};
    padding: var(--pfe-navigation--Padding--vertical) var(--pfe-navigation-item--Padding--horizontal) !important;

    border-top: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderTopColor)};
    border-right: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-bottom: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-left: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};

    &:hover,
    :host([aria-current="location"]) {
      --pfe-navigation-item--BorderTopColor:  #{pfe-color(surface--accent)};
    }

    &:focus {
      --pfe-navigation-item--BorderTopColor:  #{pfe-color(surface--accent)};
      --pfe-navigation-item--BorderColor: #{pfe-color(surface--lightest)};
    }

    &[aria-expanded="true"],
    .expanded & {
      --pfe-navigation-item--Color: #{pfe-color(text)};
      --pfe-navigation-item--BackgroundColor: #{pfe-color(surface--lightest)};
      --pfe-navigation-item--BorderTopColor:  #{pfe-color(surface--accent)};
    }

    &:focus:not(:focus-visible) {
      outline: none;  // removes outline for mouse users, preserves it for keyboard users
    }
  
    :host([icon]) & {
      --pfe-navigation-item__trigger--FontSize: 12px;
    }

    &--icon {
      display: flex;
      background: #{pfe-local($cssvar: Background, $region: icon)};

      :host(:not([icon])) [aria-expanded="false"] & {
        visibility: hidden;
      }

      :host(:not([icon])) & {
        @include pfe-arrow(down, #{pfe-color(feedback--default)}, $width: 6px, $height: 6px) {
          position: absolute;
          bottom: 13px;
        }
      }

      :host([icon]) & {
        margin-bottom: calc(#{pfe-var(container-spacer)} / 2);
        width: 21px;
        height: 21px;
      }
    }
  }
  &__tray {
    display: none;

    width: 100%;
    margin: 0 auto;
  
    transition: all #{pfe-var(animation-timing)};
    background-color: #{pfe-color(surface--lightest)};
  
    position: absolute;
    top: 100%;
    left: 0;
    color: #{pfe-color(surface--lightest--text)};
    .expanded &,
    &[aria-expanded="true"] {
      display: block;
    }
  }
}
