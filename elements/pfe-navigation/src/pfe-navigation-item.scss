@import "../../pfe-sass/pfe-sass";

$LOCAL: navigation;
$USE-FALLBACK: true;

:host {
  height: 100%;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
}

// Let the main item or the tray be hidden with the attribute
:host([hidden]),
::slotted([slot="tray"][hidden]) {
  display: none;
  visibility: hidden;
}

/* ----------------- */
/*  TRIGGER STYLES   */
/* ----------------- */
$trigger--FontSize--fallback:   #{map-get($pfe-vars, font-size--heading--zeta)};
$trigger--FontWeight--fallback: #{map-get($pfe-vars, font-size--heading--zeta)};
$trigger--Color--fallback: #{map-get($pfe-colors, text--on-dark)};

::slotted([slot="trigger"]) {
  @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
    --pfe-theme--link--#{$prop}: none;
  }

  @each $prop in (text, ui-link, ui-link--hover, ui-link--visited, ui-link--focus) {
    --pfe-broadcasted--color--#{$prop}: #{pfe-local($cssvar: Color, $fallback: #{$trigger--Color--fallback})};
  }

  // Enforce the font-size for the navigation regardless of h-level settings
  @each $level in (alpha, beta, gamma) {
    --pfe-theme--font-size--#{$level}:   #{pfe-local($cssvar: FontSize, $fallback: #{$trigger--FontSize--fallback})};
    --pfe-theme--font-weight--#{$level}: #{pfe-local($cssvar: FontWeight, $fallback: #{$trigger--FontWeight--fallback})};
  }

  // Typography styles
  font-family: pfe-var(font-family);
  font-size:   pfe-local($cssvar: FontSize, $fallback: #{$trigger--FontSize--fallback});
  font-weight: pfe-local($cssvar: FontWeight, $fallback: #{$trigger--FontWeight--fallback});
  color:       pfe-local($cssvar: Color, $fallback: #{$trigger--Color--fallback});

  margin: 0;
  
  // At mobile if inside the main context, update the color to a text color
  @media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
    :host([context="main"]) & {
      --pfe-navigation--Color: #{pfe-color(text)};
    }
  }
}

/* ----------------- */
/*    TRAY STYLES    */
/* ----------------- */
::slotted([slot="tray"]) {
  --pfe-navigation--Color: #{pfe-color(text)};
  --pfe-navigation--FontWeight: #{pfe-color(text)};

  transition: all #{pfe-var(animation-timing)};
  box-sizing: border-box;

  //  Main region styles
  @media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
    :host([context="main"]) & {
      --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};

      @include pfe-container;
    }
  }

  // Tray styles for other dropdowns
  :host(:not([context="main"])) & {
    position: absolute;
    top: 100%;
    left: 0;

    background-color: #{pfe-color(surface--lightest)};
    color: #{pfe-color(surface--lightest--text)};

    padding: #{pfe-local($cssvar: Padding, $region: tray)};
    width: 100%;
    max-height: calc(100vh - var(--pfe-navigation--Height, 84px));
    overflow-x: hidden;
    overflow-y: scroll;
  }

  // &.animating {
  //   display: block;
  //   transition: height 0.3s ease-in-out;
  // }
}

.pfe-navigation-item {
  &__trigger {
    border-top: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderTopColor)};
    border-right: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-bottom: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};
    border-left: #{pfe-var(surface--border-width)} dashed #{pfe-local(BorderColor)};

    &:hover {
      cursor: pointer;
    }

    // :host(:not([context="main"])) & {
      position: relative;
      flex-grow: 1;

      @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
        --pfe-theme--link--#{$prop}: none;
      }

      text-align:  center;
      white-space: nowrap;
      margin-bottom: 0;

      display: flex;
      flex-flow: column nowrap;
      align-items: center;
      justify-content: center;
  
      transition: all #{pfe-var(animation-timing)};
    
      margin: 0;
      outline: none;
  
      background-color: #{pfe-local(BackgroundColor)};
      padding: calc(#{pfe-var(container-padding)} / 2) #{pfe-var(container-padding)};
      
      &:hover,
      :host([aria-current="location"]) {
        --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
      }
  
      &:focus {
        --pfe-navigation--BorderTopColor: #{pfe-color(surface--accent)};
        --pfe-navigation--BorderColor: #{pfe-color(surface--lightest)};
      }
  
      &:focus:not(:focus-visible) {
        outline: none;  // removes outline for mouse users, preserves it for keyboard users
      }
  
      &[aria-expanded="true"],
      .expanded & {
        --pfe-navigation--Color: #{pfe-color(text)};
        --pfe-navigation--BackgroundColor: #{pfe-color(surface--lightest)};
        --pfe-navigation--BorderTopColor:  #{pfe-color(surface--accent)};
      }
    // }

    @media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
      :host([context="main"]) &:hover {
        border-left: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-local(BorderLeftColor--focus)};
      }
      
      :host([context="main"].expanded) &,
      :host([context="main"]) &[aria-expanded="true"] {
        @include pfe-trigger-expanded;
      }
    }
  
    :host([pfe-icon]) & {
      --pfe-navigation__trigger--FontSize: 14px;
    }

    &--icon {
      :host([has_tray]:not([pfe-icon]):hover) [aria-expanded="false"] & {
        visibility: visible;
        @include pfe-arrow-color(#{pfe-local(Color)});
      }

      :host(:not([pfe-icon],[context="main"])) & {
        @include pfe-arrow(down, #{pfe-color(feedback--default)}, $width: 6px, $height: 6px);
        position: absolute;
        bottom: #{pfe-var(container-spacer)};
      }

      @media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
        :host([context="main"]) [aria-expanded="false"] & {
          visibility: visible;
          @include pfe-chevron-expanded($state: false);
        }

        :host([context="main"]) [aria-expanded="true"] & {
          visibility: visible;
          @include pfe-chevron-expanded;
        }

        :host([context="main"]:not([has_tray])) & {
          transform: rotate(-45deg);
        }
      }

      :host([pfe-icon]) & {
        @include pfe-icon(
          $path: #{pfe-local($cssvar: icon)},
          $size: 21px
        );
        margin-bottom: calc(#{pfe-var(container-spacer)} / 2);
      }

      :host(:not([pfe-icon],[context="main"])) [aria-expanded="false"] & {
        visibility: hidden;
      }
    }
  }
  &__tray {
    @media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
      :host([context="main"]) & {
        @include pfe-accordion-panel;
        box-sizing: border-box;
        width: 100%;
      }

      :host([context="main"].expanded) &,
      :host([context="main"]) &[aria-expanded="true"] {
        @include pfe-accordion-panel-expanded;
        @include pfe-accordion-panel-expanded-style;
      }
    }
  }
}

:host(.animating) {
  transition: transform 0.3s #{pfe-var(animation-timing)};
}

// Styles for navigation items appearing inside the mobile menu
@media screen and (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
  :host([context="main"]) {
    --pfe-navigation__trigger--FontSize: 16px;
    --pfe-navigation--BackgroundColor: #{pfe-var(surface--lightest)};
    --pfe-navigation--Color: #{pfe-var(surface--lightest--text)};

    @include pfe-trigger-color($component-name: navigation);

    align-items: flex-start;

    .pfe-navigation-item__trigger {
      @include pfe-trigger-button;

      box-sizing: border-box;

      &[aria-expanded="true"] {
        @include pfe-trigger-color-expanded($component-name: navigation);
      }
    }
  }
  
  :host([context="main"][first]) {
    @include pfe-trigger-button-first($theme: light);
  }

  :host([context="main"][last]) [aria-expanded="false"] {
    @include pfe-trigger-button-last;
  }
}


@media screen and (min-width: #{pfe-breakpoint(md)}) {
  :host([pfe-icon="menu"]) {
    .pfe-navigation-item__trigger {
      display: none;
    }
    ::slotted([slot="tray"]) {
      // display: contents;
      position: relative;
    }
  }
}
