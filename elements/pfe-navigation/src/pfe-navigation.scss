@import "../../pfe-sass/pfe-sass";

// data:image/svg+xml;utf8,

.bento {
  background-image: url('data:image/svg+xml;utf8,<svg width="19px" height="19px" viewBox="0 0 19 19" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Icon"><rect id="Rectangle" x="14" y="14" width="5" height="5"></rect><rect id="Rectangle" x="7" y="14" width="5" height="5"></rect><rect id="Rectangle" x="0" y="14" width="5" height="5"></rect><rect id="Rectangle" x="14" y="7" width="5" height="5"></rect><rect id="Rectangle" x="7" y="7" width="5" height="5"></rect><rect id="Rectangle" x="0" y="7" width="5" height="5"></rect><rect id="Rectangle" x="14" y="0" width="5" height="5"></rect><rect id="Rectangle" x="7" y="0" width="5" height="5"></rect><rect id="Rectangle" x="0" y="0" width="5" height="5"></rect></g></g></svg>');
}

$LOCAL: navigation;

:host {
  // Default spacing values
  --pfe-navigation--Padding--vertical: 20px; // calc(#{pfe-var(container-spacer)} * 4);
  --pfe-navigation--Padding--horizontal: #{pfe-var(container-spacer)};

  --pfe-navigation--Padding: 0 #{pfe-local(Padding--horizontal)};

  // Darkest is the default background color
  --pfe-navigation--BackgroundColor: #{pfe-color(surface--darkest)};
  --pfe-navigation--Color: #{pfe-color(surface--darkest--text)};
  --pfe-navigation--Border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;
  --pfe-navigation--Width: auto;
  --pfe-navigation--Height: auto;

  // Loop through the other breakpoints
  @each $size in (md, lg, xl) {
    @media screen and (min-width: pfe-breakpoint(#{$size})) {
      --pfe-navigation--Width: calc(#{pfe-breakpoint(#{$size})} - calc(#{pfe-local(Padding--horizontal)} * 2));
    }
  }

  // Reduce padding for print
  @media print {
    --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};
  }

  display: block;
}

// ::slotted(*) {
//   padding-top: #{pfe-local(Padding--vertical)};
//   padding-bottom: #{pfe-local(Padding--vertical)};
// }

::slotted([slot="logo"]) {
  margin: 0 !important;
  
  padding-top: #{pfe-local(Padding--vertical)} !important;
  padding-right: 16px !important;
  padding-bottom: #{pfe-local(Padding--vertical)} !important;

  // min-width: 80px;
  max-height: 72px;
}

::slotted([slot="skip"]) {
  @include pfe-sr-only;
}

::slotted([slot="main"]) {
  display: none;
  @media (min-width: #{pfe-breakpoint(lg)}) {
    display: contents;
  }
}

.pfe-navigation {
  &__wrapper {
    position: relative;
    z-index: 2;
    width: 100%;
    background-color: #{pfe-local(BackgroundColor)};
    color: #{pfe-local(Color)};
    width: 100%;
  }
  &__container {
    margin: 0 auto;
    width: #{pfe-local(Width)};
    color: #{pfe-local(Color)};
    z-index: 2;

    // need to do something here for IE11 since we can't redefine the variable
    @each $size in (md, lg, xl) {
      @media screen and (min-width: pfe-breakpoint(#{$size})) {
        width: calc(#{pfe-breakpoint(#{$size})} - #{map-get($pfe-vars, container-spacer) * 2});
      }
    }

    display: flex;
    flex-flow: row nowrap;
    align-items: stretch;
    justify-content: space-between;

    padding: 0 24px;
    @media (min-width: #{pfe-breakpoint(lg)}) {
      padding: 0;
    }
  }
  &__overlay {
    display: block;
    background-color: #25252580;
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1;
    &[hidden] {
      display: none;
    }
  }
  &__logo {
    display: flex;
    flex-flow: column nowrap;
    align-items: flex-start;
    justify-content: center;
  }
  &__main {
    display: none;
    @media (min-width: #{pfe-breakpoint(lg)}) {
      flex-grow: 1;
      display: flex;
      flex-flow: row nowrap;
      align-items: stretch;
      justify-content: flex-start;
    }
  }
  &__utility {
    grid-area: utility;
    display: flex;
    flex-flow: row nowrap;
    align-items: stretch;
    justify-content: flex-end;
    > [pfe-icon="menu"] {
      @media (min-width: #{pfe-breakpoint(lg)}) {
        display: none;
      }
    }
    &-links {
      &:not([name="site-switcher"]) {
        @media (max-width: #{pfe-breakpoint(lg, $max: true)}) {
          display: none;
        }
      }
    }
    &--mobile {
      display: grid;
      grid-gap: #{pfe-var(container-spacer)};
      ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: grid;
        grid-gap: #{pfe-var(container-spacer)};
      }
    }
  }
}
