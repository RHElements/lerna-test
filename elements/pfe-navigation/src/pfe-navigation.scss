@import "../../pfe-sass/pfe-sass";

$LOCAL: navigation;
$USE-FALLBACK: true;

$overlay--BackgroundColor--fallback: rgba(37, 37, 37, 0.5);

$variables: (
  // Default spacing values
  Padding--vertical: pfe-var(container-padding),
  Padding--horizontal: pfe-var(container-padding),
  Padding: 0 pfe-local(Padding--horizontal),

  // Darkest is the default background color
  BackgroundColor: pfe-color(surface--darkest),
  Color:           pfe-color(surface--darkest--text),

  // Variables for the border
  BorderTopColor: transparent,
  BorderColor:    transparent,
  Border:         pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor),

  MinHeight: 72px,

  // Variables for the trigger icon
  icon: none,

  // Overlay region
  overlay: (
    BackgroundColor: pfe-var($cssvar: overlay--BackgroundColor, $fallback: #{$overlay--BackgroundColor--fallback})
  ),

  // Trigger region
  trigger: (
    FontSize: 16px,
    FontWeight: 100
  ),

  // Tray region
  tray: (
    Padding: pfe-var(container-padding)
  )
);

:host {
  // Print the variables to the DOM
  @include print-variables-map($variables);

  // Reduce padding for print
  @media print {
    --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};
  }

  // Increase horizontal padding for above mobile breakpoints
  @media screen and (min-width: pfe-breakpoint(sm)) {
    --pfe-navigation--Padding--horizontal: calc(#{pfe-var(container-padding)} * 2);
  }

  // Reduce horizontal padding at large breakpoint
  @media screen and (min-width: pfe-breakpoint(lg)) {
    --pfe-navigation--Padding--horizontal: calc(#{pfe-var(container-padding)} / 2);
    --pfe-navigation__tray--Padding: calc(#{pfe-var(container-padding)} * 2);
  }

  // Increase horizontal padding at xl breakpoint
  @media screen and (min-width: pfe-breakpoint(xl)) {
    --pfe-navigation--Padding--horizontal: #{pfe-var(container-padding)};
  }

  display: block;
  z-index: pfe-var($cssvar: content, $category: zindex, $map: $z-index);
  width: 100%;
}

:host(.sticky) {
  position: sticky;
  top: 0;
  left: 0;
  width: 100vw;
  z-index: pfe-var($cssvar: navigation, $category: zindex, $map: $z-index);
}

// Note: These styles do not pick up in Edge
::slotted([slot="logo"]) {
  margin: 0;
  max-height: pfe-local(MinHeight);
}

::slotted([slot="mobile-login"]),
::slotted([slot="mobile-language"]) {
  color: pfe-radio(color, ui-link);
  text-decoration: pfe-radio(link, text-decoration);
}

::slotted([slot="mobile-menu--label"]) {
  font-family: pfe-var(font-family);
  font-size:   pfe-local(FontSize);
  font-weight: pfe-local(FontWeight);
  color: pfe-local(Color);
  margin-bottom: 0;
}

@each $icon in (bento, user, globe, search, menu) {
  [pfe-icon="#{$icon}"],
  ::slotted([pfe-icon="#{$icon}"]) {
    --pfe-navigation--icon: #{map-get($icons, #{$icon}--on-dark)};
  }

  [pfe-icon="#{$icon}"].expanded,
  ::slotted([pfe-icon="#{$icon}"].expanded) {
    --pfe-navigation--icon: #{map-get($icons, #{$icon})};
  }
}

.pfe-navigation {
  &__wrapper {
    position: relative;
    z-index: #{pfe-var($cssvar: navigation, $map: $z-index)};
    
    background-color: #{map-get($pfe-colors, surface--darkest)};
    background-color: #{pfe-local(BackgroundColor)};
    color: #{pfe-local(Color)};
    min-height: #{pfe-local(MinHeight)};
  }
  &__container {
    margin: 0 auto;
    padding: 0 #{pfe-local(Padding--horizontal)};

    display: flex;
    flex-flow: row nowrap;
    align-items: stretch;
    justify-content: space-between;

    // Loop through the other breakpoints
    @each $size in (md, lg, xl) {
      @media screen and (min-width: pfe-breakpoint(#{$size})) {
        // Set the variable for use in the tray region too
        --pfe-navigation--Width: calc(#{pfe-breakpoint(#{$size})} - calc(#{pfe-local(Padding--horizontal)} * 2));

        width: calc(#{pfe-breakpoint(#{$size})} - 2rem); // IE11 fallback
        width: #{pfe-local(Width)};
      }
    }

    @media (min-width: #{pfe-breakpoint(lg)}) {
      padding: 0;
    }
  }
  &__overlay {
    display: block;
    background-color: pfe-local($cssvar: BackgroundColor, $region: overlay, $fallback: #{$overlay--BackgroundColor--fallback});
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: #{pfe-var($cssvar: overlay, $category: 'zindex', $map: $z-index)};
    &[hidden] {
      display: none;
    }
  }
  &__logo {
    display: flex;
    flex-flow: column nowrap;
    align-items: flex-start;
    justify-content: center;
    
    padding-top: #{pfe-local(Padding--vertical)};
    padding-right: #{pfe-var(container-padding)};
    padding-bottom: #{pfe-local(Padding--vertical)};
  }
  &__skip {
    @include pfe-sr-only;
  }
  &__main {
    flex-grow: 1;
    display: flex;
    justify-content: flex-end;
    @media (min-width: #{pfe-breakpoint(lg)}) {
      flex-grow: 1;
      flex-flow: row nowrap;
      align-items: stretch;
      justify-content: flex-start;
    }
    &--mobile {
      display: grid;
      grid-gap: #{pfe-var(container-spacer)};
      height: 100%;
      @media (min-width: #{pfe-breakpoint(md)}) {
        &--columns,
        &-search {
          display: none;
        }
      }
      &--columns {
        display: grid;
        grid-gap: #{pfe-var(container-spacer)};
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      }
      &--item {
        &[pfe-icon="user"] {
          --pfe-navigation--icon: #{map-get($icons, user--as-link)};
        }
        &[pfe-icon="globe"] {
          --pfe-navigation--icon: #{map-get($icons, globe--as-link)};
        }
      }
    }
    &--icon {
      @include pfe-icon(
        $path: #{pfe-local($cssvar: icon)},
        $display: inline-block
      );
      
      margin-right: calc(#{pfe-var(container-spacer)} / 2);
    }
  }
  &__utility {
    display: flex;
    flex-flow: row nowrap;
    align-items: stretch;
    justify-content: flex-end;
    ::slotted(:not([name="site-switcher"])) {
      @media (max-width: #{pfe-breakpoint($size: lg, $max: true)}) {
        display: none;
      }
    }
  }
}
