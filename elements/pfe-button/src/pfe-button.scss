// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";

$LOCAL: button;

$LOCAL-VARIABLES: (
  BackgroundColor: pfe-var(ui-accent),
  BackgroundColor--hover: pfe-var(ui-accent--hover),
  Color: pfe-var(ui-base--text),
  FontSize: pfe-var(font-size),
  Border: 0,
  BorderRadius: pfe-var(surface--border-radius),
  Padding: calc(#{pfe-var(container-padding)} / 2) pfe-var(container-padding),
  LineHeight: pfe-var(line-height),
  after: (
    BorderColor: transparent,
    BorderColor--hover: transparent,
  ),
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge(
  $LOCAL-VARIABLES,
  (
    after: (
      Border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor, $region: after),
      Border--hover: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor--hover, $region: after),
    ),
  )
);

:host {
  display: inline-block;
}

:host([hidden]) {
  display: none;
}

:host([pfe-variant="primary"]) button,
:host([pfe-c-variant="primary"]) button,
button {
  background-color: pfe-local(BackgroundColor);
  color: pfe-local(Color);
  font-size: pfe-local(FontSize);
  font-family: pfe-var(font-family, $fallback: inherit);
  padding: pfe-local(Padding);
  cursor: pointer;
  border-radius: pfe-local(BorderRadius);
  border: pfe-local(Border);
  position: relative;
  line-height: pfe-local(LineHeight);

  &::after {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    content: "";
    border: pfe-local(Border, $region: after);
    border-radius: pfe-local(BorderRadius);
  }

  &:hover,
  &:focus {
    --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover)};
    --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after)};
  }
}

:host([pfe-variant="secondary"]),
:host([pfe-c-variant="secondary"]) {
  --pfe-button--BackgroundColor: transparent;
  --pfe-button--BackgroundColor--hover: transparent;
  --pfe-button--Color: #{pfe-var(ui-accent)};
  --pfe-button__after--BorderColor: #{pfe-var(ui-accent)};
  --pfe-button__after--Border--hover: #{pfe-var(ui--border-width--md)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor, $region: after)};
}

:host([pfe-variant="tertiary"]),
:host([pfe-c-variant="tertiary"]) {
  --pfe-button--BackgroundColor: transparent;
  --pfe-button--BackgroundColor--hover: transparent;
  --pfe-button--Color: #{pfe-var(text)};
  --pfe-button__after--BorderColor: #{pfe-var(text)};
  --pfe-button__after--Border--hover: #{pfe-var(ui--border-width--md)} #{pfe-var(ui--border-style)} #{pfe-local(BorderColor, $region: after)};
}

:host([pfe-variant="danger"]),
:host([pfe-c-variant="danger"]) {
  --pfe-button--BackgroundColor: #{pfe-var(feedback--critical--lighter)};
  --pfe-button--BackgroundColor--hover: #{pfe-var(feedback--critical)};
}

:host([pfe-variant="control"]),
:host([pfe-c-variant="control"]) {
  --pfe-button--BackgroundColor: transparent;
  --pfe-button--BackgroundColor--hover: transparent;
  --pfe-button--Color: #{pfe-var(text)};
  --pfe-button--BorderRadius: 0;
  --pfe-button__after--BorderColor: #{pfe-var(ui--border--lightest)};
  --pfe-button__after--BorderColor--hover: #{pfe-var(ui--border--lightest)};

  button {
    &::after {
      border-bottom-color: pfe-var(ui--border);
    }
    
    &:hover::after,
    &:focus::after {
      border-bottom-width: pfe-var(ui--border-width--md);
      border-bottom-color: pfe-var(ui-accent);
    }
  }
}

:host([pfe-variant="control"][disabled]),
:host([pfe-c-variant="control"][disabled]) {
  --pfe-button--BackgroundColor: #{pfe-var(surface--lighter)};
}

:host([disabled]) {
  --pfe-button--BackgroundColor: #{pfe-var(ui-disabled)};
  --pfe-button--BackgroundColor--hover: #{pfe-var(ui-disabled)};
  --pfe-button--Color: #{pfe-var(ui-disabled--text)};
  --pfe-button__after--Border: 0;
  --pfe-button__after--Border--hover: 0;
  pointer-events: none;
}
