import e from"../pfelement/pfelement.min.js";import t from"marked/marked.min.js";
/*!
 * PatternFly Elements: PfeMarkdown 1.0.0-prerelease.24
 * @license
 * Copyright 2019 Red Hat, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/class n extends e{static get version(){return"1.0.0-prerelease.24"}get html(){return"<style>:host{display:block}:host([hidden]){display:none}</style><slot></slot>"}static get properties(){return{on:{title:"Context",type:"string",enum:["light","dark"],default:"light",prefixed:!1}}}static get slots(){return{default:{title:"Markdown",type:"array",namedSlot:!1,items:{oneOf:[{$ref:"raw"}]}}}}static get tag(){return"pfe-markdown"}get templateUrl(){return"pfe-markdown.html"}get styleUrl(){return"pfe-markdown.scss"}get schemaUrl(){return"pfe-markdown.json"}get markdown(){return this._markdown}set markdown(e){e&&(this._markdown=this._unindent(e),this.renderMarkdown())}constructor(){super(n),this._markdown=null,this._markdownRender=null,this._markdownContainer=null,this._observerConfig={childList:!0,subtree:!0},this._readyStateChangeHandler=this._readyStateChangeHandler.bind(this),this.observer=new MutationObserver((e,t)=>{this._markdownContainer.textContent?(t.disconnect(),this.markdown=this._markdownContainer.textContent,this._muationObserve()):this._markdownRender.innerHTML=""})}connectedCallback(){super.connectedCallback(),this._markdownRender=document.createElement("div"),this._markdownRender.setAttribute("pfe-markdown-render",""),this.appendChild(this._markdownRender),this.shadowRoot.querySelector("slot").addEventListener("slotchange",()=>{this._markdownContainer||(this._markdownContainer=this.querySelector("[pfe-markdown-container]"),this._markdownContainer.style.display="none",this._init())})}disconnectedCallback(){this.observer.disconnect()}_readyStateChangeHandler(e){"complete"===e.target.readyState&&(document.removeEventListener("readystatechange",this._readyStateChangeHandler),this._init())}_init(){this._markdownContainer.textContent&&(this.markdown=this._markdownContainer.textContent),this._muationObserve()}renderMarkdown(){this._markdownRender.innerHTML=t(this.markdown)}_muationObserve(){this.observer.observe(this._markdownContainer,this._observerConfig)}_unindent(e){if(!e)return e;const t=e.replace(/\t/g,"  ").split("\n"),n=t.reduce(function(e,t){if(/^\s*$/.test(t))return e;const n=t.match(/^(\s*)/)[0].length;return null===e?n:n<e?n:e},null);return t.map(function(e){return e.substr(n)}).join("\n")}}e.create(n);export default n;
//# sourceMappingURL=pfe-markdown.min.js.map
