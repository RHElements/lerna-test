// Documentation for building can be found at: https://patternflyelements.com/docs/develop/javascript/

import PFElement from "<%= pfeElementLocation %>";

class <%= elementClassName %> extends PFElement {
  static get tag() {
    return "<%= elementName %>";
  }

  static get meta() {
    return {
      title: "<%= readmeName %>",
      description: "<%= description %>"
    };
  }

  get templateUrl() {
    return "<%= elementName %>.html";
  }

  get styleUrl() {
<%_ if (useSass) { _%>
    return "<%= elementName %>.scss";
<%_ } else { _%>
    return "<%= elementName %>.css";
<%_ } _%>
  }

  <% if (events.length < 1) { %>// <% } %>static get events() {
  <% if (events.length < 1) { %>//   <% } %>return {<% for(let i = 0; i < events.length; i++) { %>
      <%= events[i] %>: `${this.tag}:<%= events[i] %>`<% if (i < (events.length - 1)) { %>,<% } } %>
    <% if (events.length < 1) { %>//   <% } %>};
  <% if (events.length < 1) { %>// <% } %>}

  // Declare the type of this component
  static get PfeType() {
    return PFElement.PfeTypes.<%= _.capitalize(template_type) %>;
  }

  static get properties() {
    return {<%_ if (attributes.length > 0) { _%>
    <%_ for(let i = 0; i < attributes.length; i++) { %>
      <%= attributes[i] %>: {
        title: "<%= _.capitalize(attributes[i]) %>",
        // Valid types are: String, Boolean, and Number
        type: Boolean
      }<%_ if ( i < attributes.length - 1 ) { %>,<% } } } _%>};
  }

  static get slots() {
    return {<%_ if (slots.length > 0) { %>
    <%_ for(let i = 0; i < slots.length; i++) { _%>
    <%= _.camelCase(slots[i]) %>: {
      title: "<%= _.capitalize(slots[i]) %>",
      slotName: "<%= elementName %>--<%= slots[i] %>",
      slotClass: "<%= elementName %>__<%= slots[i] %>",
      slotId: "<%= slots[i] %>"
    }<%_ if ( i < slots.length - 1 ) { %>,<% } } } _%>};
  }

  constructor() {
    super(<%= elementClassName %>, { type: <%= elementClassName %>.PfeType });
    <%_ if (slots.length > 0) { %>
    <%_ for(let i = 0; i < slots.length; i++) { _%>
    this._<%= _.camelCase(slots[i]) %> = this.shadowRoot.querySelector(`#<%= slots[i] %>`);
    <%_ } } _%>
  }

  connectedCallback() {
    super.connectedCallback();

    // If you need to initialize any attributes, do that here

    <%_ if (slots.length > 0) { %>
    <%_ for(let i = 0; i < slots.length; i++) { _%>
    this.<%= _.camelCase(slots[i]) %> = this.querySelector(`[slot="${this.tag}--<%= slots[i] %>"]`);
    <%_ } _%>
    <%_ for(let i = 0; i < slots.length; i++) { %>
    // Add a slotchange listener to the lightDOM trigger
    // this.<%= _.camelCase(slots[i]) %>.addEventListener("slotchange", this._init);
    <%_ } _%>
    <%_ } _%>

    <%_ if (events.length > 0) { %>
    // @EXAMPLE Attaches a click event to fire the handler as a test
    <%_ for(let i = 0; i < events.length; i++) { _%>
    this.addEventListener("click", this._<%= events[i] %>Handler);
    <%_ } _%>
    <%_ } _%>
  }

  disconnectedCallback() {
    <%_ for(let i = 0; i < events.length; i++) { _%>
    this.removeEventListener("click", this._<%= events[i] %>Handler);
    <%_ } _%>
  }

<%_ if (attributes.length > 0) { _%>
  // Process the attribute change
  <% if (attributes.length < 1) { %>// <% } %>attributeChangedCallback(attr, oldValue, newValue) {
    <% if (attributes.length < 1) { %>//   <% } %>super.attributeChangedCallback(attr, oldValue, newValue);
    <% if (attributes.length < 1) { %>//   <% } %>}
<%_ } _%>

<%_ for(let i = 0; i < events.length; i++) { %>
  _<%= events[i] %>Handler(event) {
    this.emitEvent(<%= elementClassName %>.events.<%= events[i] %>, {
      detail: {}
    });
  }
<%_ } _%>
}

PFElement.create(<%= elementClassName %>);

export default <%= elementClassName %>;
